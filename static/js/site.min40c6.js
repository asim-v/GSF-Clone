/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./static/js/app.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/@material/animation/index.js":
/*!***************************************************!*\
  !*** ./node_modules/@material/animation/index.js ***!
  \***************************************************/
/*! exports provided: transformStyleProperties, getCorrectEventName, getCorrectPropertyName */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "transformStyleProperties", function() { return transformStyleProperties; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getCorrectEventName", function() { return getCorrectEventName; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getCorrectPropertyName", function() { return getCorrectPropertyName; });
/**
 * @license
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @typedef {{
 *   noPrefix: string,
 *   webkitPrefix: string,
 *   styleProperty: string
 * }}
 */
let VendorPropertyMapType;

/** @const {Object<string, !VendorPropertyMapType>} */
const eventTypeMap = {
  'animationstart': {
    noPrefix: 'animationstart',
    webkitPrefix: 'webkitAnimationStart',
    styleProperty: 'animation',
  },
  'animationend': {
    noPrefix: 'animationend',
    webkitPrefix: 'webkitAnimationEnd',
    styleProperty: 'animation',
  },
  'animationiteration': {
    noPrefix: 'animationiteration',
    webkitPrefix: 'webkitAnimationIteration',
    styleProperty: 'animation',
  },
  'transitionend': {
    noPrefix: 'transitionend',
    webkitPrefix: 'webkitTransitionEnd',
    styleProperty: 'transition',
  },
};

/** @const {Object<string, !VendorPropertyMapType>} */
const cssPropertyMap = {
  'animation': {
    noPrefix: 'animation',
    webkitPrefix: '-webkit-animation',
  },
  'transform': {
    noPrefix: 'transform',
    webkitPrefix: '-webkit-transform',
  },
  'transition': {
    noPrefix: 'transition',
    webkitPrefix: '-webkit-transition',
  },
};

/**
 * @param {!Object} windowObj
 * @return {boolean}
 */
function hasProperShape(windowObj) {
  return (windowObj['document'] !== undefined && typeof windowObj['document']['createElement'] === 'function');
}

/**
 * @param {string} eventType
 * @return {boolean}
 */
function eventFoundInMaps(eventType) {
  return (eventType in eventTypeMap || eventType in cssPropertyMap);
}

/**
 * @param {string} eventType
 * @param {!Object<string, !VendorPropertyMapType>} map
 * @param {!Element} el
 * @return {string}
 */
function getJavaScriptEventName(eventType, map, el) {
  return map[eventType].styleProperty in el.style ? map[eventType].noPrefix : map[eventType].webkitPrefix;
}

/**
 * Helper function to determine browser prefix for CSS3 animation events
 * and property names.
 * @param {!Object} windowObj
 * @param {string} eventType
 * @return {string}
 */
function getAnimationName(windowObj, eventType) {
  if (!hasProperShape(windowObj) || !eventFoundInMaps(eventType)) {
    return eventType;
  }

  const map = /** @type {!Object<string, !VendorPropertyMapType>} */ (
    eventType in eventTypeMap ? eventTypeMap : cssPropertyMap
  );
  const el = windowObj['document']['createElement']('div');
  let eventName = '';

  if (map === eventTypeMap) {
    eventName = getJavaScriptEventName(eventType, map, el);
  } else {
    eventName = map[eventType].noPrefix in el.style ? map[eventType].noPrefix : map[eventType].webkitPrefix;
  }

  return eventName;
}

// Public functions to access getAnimationName() for JavaScript events or CSS
// property names.

const transformStyleProperties = ['transform', 'WebkitTransform', 'MozTransform', 'OTransform', 'MSTransform'];

/**
 * @param {!Object} windowObj
 * @param {string} eventType
 * @return {string}
 */
function getCorrectEventName(windowObj, eventType) {
  return getAnimationName(windowObj, eventType);
}

/**
 * @param {!Object} windowObj
 * @param {string} eventType
 * @return {string}
 */
function getCorrectPropertyName(windowObj, eventType) {
  return getAnimationName(windowObj, eventType);
}




/***/ }),

/***/ "./node_modules/@material/base/component.js":
/*!**************************************************!*\
  !*** ./node_modules/@material/base/component.js ***!
  \**************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _foundation__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./foundation */ "./node_modules/@material/base/foundation.js");
/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



/**
 * @template F
 */
class MDCComponent {
  /**
   * @param {!Element} root
   * @return {!MDCComponent}
   */
  static attachTo(root) {
    // Subclasses which extend MDCBase should provide an attachTo() method that takes a root element and
    // returns an instantiated component with its root set to that element. Also note that in the cases of
    // subclasses, an explicit foundation class will not have to be passed in; it will simply be initialized
    // from getDefaultFoundation().
    return new MDCComponent(root, new _foundation__WEBPACK_IMPORTED_MODULE_0__["default"]());
  }

  /**
   * @param {!Element} root
   * @param {F=} foundation
   * @param {...?} args
   */
  constructor(root, foundation = undefined, ...args) {
    /** @protected {!Element} */
    this.root_ = root;
    this.initialize(...args);
    // Note that we initialize foundation here and not within the constructor's default param so that
    // this.root_ is defined and can be used within the foundation class.
    /** @protected {!F} */
    this.foundation_ = foundation === undefined ? this.getDefaultFoundation() : foundation;
    this.foundation_.init();
    this.initialSyncWithDOM();
  }

  initialize(/* ...args */) {
    // Subclasses can override this to do any additional setup work that would be considered part of a
    // "constructor". Essentially, it is a hook into the parent constructor before the foundation is
    // initialized. Any additional arguments besides root and foundation will be passed in here.
  }

  /**
   * @return {!F} foundation
   */
  getDefaultFoundation() {
    // Subclasses must override this method to return a properly configured foundation class for the
    // component.
    throw new Error('Subclasses must override getDefaultFoundation to return a properly configured ' +
      'foundation class');
  }

  initialSyncWithDOM() {
    // Subclasses should override this method if they need to perform work to synchronize with a host DOM
    // object. An example of this would be a form control wrapper that needs to synchronize its internal state
    // to some property or attribute of the host DOM. Please note: this is *not* the place to perform DOM
    // reads/writes that would cause layout / paint, as this is called synchronously from within the constructor.
  }

  destroy() {
    // Subclasses may implement this method to release any resources / deregister any listeners they have
    // attached. An example of this might be deregistering a resize event from the window object.
    this.foundation_.destroy();
  }

  /**
   * Wrapper method to add an event listener to the component's root element. This is most useful when
   * listening for custom events.
   * @param {string} evtType
   * @param {!Function} handler
   */
  listen(evtType, handler) {
    this.root_.addEventListener(evtType, handler);
  }

  /**
   * Wrapper method to remove an event listener to the component's root element. This is most useful when
   * unlistening for custom events.
   * @param {string} evtType
   * @param {!Function} handler
   */
  unlisten(evtType, handler) {
    this.root_.removeEventListener(evtType, handler);
  }

  /**
   * Fires a cross-browser-compatible custom event from the component root of the given type,
   * with the given data.
   * @param {string} evtType
   * @param {!Object} evtData
   * @param {boolean=} shouldBubble
   */
  emit(evtType, evtData, shouldBubble = false) {
    let evt;
    if (typeof CustomEvent === 'function') {
      evt = new CustomEvent(evtType, {
        detail: evtData,
        bubbles: shouldBubble,
      });
    } else {
      evt = document.createEvent('CustomEvent');
      evt.initCustomEvent(evtType, shouldBubble, false, evtData);
    }

    this.root_.dispatchEvent(evt);
  }
}

/* harmony default export */ __webpack_exports__["default"] = (MDCComponent);


/***/ }),

/***/ "./node_modules/@material/base/foundation.js":
/*!***************************************************!*\
  !*** ./node_modules/@material/base/foundation.js ***!
  \***************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @template A
 */
class MDCFoundation {
  /** @return enum{cssClasses} */
  static get cssClasses() {
    // Classes extending MDCFoundation should implement this method to return an object which exports every
    // CSS class the foundation class needs as a property. e.g. {ACTIVE: 'mdc-component--active'}
    return {};
  }

  /** @return enum{strings} */
  static get strings() {
    // Classes extending MDCFoundation should implement this method to return an object which exports all
    // semantic strings as constants. e.g. {ARIA_ROLE: 'tablist'}
    return {};
  }

  /** @return enum{numbers} */
  static get numbers() {
    // Classes extending MDCFoundation should implement this method to return an object which exports all
    // of its semantic numbers as constants. e.g. {ANIMATION_DELAY_MS: 350}
    return {};
  }

  /** @return {!Object} */
  static get defaultAdapter() {
    // Classes extending MDCFoundation may choose to implement this getter in order to provide a convenient
    // way of viewing the necessary methods of an adapter. In the future, this could also be used for adapter
    // validation.
    return {};
  }

  /**
   * @param {A=} adapter
   */
  constructor(adapter = {}) {
    /** @protected {!A} */
    this.adapter_ = adapter;
  }

  init() {
    // Subclasses should override this method to perform initialization routines (registering events, etc.)
  }

  destroy() {
    // Subclasses should override this method to perform de-initialization routines (de-registering events, etc.)
  }
}

/* harmony default export */ __webpack_exports__["default"] = (MDCFoundation);


/***/ }),

/***/ "./node_modules/@material/base/index.js":
/*!**********************************************!*\
  !*** ./node_modules/@material/base/index.js ***!
  \**********************************************/
/*! exports provided: MDCFoundation, MDCComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _foundation__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./foundation */ "./node_modules/@material/base/foundation.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MDCFoundation", function() { return _foundation__WEBPACK_IMPORTED_MODULE_0__["default"]; });

/* harmony import */ var _component__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./component */ "./node_modules/@material/base/component.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MDCComponent", function() { return _component__WEBPACK_IMPORTED_MODULE_1__["default"]; });

/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */







/***/ }),

/***/ "./node_modules/@material/menu/adapter.js":
/*!************************************************!*\
  !*** ./node_modules/@material/menu/adapter.js ***!
  \************************************************/
/*! exports provided: MDCMenuAdapter */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MDCMenuAdapter", function() { return MDCMenuAdapter; });
/**
 * @license
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* eslint no-unused-vars: [2, {"args": "none"}] */

/**
 * Adapter for MDC Menu. Provides an interface for managing
 * - classes
 * - dom
 * - focus
 * - position
 * - dimensions
 * - event handlers
 *
 * Additionally, provides type information for the adapter to the Closure
 * compiler.
 *
 * Implement this adapter for your framework of choice to delegate updates to
 * the component in your framework of choice. See architecture documentation
 * for more details.
 * https://github.com/material-components/material-components-web/blob/master/docs/code/architecture.md
 *
 * @record
 */
class MDCMenuAdapter {
  /** @param {string} className */
  addClass(className) {}

  /** @param {string} className */
  removeClass(className) {}

  /**
   * @param {string} className
   * @return {boolean}
   */
  hasClass(className) {}

  /** @return {boolean} */
  hasNecessaryDom() {}

  /**
   * @param {EventTarget} target
   * @param {string} attributeName
   * @return {string}
   */
  getAttributeForEventTarget(target, attributeName) {}

  /** @return {{ width: number, height: number }} */
  getInnerDimensions() {}

  /** @return {boolean} */
  hasAnchor() {}

  /** @return {{width: number, height: number, top: number, right: number, bottom: number, left: number}} */
  getAnchorDimensions() {}

  /** @return {{ width: number, height: number }} */
  getWindowDimensions() {}

  /** @return {number} */
  getNumberOfItems() {}

  /**
   * @param {string} type
   * @param {function(!Event)} handler
   */
  registerInteractionHandler(type, handler) {}

  /**
   * @param {string} type
   * @param {function(!Event)} handler
   */
  deregisterInteractionHandler(type, handler) {}

  /** @param {function(!Event)} handler */
  registerBodyClickHandler(handler) {}

  /** @param {function(!Event)} handler */
  deregisterBodyClickHandler(handler) {}

  /**
   * @param {EventTarget} target
   * @return {number}
   */
  getIndexForEventTarget(target) {}

  /** @param {{index: number}} evtData */
  notifySelected(evtData) {}

  notifyCancel() {}

  saveFocus() {}

  restoreFocus() {}

  /** @return {boolean} */
  isFocused() {}

  focus() {}

  /** @return {number} */
  getFocusedItemIndex() /* number */ {}

  /** @param {number} index */
  focusItemAtIndex(index) {}

  /** @return {boolean} */
  isRtl() {}

  /** @param {string} origin */
  setTransformOrigin(origin) {}

  /** @param {{
  *   top: (string|undefined),
  *   right: (string|undefined),
  *   bottom: (string|undefined),
  *   left: (string|undefined)
  * }} position */
  setPosition(position) {}

  /** @param {string} height */
  setMaxHeight(height) {}

  /**
   * @param {number} index
   * @param {string} attr
   * @param {string} value
   */
  setAttrForOptionAtIndex(index, attr, value) {}

  /**
   * @param {number} index
   * @param {string} attr
   */
  rmAttrForOptionAtIndex(index, attr) {}

  /**
   * @param {number} index
   * @param {string} className
   */
  addClassForOptionAtIndex(index, className) {}

  /**
   * @param {number} index
   * @param {string} className
   */
  rmClassForOptionAtIndex(index, className) {}
}




/***/ }),

/***/ "./node_modules/@material/menu/constants.js":
/*!**************************************************!*\
  !*** ./node_modules/@material/menu/constants.js ***!
  \**************************************************/
/*! exports provided: cssClasses, strings, numbers, CornerBit, Corner */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "cssClasses", function() { return cssClasses; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "strings", function() { return strings; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "numbers", function() { return numbers; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CornerBit", function() { return CornerBit; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Corner", function() { return Corner; });
/**
 * @license
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/** @enum {string} */
const cssClasses = {
  ROOT: 'mdc-menu',
  OPEN: 'mdc-menu--open',
  ANIMATING_OPEN: 'mdc-menu--animating-open',
  ANIMATING_CLOSED: 'mdc-menu--animating-closed',
  SELECTED_LIST_ITEM: 'mdc-list-item--selected',
};

/** @enum {string} */
const strings = {
  ITEMS_SELECTOR: '.mdc-menu__items',
  SELECTED_EVENT: 'MDCMenu:selected',
  CANCEL_EVENT: 'MDCMenu:cancel',
  ARIA_DISABLED_ATTR: 'aria-disabled',
};

/** @enum {number} */
const numbers = {
  // Amount of time to wait before triggering a selected event on the menu. Note that this time
  // will most likely be bumped up once interactive lists are supported to allow for the ripple to
  // animate before closing the menu
  SELECTED_TRIGGER_DELAY: 50,
  // Total duration of menu open animation.
  TRANSITION_OPEN_DURATION: 120,
  // Total duration of menu close animation.
  TRANSITION_CLOSE_DURATION: 75,
  // Margin left to the edge of the viewport when menu is at maximum possible height.
  MARGIN_TO_EDGE: 32,
  // Ratio of anchor width to menu width for switching from corner positioning to center positioning.
  ANCHOR_TO_MENU_WIDTH_RATIO: 0.67,
  // Ratio of vertical offset to menu height for switching from corner to mid-way origin positioning.
  OFFSET_TO_MENU_HEIGHT_RATIO: 0.1,
};

/**
 * Enum for bits in the {@see Corner) bitmap.
 * @enum {number}
 */
const CornerBit = {
  BOTTOM: 1,
  CENTER: 2,
  RIGHT: 4,
  FLIP_RTL: 8,
};

/**
 * Enum for representing an element corner for positioning the menu.
 *
 * The START constants map to LEFT if element directionality is left
 * to right and RIGHT if the directionality is right to left.
 * Likewise END maps to RIGHT or LEFT depending on the directionality.
 *
 * @enum {number}
 */
const Corner = {
  TOP_LEFT: 0,
  TOP_RIGHT: CornerBit.RIGHT,
  BOTTOM_LEFT: CornerBit.BOTTOM,
  BOTTOM_RIGHT: CornerBit.BOTTOM | CornerBit.RIGHT,
  TOP_START: CornerBit.FLIP_RTL,
  TOP_END: CornerBit.FLIP_RTL | CornerBit.RIGHT,
  BOTTOM_START: CornerBit.BOTTOM | CornerBit.FLIP_RTL,
  BOTTOM_END: CornerBit.BOTTOM | CornerBit.RIGHT | CornerBit.FLIP_RTL,
};





/***/ }),

/***/ "./node_modules/@material/menu/foundation.js":
/*!***************************************************!*\
  !*** ./node_modules/@material/menu/foundation.js ***!
  \***************************************************/
/*! exports provided: MDCMenuFoundation, AnchorMargin */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MDCMenuFoundation", function() { return MDCMenuFoundation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AnchorMargin", function() { return AnchorMargin; });
/* harmony import */ var _material_base_foundation__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @material/base/foundation */ "./node_modules/@material/base/foundation.js");
/* harmony import */ var _adapter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./adapter */ "./node_modules/@material/menu/adapter.js");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./constants */ "./node_modules/@material/menu/constants.js");
/**
 * @license
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @typedef {{
 *   top: number,
 *   right: number,
 *   bottom: number,
 *   left: number
 * }}
 */
let AnchorMargin;

/* eslint-disable no-unused-vars */
/**
 * @typedef {{
 *   viewport: { width: number, height: number },
 *   viewportDistance: {top: number, right: number, bottom: number, left: number},
 *   anchorHeight: number,
 *   anchorWidth: number,
 *   menuHeight: number,
 *   menuWidth: number,
 * }}
 */
let AutoLayoutMeasurements;
/* eslint-enable no-unused-vars */





/**
 * @extends {MDCFoundation<!MDCMenuAdapter>}
 */
class MDCMenuFoundation extends _material_base_foundation__WEBPACK_IMPORTED_MODULE_0__["default"] {
  /** @return enum{cssClasses} */
  static get cssClasses() {
    return _constants__WEBPACK_IMPORTED_MODULE_2__["cssClasses"];
  }

  /** @return enum{strings} */
  static get strings() {
    return _constants__WEBPACK_IMPORTED_MODULE_2__["strings"];
  }

  /** @return enum{numbers} */
  static get numbers() {
    return _constants__WEBPACK_IMPORTED_MODULE_2__["numbers"];
  }

  /** @return enum{number} */
  static get Corner() {
    return _constants__WEBPACK_IMPORTED_MODULE_2__["Corner"];
  }

  /**
   * {@see MDCMenuAdapter} for typing information on parameters and return
   * types.
   * @return {!MDCMenuAdapter}
   */
  static get defaultAdapter() {
    return /** @type {!MDCMenuAdapter} */ ({
      addClass: () => {},
      removeClass: () => {},
      hasClass: () => false,
      hasNecessaryDom: () => false,
      getAttributeForEventTarget: () => {},
      getInnerDimensions: () => ({}),
      hasAnchor: () => false,
      getAnchorDimensions: () => ({}),
      getWindowDimensions: () => ({}),
      getNumberOfItems: () => 0,
      registerInteractionHandler: () => {},
      deregisterInteractionHandler: () => {},
      registerBodyClickHandler: () => {},
      deregisterBodyClickHandler: () => {},
      getIndexForEventTarget: () => 0,
      notifySelected: () => {},
      notifyCancel: () => {},
      saveFocus: () => {},
      restoreFocus: () => {},
      isFocused: () => false,
      focus: () => {},
      getFocusedItemIndex: () => -1,
      focusItemAtIndex: () => {},
      isRtl: () => false,
      setTransformOrigin: () => {},
      setPosition: () => {},
      setMaxHeight: () => {},
      setAttrForOptionAtIndex: () => {},
      rmAttrForOptionAtIndex: () => {},
      addClassForOptionAtIndex: () => {},
      rmClassForOptionAtIndex: () => {},
    });
  }

  /** @param {!MDCMenuAdapter} adapter */
  constructor(adapter) {
    super(Object.assign(MDCMenuFoundation.defaultAdapter, adapter));

    /** @private {function(!Event)} */
    this.clickHandler_ = (evt) => this.handlePossibleSelected_(evt);
    /** @private {function(!Event)} */
    this.keydownHandler_ = (evt) => this.handleKeyboardDown_(evt);
    /** @private {function(!Event)} */
    this.keyupHandler_ = (evt) => this.handleKeyboardUp_(evt);
    /** @private {function(!Event)} */
    this.documentClickHandler_ = (evt) => this.handleDocumentClick_(evt);
    /** @private {boolean} */
    this.isOpen_ = false;
    /** @private {number} */
    this.openAnimationEndTimerId_ = 0;
    /** @private {number} */
    this.closeAnimationEndTimerId_ = 0;
    /** @private {number} */
    this.selectedTriggerTimerId_ = 0;
    /** @private {number} */
    this.animationRequestId_ = 0;
    /** @private {!{ width: number, height: number }} */
    this.dimensions_;
    /** @private {number} */
    this.itemHeight_;
    /** @private {Corner} */
    this.anchorCorner_ = _constants__WEBPACK_IMPORTED_MODULE_2__["Corner"].TOP_START;
    /** @private {AnchorMargin} */
    this.anchorMargin_ = {top: 0, right: 0, bottom: 0, left: 0};
    /** @private {?AutoLayoutMeasurements} */
    this.measures_ = null;
    /** @private {number} */
    this.selectedIndex_ = -1;
    /** @private {boolean} */
    this.rememberSelection_ = false;
    /** @private {boolean} */
    this.quickOpen_ = false;

    // A keyup event on the menu needs to have a corresponding keydown
    // event on the menu. If the user opens the menu with a keydown event on a
    // button, the menu will only get the key up event causing buggy behavior with selected elements.
    /** @private {boolean} */
    this.keyDownWithinMenu_ = false;
  }

  init() {
    const {ROOT, OPEN} = MDCMenuFoundation.cssClasses;

    if (!this.adapter_.hasClass(ROOT)) {
      throw new Error(`${ROOT} class required in root element.`);
    }

    if (!this.adapter_.hasNecessaryDom()) {
      throw new Error(`Required DOM nodes missing in ${ROOT} component.`);
    }

    if (this.adapter_.hasClass(OPEN)) {
      this.isOpen_ = true;
    }

    this.adapter_.registerInteractionHandler('click', this.clickHandler_);
    this.adapter_.registerInteractionHandler('keyup', this.keyupHandler_);
    this.adapter_.registerInteractionHandler('keydown', this.keydownHandler_);
  }

  destroy() {
    clearTimeout(this.selectedTriggerTimerId_);
    clearTimeout(this.openAnimationEndTimerId_);
    clearTimeout(this.closeAnimationEndTimerId_);
    // Cancel any currently running animations.
    cancelAnimationFrame(this.animationRequestId_);
    this.adapter_.deregisterInteractionHandler('click', this.clickHandler_);
    this.adapter_.deregisterInteractionHandler('keyup', this.keyupHandler_);
    this.adapter_.deregisterInteractionHandler('keydown', this.keydownHandler_);
    this.adapter_.deregisterBodyClickHandler(this.documentClickHandler_);
  }

  /**
   * @param {!Corner} corner Default anchor corner alignment of top-left menu corner.
   */
  setAnchorCorner(corner) {
    this.anchorCorner_ = corner;
  }

  /**
   * @param {!AnchorMargin} margin 4-plet of margins from anchor.
   */
  setAnchorMargin(margin) {
    this.anchorMargin_.top = typeof margin.top === 'number' ? margin.top : 0;
    this.anchorMargin_.right = typeof margin.right === 'number' ? margin.right : 0;
    this.anchorMargin_.bottom = typeof margin.bottom === 'number' ? margin.bottom : 0;
    this.anchorMargin_.left = typeof margin.left === 'number' ? margin.left : 0;
  }

  /** @param {boolean} rememberSelection */
  setRememberSelection(rememberSelection) {
    this.rememberSelection_ = rememberSelection;
    this.setSelectedIndex(-1);
  }

  /** @param {boolean} quickOpen */
  setQuickOpen(quickOpen) {
    this.quickOpen_ = quickOpen;
  }

  /**
   * @param {?number} focusIndex
   * @private
   */
  focusOnOpen_(focusIndex) {
    if (focusIndex === null) {
      // If this instance of MDCMenu remembers selections, and the user has
      // made a selection, then focus the last selected item
      if (this.rememberSelection_ && this.selectedIndex_ >= 0) {
        this.adapter_.focusItemAtIndex(this.selectedIndex_);
        return;
      }

      this.adapter_.focus();
      // If that doesn't work, focus first item instead.
      if (!this.adapter_.isFocused()) {
        this.adapter_.focusItemAtIndex(0);
      }
    } else {
      this.adapter_.focusItemAtIndex(focusIndex);
    }
  }

  /**
   * Handle clicks and cancel the menu if not a child list-item
   * @param {!Event} evt
   * @private
   */
  handleDocumentClick_(evt) {
    let el = evt.target;

    while (el && el !== document.documentElement) {
      if (this.adapter_.getIndexForEventTarget(el) !== -1) {
        return;
      }
      el = el.parentNode;
    }

    this.adapter_.notifyCancel();
    this.close(evt);
  };

  /**
   * Handle keys that we want to repeat on hold (tab and arrows).
   * @param {!Event} evt
   * @return {boolean}
   * @private
   */
  handleKeyboardDown_(evt) {
    // Do nothing if Alt, Ctrl or Meta are pressed.
    if (evt.altKey || evt.ctrlKey || evt.metaKey) {
      return true;
    }

    const {keyCode, key, shiftKey} = evt;
    const isTab = key === 'Tab' || keyCode === 9;
    const isArrowUp = key === 'ArrowUp' || keyCode === 38;
    const isArrowDown = key === 'ArrowDown' || keyCode === 40;
    const isSpace = key === 'Space' || keyCode === 32;
    const isEnter = key === 'Enter' || keyCode === 13;
    // The menu needs to know if the keydown event was triggered on the menu
    this.keyDownWithinMenu_ = isEnter || isSpace;

    const focusedItemIndex = this.adapter_.getFocusedItemIndex();
    const lastItemIndex = this.adapter_.getNumberOfItems() - 1;

    if (shiftKey && isTab && focusedItemIndex === 0) {
      this.adapter_.focusItemAtIndex(lastItemIndex);
      evt.preventDefault();
      return false;
    }

    if (!shiftKey && isTab && focusedItemIndex === lastItemIndex) {
      this.adapter_.focusItemAtIndex(0);
      evt.preventDefault();
      return false;
    }

    // Ensure Arrow{Up,Down} and space do not cause inadvertent scrolling
    if (isArrowUp || isArrowDown || isSpace) {
      evt.preventDefault();
    }

    if (isArrowUp) {
      if (focusedItemIndex === 0 || this.adapter_.isFocused()) {
        this.adapter_.focusItemAtIndex(lastItemIndex);
      } else {
        this.adapter_.focusItemAtIndex(focusedItemIndex - 1);
      }
    } else if (isArrowDown) {
      if (focusedItemIndex === lastItemIndex || this.adapter_.isFocused()) {
        this.adapter_.focusItemAtIndex(0);
      } else {
        this.adapter_.focusItemAtIndex(focusedItemIndex + 1);
      }
    }

    return true;
  }

  /**
   * Handle keys that we don't want to repeat on hold (Enter, Space, Escape).
   * @param {!Event} evt
   * @return {boolean}
   * @private
   */
  handleKeyboardUp_(evt) {
    // Do nothing if Alt, Ctrl or Meta are pressed.
    if (evt.altKey || evt.ctrlKey || evt.metaKey) {
      return true;
    }

    const {keyCode, key} = evt;
    const isEnter = key === 'Enter' || keyCode === 13;
    const isSpace = key === 'Space' || keyCode === 32;
    const isEscape = key === 'Escape' || keyCode === 27;

    if (isEnter || isSpace) {
      // If the keydown event didn't occur on the menu, then it should
      // disregard the possible selected event.
      if (this.keyDownWithinMenu_) {
        this.handlePossibleSelected_(evt);
      }
      this.keyDownWithinMenu_ = false;
    }

    if (isEscape) {
      this.adapter_.notifyCancel();
      this.close();
    }

    return true;
  }

  /**
   * @param {!Event} evt
   * @private
   */
  handlePossibleSelected_(evt) {
    if (this.adapter_.getAttributeForEventTarget(evt.target, _constants__WEBPACK_IMPORTED_MODULE_2__["strings"].ARIA_DISABLED_ATTR) === 'true') {
      return;
    }
    const targetIndex = this.adapter_.getIndexForEventTarget(evt.target);
    if (targetIndex < 0) {
      return;
    }
    // Debounce multiple selections
    if (this.selectedTriggerTimerId_) {
      return;
    }
    this.selectedTriggerTimerId_ = setTimeout(() => {
      this.selectedTriggerTimerId_ = 0;
      this.close();
      if (this.rememberSelection_) {
        this.setSelectedIndex(targetIndex);
      }
      this.adapter_.notifySelected({index: targetIndex});
    }, _constants__WEBPACK_IMPORTED_MODULE_2__["numbers"].SELECTED_TRIGGER_DELAY);
  }

  /**
   * @return {AutoLayoutMeasurements} Measurements used to position menu popup.
   */
  getAutoLayoutMeasurements_() {
    const anchorRect = this.adapter_.getAnchorDimensions();
    const viewport = this.adapter_.getWindowDimensions();

    return {
      viewport: viewport,
      viewportDistance: {
        top: anchorRect.top,
        right: viewport.width - anchorRect.right,
        left: anchorRect.left,
        bottom: viewport.height - anchorRect.bottom,
      },
      anchorHeight: anchorRect.height,
      anchorWidth: anchorRect.width,
      menuHeight: this.dimensions_.height,
      menuWidth: this.dimensions_.width,
    };
  }

  /**
   * Computes the corner of the anchor from which to animate and position the menu.
   * @return {Corner}
   * @private
   */
  getOriginCorner_() {
    // Defaults: open from the top left.
    let corner = _constants__WEBPACK_IMPORTED_MODULE_2__["Corner"].TOP_LEFT;

    const {viewportDistance, anchorHeight, anchorWidth, menuHeight, menuWidth} = this.measures_;
    const isBottomAligned = Boolean(this.anchorCorner_ & _constants__WEBPACK_IMPORTED_MODULE_2__["CornerBit"].BOTTOM);
    const availableTop = isBottomAligned ? viewportDistance.top + anchorHeight + this.anchorMargin_.bottom
      : viewportDistance.top + this.anchorMargin_.top;
    const availableBottom = isBottomAligned ? viewportDistance.bottom - this.anchorMargin_.bottom
      : viewportDistance.bottom + anchorHeight - this.anchorMargin_.top;

    const topOverflow = menuHeight - availableTop;
    const bottomOverflow = menuHeight - availableBottom;
    if (bottomOverflow > 0 && topOverflow < bottomOverflow) {
      corner |= _constants__WEBPACK_IMPORTED_MODULE_2__["CornerBit"].BOTTOM;
    }

    const isRtl = this.adapter_.isRtl();
    const isFlipRtl = Boolean(this.anchorCorner_ & _constants__WEBPACK_IMPORTED_MODULE_2__["CornerBit"].FLIP_RTL);
    const avoidHorizontalOverlap = Boolean(this.anchorCorner_ & _constants__WEBPACK_IMPORTED_MODULE_2__["CornerBit"].RIGHT);
    const isAlignedRight = (avoidHorizontalOverlap && !isRtl) ||
      (!avoidHorizontalOverlap && isFlipRtl && isRtl);
    const availableLeft = isAlignedRight ? viewportDistance.left + anchorWidth + this.anchorMargin_.right :
      viewportDistance.left + this.anchorMargin_.left;
    const availableRight = isAlignedRight ? viewportDistance.right - this.anchorMargin_.right :
      viewportDistance.right + anchorWidth - this.anchorMargin_.left;

    const leftOverflow = menuWidth - availableLeft;
    const rightOverflow = menuWidth - availableRight;

    if ((leftOverflow < 0 && isAlignedRight && isRtl) ||
        (avoidHorizontalOverlap && !isAlignedRight && leftOverflow < 0) ||
        (rightOverflow > 0 && leftOverflow < rightOverflow)) {
      corner |= _constants__WEBPACK_IMPORTED_MODULE_2__["CornerBit"].RIGHT;
    }

    return corner;
  }

  /**
   * @param {Corner} corner Origin corner of the menu.
   * @return {number} Horizontal offset of menu origin corner from corresponding anchor corner.
   * @private
   */
  getHorizontalOriginOffset_(corner) {
    const {anchorWidth} = this.measures_;
    const isRightAligned = Boolean(corner & _constants__WEBPACK_IMPORTED_MODULE_2__["CornerBit"].RIGHT);
    const avoidHorizontalOverlap = Boolean(this.anchorCorner_ & _constants__WEBPACK_IMPORTED_MODULE_2__["CornerBit"].RIGHT);
    let x = 0;
    if (isRightAligned) {
      const rightOffset = avoidHorizontalOverlap ? anchorWidth - this.anchorMargin_.left : this.anchorMargin_.right;
      x = rightOffset;
    } else {
      const leftOffset = avoidHorizontalOverlap ? anchorWidth - this.anchorMargin_.right : this.anchorMargin_.left;
      x = leftOffset;
    }
    return x;
  }

  /**
   * @param {Corner} corner Origin corner of the menu.
   * @return {number} Vertical offset of menu origin corner from corresponding anchor corner.
   * @private
   */
  getVerticalOriginOffset_(corner) {
    const {viewport, viewportDistance, anchorHeight, menuHeight} = this.measures_;
    const isBottomAligned = Boolean(corner & _constants__WEBPACK_IMPORTED_MODULE_2__["CornerBit"].BOTTOM);
    const {MARGIN_TO_EDGE} = MDCMenuFoundation.numbers;
    const avoidVerticalOverlap = Boolean(this.anchorCorner_ & _constants__WEBPACK_IMPORTED_MODULE_2__["CornerBit"].BOTTOM);
    const canOverlapVertically = !avoidVerticalOverlap;
    let y = 0;

    if (isBottomAligned) {
      y = avoidVerticalOverlap ? anchorHeight - this.anchorMargin_.top : -this.anchorMargin_.bottom;
      // adjust for when menu can overlap anchor, but too tall to be aligned to bottom
      // anchor corner. Bottom margin is ignored in such cases.
      if (canOverlapVertically && menuHeight > viewportDistance.top + anchorHeight) {
        y = -(Math.min(menuHeight, viewport.height - MARGIN_TO_EDGE) - (viewportDistance.top + anchorHeight));
      }
    } else {
      y = avoidVerticalOverlap ? (anchorHeight + this.anchorMargin_.bottom) : this.anchorMargin_.top;
      // adjust for when menu can overlap anchor, but too tall to be aligned to top
      // anchor corners. Top margin is ignored in that case.
      if (canOverlapVertically && menuHeight > viewportDistance.bottom + anchorHeight) {
        y = -(Math.min(menuHeight, viewport.height - MARGIN_TO_EDGE) - (viewportDistance.bottom + anchorHeight));
      }
    }
    return y;
  }

  /**
   * @param {Corner} corner Origin corner of the menu.
   * @return {number} Maximum height of the menu, based on available space. 0 indicates should not be set.
   * @private
   */
  getMenuMaxHeight_(corner) {
    let maxHeight = 0;
    const {viewportDistance} = this.measures_;
    const isBottomAligned = Boolean(corner & _constants__WEBPACK_IMPORTED_MODULE_2__["CornerBit"].BOTTOM);

    // When maximum height is not specified, it is handled from css.
    if (this.anchorCorner_ & _constants__WEBPACK_IMPORTED_MODULE_2__["CornerBit"].BOTTOM) {
      if (isBottomAligned) {
        maxHeight = viewportDistance.top + this.anchorMargin_.top;
      } else {
        maxHeight = viewportDistance.bottom - this.anchorMargin_.bottom;
      }
    }

    return maxHeight;
  }

  /** @private */
  autoPosition_() {
    if (!this.adapter_.hasAnchor()) {
      return;
    }

    // Compute measurements for autoposition methods reuse.
    this.measures_ = this.getAutoLayoutMeasurements_();

    const corner = this.getOriginCorner_();
    const maxMenuHeight = this.getMenuMaxHeight_(corner);
    let verticalAlignment = (corner & _constants__WEBPACK_IMPORTED_MODULE_2__["CornerBit"].BOTTOM) ? 'bottom' : 'top';
    let horizontalAlignment = (corner & _constants__WEBPACK_IMPORTED_MODULE_2__["CornerBit"].RIGHT) ? 'right' : 'left';
    const horizontalOffset = this.getHorizontalOriginOffset_(corner);
    const verticalOffset = this.getVerticalOriginOffset_(corner);
    const position = {
      [horizontalAlignment]: horizontalOffset ? horizontalOffset + 'px' : '0',
      [verticalAlignment]: verticalOffset ? verticalOffset + 'px' : '0',
    };
    const {anchorWidth, menuHeight, menuWidth} = this.measures_;
    // Center align when anchor width is comparable or greater than menu, otherwise keep corner.
    if (anchorWidth / menuWidth > _constants__WEBPACK_IMPORTED_MODULE_2__["numbers"].ANCHOR_TO_MENU_WIDTH_RATIO) {
      horizontalAlignment = 'center';
    }

    // Adjust vertical origin when menu is positioned with significant offset from anchor. This is done so that
    // scale animation is "anchored" on the anchor.
    if (!(this.anchorCorner_ & _constants__WEBPACK_IMPORTED_MODULE_2__["CornerBit"].BOTTOM) &&
        Math.abs(verticalOffset / menuHeight) > _constants__WEBPACK_IMPORTED_MODULE_2__["numbers"].OFFSET_TO_MENU_HEIGHT_RATIO) {
      const verticalOffsetPercent = Math.abs(verticalOffset / menuHeight) * 100;
      const originPercent = (corner & _constants__WEBPACK_IMPORTED_MODULE_2__["CornerBit"].BOTTOM) ? 100 - verticalOffsetPercent : verticalOffsetPercent;
      verticalAlignment = Math.round(originPercent * 100) / 100 + '%';
    }

    this.adapter_.setTransformOrigin(`${horizontalAlignment} ${verticalAlignment}`);
    this.adapter_.setPosition(position);
    this.adapter_.setMaxHeight(maxMenuHeight ? maxMenuHeight + 'px' : '');

    // Clear measures after positioning is complete.
    this.measures_ = null;
  }

  /**
   * Open the menu.
   * @param {{focusIndex: ?number}=} options
   */
  open({focusIndex = null} = {}) {
    this.adapter_.saveFocus();

    if (!this.quickOpen_) {
      this.adapter_.addClass(MDCMenuFoundation.cssClasses.ANIMATING_OPEN);
    }

    this.animationRequestId_ = requestAnimationFrame(() => {
      this.dimensions_ = this.adapter_.getInnerDimensions();
      this.autoPosition_();
      this.adapter_.addClass(MDCMenuFoundation.cssClasses.OPEN);
      this.focusOnOpen_(focusIndex);
      this.adapter_.registerBodyClickHandler(this.documentClickHandler_);
      if (!this.quickOpen_) {
        this.openAnimationEndTimerId_ = setTimeout(() => {
          this.openAnimationEndTimerId_ = 0;
          this.adapter_.removeClass(MDCMenuFoundation.cssClasses.ANIMATING_OPEN);
        }, _constants__WEBPACK_IMPORTED_MODULE_2__["numbers"].TRANSITION_OPEN_DURATION);
      }
    });
    this.isOpen_ = true;
  }

  /**
   * Closes the menu.
   * @param {Event=} evt
   */
  close(evt = null) {
    const targetIsDisabled = evt ?
      this.adapter_.getAttributeForEventTarget(evt.target, _constants__WEBPACK_IMPORTED_MODULE_2__["strings"].ARIA_DISABLED_ATTR) === 'true' :
      false;

    if (targetIsDisabled) {
      return;
    }

    this.adapter_.deregisterBodyClickHandler(this.documentClickHandler_);

    if (!this.quickOpen_) {
      this.adapter_.addClass(MDCMenuFoundation.cssClasses.ANIMATING_CLOSED);
    }

    requestAnimationFrame(() => {
      this.adapter_.removeClass(MDCMenuFoundation.cssClasses.OPEN);
      if (!this.quickOpen_) {
        this.closeAnimationEndTimerId_ = setTimeout(() => {
          this.closeAnimationEndTimerId_ = 0;
          this.adapter_.removeClass(MDCMenuFoundation.cssClasses.ANIMATING_CLOSED);
        }, _constants__WEBPACK_IMPORTED_MODULE_2__["numbers"].TRANSITION_CLOSE_DURATION);
      }
    });
    this.isOpen_ = false;
    this.adapter_.restoreFocus();
  }

  /** @return {boolean} */
  isOpen() {
    return this.isOpen_;
  }

  /** @return {number} */
  getSelectedIndex() {
    return this.selectedIndex_;
  }

  /**
   * @param {number} index Index of the item to set as selected.
   */
  setSelectedIndex(index) {
    if (index === this.selectedIndex_) {
      return;
    }

    const prevSelectedIndex = this.selectedIndex_;
    if (prevSelectedIndex >= 0) {
      this.adapter_.rmAttrForOptionAtIndex(prevSelectedIndex, 'aria-selected');
      this.adapter_.rmClassForOptionAtIndex(prevSelectedIndex, _constants__WEBPACK_IMPORTED_MODULE_2__["cssClasses"].SELECTED_LIST_ITEM);
    }

    this.selectedIndex_ = index >= 0 && index < this.adapter_.getNumberOfItems() ? index : -1;
    if (this.selectedIndex_ >= 0) {
      this.adapter_.setAttrForOptionAtIndex(this.selectedIndex_, 'aria-selected', 'true');
      this.adapter_.addClassForOptionAtIndex(this.selectedIndex_, _constants__WEBPACK_IMPORTED_MODULE_2__["cssClasses"].SELECTED_LIST_ITEM);
    }
  }
}




/***/ }),

/***/ "./node_modules/@material/menu/index.js":
/*!**********************************************!*\
  !*** ./node_modules/@material/menu/index.js ***!
  \**********************************************/
/*! exports provided: MDCMenuFoundation, MDCMenu, AnchorMargin, Corner, CornerBit */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MDCMenu", function() { return MDCMenu; });
/* harmony import */ var _material_base_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @material/base/component */ "./node_modules/@material/base/component.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util */ "./node_modules/@material/menu/util.js");
/* harmony import */ var _foundation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./foundation */ "./node_modules/@material/menu/foundation.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MDCMenuFoundation", function() { return _foundation__WEBPACK_IMPORTED_MODULE_2__["MDCMenuFoundation"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AnchorMargin", function() { return _foundation__WEBPACK_IMPORTED_MODULE_2__["AnchorMargin"]; });

/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./constants */ "./node_modules/@material/menu/constants.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Corner", function() { return _constants__WEBPACK_IMPORTED_MODULE_3__["Corner"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "CornerBit", function() { return _constants__WEBPACK_IMPORTED_MODULE_3__["CornerBit"]; });

/**
 * @license
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */






/**
 * @extends MDCComponent<!MDCMenuFoundation>
 */
class MDCMenu extends _material_base_component__WEBPACK_IMPORTED_MODULE_0__["default"] {
  /** @param {...?} args */
  constructor(...args) {
    super(...args);
    /** @private {!Element} */
    this.previousFocus_;
  }

  /**
   * @param {!Element} root
   * @return {!MDCMenu}
   */
  static attachTo(root) {
    return new MDCMenu(root);
  }

  /** @return {boolean} */
  get open() {
    return this.foundation_.isOpen();
  }

  /** @param {boolean} value */
  set open(value) {
    if (value) {
      this.foundation_.open();
    } else {
      this.foundation_.close();
    }
  }

  /** @param {{focusIndex: ?number}=} options */
  show({focusIndex = null} = {}) {
    this.foundation_.open({focusIndex: focusIndex});
  }

  hide() {
    this.foundation_.close();
  }

  /**
   * @param {Corner} corner Default anchor corner alignment of top-left
   *     menu corner.
   */
  setAnchorCorner(corner) {
    this.foundation_.setAnchorCorner(corner);
  }

  /**
   * @param {AnchorMargin} margin
   */
  setAnchorMargin(margin) {
    this.foundation_.setAnchorMargin(margin);
  }

  /**
   * Return the item container element inside the component.
   * @return {?Element}
   */
  get itemsContainer_() {
    return this.root_.querySelector(_foundation__WEBPACK_IMPORTED_MODULE_2__["MDCMenuFoundation"].strings.ITEMS_SELECTOR);
  }

  /**
   * Return the items within the menu. Note that this only contains the set of elements within
   * the items container that are proper list items, and not supplemental / presentational DOM
   * elements.
   * @return {!Array<!Element>}
   */
  get items() {
    const {itemsContainer_: itemsContainer} = this;
    return [].slice.call(itemsContainer.querySelectorAll('.mdc-list-item[role]'));
  }

  /**
   * Return the item within the menu that is selected.
   * @param {number} index
   * @return {?Element}
   */
  getOptionByIndex(index) {
    const items = this.items;

    if (index < items.length) {
      return this.items[index];
    } else {
      return null;
    }
  }

  /** @param {number} index */
  set selectedItemIndex(index) {
    this.foundation_.setSelectedIndex(index);
  }

  /** @return {number} */
  get selectedItemIndex() {
    return this.foundation_.getSelectedIndex();
  }

  /** @param {!boolean} rememberSelection */
  set rememberSelection(rememberSelection) {
    this.foundation_.setRememberSelection(rememberSelection);
  }

  /** @param {boolean} quickOpen */
  set quickOpen(quickOpen) {
    this.foundation_.setQuickOpen(quickOpen);
  }

  /** @return {!MDCMenuFoundation} */
  getDefaultFoundation() {
    return new _foundation__WEBPACK_IMPORTED_MODULE_2__["MDCMenuFoundation"]({
      addClass: (className) => this.root_.classList.add(className),
      removeClass: (className) => this.root_.classList.remove(className),
      hasClass: (className) => this.root_.classList.contains(className),
      hasNecessaryDom: () => Boolean(this.itemsContainer_),
      getAttributeForEventTarget: (target, attributeName) => target.getAttribute(attributeName),
      getInnerDimensions: () => {
        const {itemsContainer_: itemsContainer} = this;
        return {width: itemsContainer.offsetWidth, height: itemsContainer.offsetHeight};
      },
      hasAnchor: () => this.root_.parentElement && this.root_.parentElement.classList.contains('mdc-menu-anchor'),
      getAnchorDimensions: () => this.root_.parentElement.getBoundingClientRect(),
      getWindowDimensions: () => {
        return {width: window.innerWidth, height: window.innerHeight};
      },
      getNumberOfItems: () => this.items.length,
      registerInteractionHandler: (type, handler) => this.root_.addEventListener(type, handler),
      deregisterInteractionHandler: (type, handler) => this.root_.removeEventListener(type, handler),
      registerBodyClickHandler: (handler) => document.body.addEventListener('click', handler),
      deregisterBodyClickHandler: (handler) => document.body.removeEventListener('click', handler),
      getIndexForEventTarget: (target) => this.items.indexOf(target),
      notifySelected: (evtData) => this.emit(_foundation__WEBPACK_IMPORTED_MODULE_2__["MDCMenuFoundation"].strings.SELECTED_EVENT, {
        index: evtData.index,
        item: this.items[evtData.index],
      }),
      notifyCancel: () => this.emit(_foundation__WEBPACK_IMPORTED_MODULE_2__["MDCMenuFoundation"].strings.CANCEL_EVENT, {}),
      saveFocus: () => {
        this.previousFocus_ = document.activeElement;
      },
      restoreFocus: () => {
        if (this.previousFocus_ && this.previousFocus_.focus) {
          this.previousFocus_.focus();
        }
      },
      isFocused: () => document.activeElement === this.root_,
      focus: () => this.root_.focus(),
      getFocusedItemIndex: () => this.items.indexOf(document.activeElement),
      focusItemAtIndex: (index) => this.items[index].focus(),
      isRtl: () => getComputedStyle(this.root_).getPropertyValue('direction') === 'rtl',
      setTransformOrigin: (origin) => {
        this.root_.style[`${Object(_util__WEBPACK_IMPORTED_MODULE_1__["getTransformPropertyName"])(window)}-origin`] = origin;
      },
      setPosition: (position) => {
        this.root_.style.left = 'left' in position ? position.left : null;
        this.root_.style.right = 'right' in position ? position.right : null;
        this.root_.style.top = 'top' in position ? position.top : null;
        this.root_.style.bottom = 'bottom' in position ? position.bottom : null;
      },
      setMaxHeight: (height) => {
        this.root_.style.maxHeight = height;
      },
      setAttrForOptionAtIndex: (index, attr, value) => this.items[index].setAttribute(attr, value),
      rmAttrForOptionAtIndex: (index, attr) => this.items[index].removeAttribute(attr),
      addClassForOptionAtIndex: (index, className) => this.items[index].classList.add(className),
      rmClassForOptionAtIndex: (index, className) => this.items[index].classList.remove(className),
    });
  }
}




/***/ }),

/***/ "./node_modules/@material/menu/util.js":
/*!*********************************************!*\
  !*** ./node_modules/@material/menu/util.js ***!
  \*********************************************/
/*! exports provided: getTransformPropertyName, clamp, bezierProgress */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getTransformPropertyName", function() { return getTransformPropertyName; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "clamp", function() { return clamp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "bezierProgress", function() { return bezierProgress; });
/**
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/** @type {string|undefined} */
let storedTransformPropertyName_;

/**
 * Returns the name of the correct transform property to use on the current browser.
 * @param {!Window} globalObj
 * @param {boolean=} forceRefresh
 * @return {string}
 */
function getTransformPropertyName(globalObj, forceRefresh = false) {
  if (storedTransformPropertyName_ === undefined || forceRefresh) {
    const el = globalObj.document.createElement('div');
    const transformPropertyName = ('transform' in el.style ? 'transform' : 'webkitTransform');
    storedTransformPropertyName_ = transformPropertyName;
  }

  return storedTransformPropertyName_;
}

/**
 * Clamps a value between the minimum and the maximum, returning the clamped value.
 * @param {number} value
 * @param {number} min
 * @param {number} max
 * @return {number}
 */
function clamp(value, min = 0, max = 1) {
  return Math.min(max, Math.max(min, value));
}


/**
 * Returns the easing value to apply at time t, for a given cubic bezier curve.
 * Control points P0 and P3 are assumed to be (0,0) and (1,1), respectively.
 * Parameters are as follows:
 * - time: The current time in the animation, scaled between 0 and 1.
 * - x1: The x value of control point P1.
 * - y1: The y value of control point P1.
 * - x2: The x value of control point P2.
 * - y2: The y value of control point P2.
 * @param {number} time
 * @param {number} x1
 * @param {number} y1
 * @param {number} x2
 * @param {number} y2
 * @return {number}
 */
function bezierProgress(time, x1, y1, x2, y2) {
  return getBezierCoordinate_(solvePositionFromXValue_(time, x1, x2), y1, y2);
}

/**
 * Compute a single coordinate at a position point between 0 and 1.
 * c1 and c2 are the matching coordinate on control points P1 and P2, respectively.
 * Control points P0 and P3 are assumed to be (0,0) and (1,1), respectively.
 * Adapted from https://github.com/google/closure-library/blob/master/closure/goog/math/bezier.js.
 * @param {number} t
 * @param {number} c1
 * @param {number} c2
 * @return {number}
 */
function getBezierCoordinate_(t, c1, c2) {
  // Special case start and end.
  if (t === 0 || t === 1) {
    return t;
  }

  // Step one - from 4 points to 3
  let ic0 = t * c1;
  let ic1 = c1 + t * (c2 - c1);
  const ic2 = c2 + t * (1 - c2);

  // Step two - from 3 points to 2
  ic0 += t * (ic1 - ic0);
  ic1 += t * (ic2 - ic1);

  // Final step - last point
  return ic0 + t * (ic1 - ic0);
}

/**
 * Project a point onto the Bezier curve, from a given X. Calculates the position t along the curve.
 * Adapted from https://github.com/google/closure-library/blob/master/closure/goog/math/bezier.js.
 * @param {number} xVal
 * @param {number} x1
 * @param {number} x2
 * @return {number}
 */
function solvePositionFromXValue_(xVal, x1, x2) {
  const EPSILON = 1e-6;
  const MAX_ITERATIONS = 8;

  if (xVal <= 0) {
    return 0;
  } else if (xVal >= 1) {
    return 1;
  }

  // Initial estimate of t using linear interpolation.
  let t = xVal;

  // Try gradient descent to solve for t. If it works, it is very fast.
  let tMin = 0;
  let tMax = 1;
  let value = 0;
  for (let i = 0; i < MAX_ITERATIONS; i++) {
    value = getBezierCoordinate_(t, x1, x2);
    const derivative = (getBezierCoordinate_(t + EPSILON, x1, x2) - value) / EPSILON;
    if (Math.abs(value - xVal) < EPSILON) {
      return t;
    } else if (Math.abs(derivative) < EPSILON) {
      break;
    } else {
      if (value < xVal) {
        tMin = t;
      } else {
        tMax = t;
      }
      t -= (value - xVal) / derivative;
    }
  }

  // If the gradient descent got stuck in a local minimum, e.g. because
  // the derivative was close to 0, use a Dichotomy refinement instead.
  // We limit the number of interations to 8.
  for (let i = 0; Math.abs(value - xVal) > EPSILON && i < MAX_ITERATIONS; i++) {
    if (value < xVal) {
      tMin = t;
      t = (t + tMax) / 2;
    } else {
      tMax = t;
      t = (t + tMin) / 2;
    }
    value = getBezierCoordinate_(t, x1, x2);
  }
  return t;
}




/***/ }),

/***/ "./node_modules/@material/ripple/adapter.js":
/*!**************************************************!*\
  !*** ./node_modules/@material/ripple/adapter.js ***!
  \**************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/**
 * @license
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* eslint no-unused-vars: [2, {"args": "none"}] */

/**
 * Adapter for MDC Ripple. Provides an interface for managing
 * - classes
 * - dom
 * - CSS variables
 * - position
 * - dimensions
 * - scroll position
 * - event handlers
 * - unbounded, active and disabled states
 *
 * Additionally, provides type information for the adapter to the Closure
 * compiler.
 *
 * Implement this adapter for your framework of choice to delegate updates to
 * the component in your framework of choice. See architecture documentation
 * for more details.
 * https://github.com/material-components/material-components-web/blob/master/docs/code/architecture.md
 *
 * @record
 */
class MDCRippleAdapter {
  /** @return {boolean} */
  browserSupportsCssVars() {}

  /** @return {boolean} */
  isUnbounded() {}

  /** @return {boolean} */
  isSurfaceActive() {}

  /** @return {boolean} */
  isSurfaceDisabled() {}

  /** @param {string} className */
  addClass(className) {}

  /** @param {string} className */
  removeClass(className) {}

  /** @param {!EventTarget} target */
  containsEventTarget(target) {}

  /**
   * @param {string} evtType
   * @param {!Function} handler
   */
  registerInteractionHandler(evtType, handler) {}

  /**
   * @param {string} evtType
   * @param {!Function} handler
   */
  deregisterInteractionHandler(evtType, handler) {}

  /**
   * @param {string} evtType
   * @param {!Function} handler
   */
  registerDocumentInteractionHandler(evtType, handler) {}

  /**
   * @param {string} evtType
   * @param {!Function} handler
   */
  deregisterDocumentInteractionHandler(evtType, handler) {}

  /**
   * @param {!Function} handler
   */
  registerResizeHandler(handler) {}

  /**
   * @param {!Function} handler
   */
  deregisterResizeHandler(handler) {}

  /**
   * @param {string} varName
   * @param {?number|string} value
   */
  updateCssVariable(varName, value) {}

  /** @return {!ClientRect} */
  computeBoundingRect() {}

  /** @return {{x: number, y: number}} */
  getWindowPageOffset() {}
}

/* harmony default export */ __webpack_exports__["default"] = (MDCRippleAdapter);


/***/ }),

/***/ "./node_modules/@material/ripple/constants.js":
/*!****************************************************!*\
  !*** ./node_modules/@material/ripple/constants.js ***!
  \****************************************************/
/*! exports provided: cssClasses, strings, numbers */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "cssClasses", function() { return cssClasses; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "strings", function() { return strings; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "numbers", function() { return numbers; });
/**
 * @license
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

const cssClasses = {
  // Ripple is a special case where the "root" component is really a "mixin" of sorts,
  // given that it's an 'upgrade' to an existing component. That being said it is the root
  // CSS class that all other CSS classes derive from.
  ROOT: 'mdc-ripple-upgraded',
  UNBOUNDED: 'mdc-ripple-upgraded--unbounded',
  BG_FOCUSED: 'mdc-ripple-upgraded--background-focused',
  FG_ACTIVATION: 'mdc-ripple-upgraded--foreground-activation',
  FG_DEACTIVATION: 'mdc-ripple-upgraded--foreground-deactivation',
};

const strings = {
  VAR_LEFT: '--mdc-ripple-left',
  VAR_TOP: '--mdc-ripple-top',
  VAR_FG_SIZE: '--mdc-ripple-fg-size',
  VAR_FG_SCALE: '--mdc-ripple-fg-scale',
  VAR_FG_TRANSLATE_START: '--mdc-ripple-fg-translate-start',
  VAR_FG_TRANSLATE_END: '--mdc-ripple-fg-translate-end',
};

const numbers = {
  PADDING: 10,
  INITIAL_ORIGIN_SCALE: 0.6,
  DEACTIVATION_TIMEOUT_MS: 225, // Corresponds to $mdc-ripple-translate-duration (i.e. activation animation duration)
  FG_DEACTIVATION_MS: 150, // Corresponds to $mdc-ripple-fade-out-duration (i.e. deactivation animation duration)
  TAP_DELAY_MS: 300, // Delay between touch and simulated mouse events on touch devices
};




/***/ }),

/***/ "./node_modules/@material/ripple/foundation.js":
/*!*****************************************************!*\
  !*** ./node_modules/@material/ripple/foundation.js ***!
  \*****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _material_base_foundation__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @material/base/foundation */ "./node_modules/@material/base/foundation.js");
/* harmony import */ var _adapter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./adapter */ "./node_modules/@material/ripple/adapter.js");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./constants */ "./node_modules/@material/ripple/constants.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./util */ "./node_modules/@material/ripple/util.js");
/**
 * @license
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */






/**
 * @typedef {{
 *   isActivated: (boolean|undefined),
 *   hasDeactivationUXRun: (boolean|undefined),
 *   wasActivatedByPointer: (boolean|undefined),
 *   wasElementMadeActive: (boolean|undefined),
 *   activationEvent: Event,
 *   isProgrammatic: (boolean|undefined)
 * }}
 */
let ActivationStateType;

/**
 * @typedef {{
 *   activate: (string|undefined),
 *   deactivate: (string|undefined),
 *   focus: (string|undefined),
 *   blur: (string|undefined)
 * }}
 */
let ListenerInfoType;

/**
 * @typedef {{
 *   activate: function(!Event),
 *   deactivate: function(!Event),
 *   focus: function(),
 *   blur: function()
 * }}
 */
let ListenersType;

/**
 * @typedef {{
 *   x: number,
 *   y: number
 * }}
 */
let PointType;

// Activation events registered on the root element of each instance for activation
const ACTIVATION_EVENT_TYPES = ['touchstart', 'pointerdown', 'mousedown', 'keydown'];

// Deactivation events registered on documentElement when a pointer-related down event occurs
const POINTER_DEACTIVATION_EVENT_TYPES = ['touchend', 'pointerup', 'mouseup'];

// Tracks activations that have occurred on the current frame, to avoid simultaneous nested activations
/** @type {!Array<!EventTarget>} */
let activatedTargets = [];

/**
 * @extends {MDCFoundation<!MDCRippleAdapter>}
 */
class MDCRippleFoundation extends _material_base_foundation__WEBPACK_IMPORTED_MODULE_0__["default"] {
  static get cssClasses() {
    return _constants__WEBPACK_IMPORTED_MODULE_2__["cssClasses"];
  }

  static get strings() {
    return _constants__WEBPACK_IMPORTED_MODULE_2__["strings"];
  }

  static get numbers() {
    return _constants__WEBPACK_IMPORTED_MODULE_2__["numbers"];
  }

  static get defaultAdapter() {
    return {
      browserSupportsCssVars: () => /* boolean - cached */ {},
      isUnbounded: () => /* boolean */ {},
      isSurfaceActive: () => /* boolean */ {},
      isSurfaceDisabled: () => /* boolean */ {},
      addClass: (/* className: string */) => {},
      removeClass: (/* className: string */) => {},
      containsEventTarget: (/* target: !EventTarget */) => {},
      registerInteractionHandler: (/* evtType: string, handler: EventListener */) => {},
      deregisterInteractionHandler: (/* evtType: string, handler: EventListener */) => {},
      registerDocumentInteractionHandler: (/* evtType: string, handler: EventListener */) => {},
      deregisterDocumentInteractionHandler: (/* evtType: string, handler: EventListener */) => {},
      registerResizeHandler: (/* handler: EventListener */) => {},
      deregisterResizeHandler: (/* handler: EventListener */) => {},
      updateCssVariable: (/* varName: string, value: string */) => {},
      computeBoundingRect: () => /* ClientRect */ {},
      getWindowPageOffset: () => /* {x: number, y: number} */ {},
    };
  }

  constructor(adapter) {
    super(Object.assign(MDCRippleFoundation.defaultAdapter, adapter));

    /** @private {number} */
    this.layoutFrame_ = 0;

    /** @private {!ClientRect} */
    this.frame_ = /** @type {!ClientRect} */ ({width: 0, height: 0});

    /** @private {!ActivationStateType} */
    this.activationState_ = this.defaultActivationState_();

    /** @private {number} */
    this.initialSize_ = 0;

    /** @private {number} */
    this.maxRadius_ = 0;

    /** @private {function(!Event)} */
    this.activateHandler_ = (e) => this.activate_(e);

    /** @private {function(!Event)} */
    this.deactivateHandler_ = (e) => this.deactivate_(e);

    /** @private {function(?Event=)} */
    this.focusHandler_ = () => requestAnimationFrame(
      () => this.adapter_.addClass(MDCRippleFoundation.cssClasses.BG_FOCUSED)
    );

    /** @private {function(?Event=)} */
    this.blurHandler_ = () => requestAnimationFrame(
      () => this.adapter_.removeClass(MDCRippleFoundation.cssClasses.BG_FOCUSED)
    );

    /** @private {!Function} */
    this.resizeHandler_ = () => this.layout();

    /** @private {{left: number, top:number}} */
    this.unboundedCoords_ = {
      left: 0,
      top: 0,
    };

    /** @private {number} */
    this.fgScale_ = 0;

    /** @private {number} */
    this.activationTimer_ = 0;

    /** @private {number} */
    this.fgDeactivationRemovalTimer_ = 0;

    /** @private {boolean} */
    this.activationAnimationHasEnded_ = false;

    /** @private {!Function} */
    this.activationTimerCallback_ = () => {
      this.activationAnimationHasEnded_ = true;
      this.runDeactivationUXLogicIfReady_();
    };

    /** @private {?Event} */
    this.previousActivationEvent_ = null;
  }

  /**
   * We compute this property so that we are not querying information about the client
   * until the point in time where the foundation requests it. This prevents scenarios where
   * client-side feature-detection may happen too early, such as when components are rendered on the server
   * and then initialized at mount time on the client.
   * @return {boolean}
   * @private
   */
  isSupported_() {
    return this.adapter_.browserSupportsCssVars();
  }

  /**
   * @return {!ActivationStateType}
   */
  defaultActivationState_() {
    return {
      isActivated: false,
      hasDeactivationUXRun: false,
      wasActivatedByPointer: false,
      wasElementMadeActive: false,
      activationEvent: null,
      isProgrammatic: false,
    };
  }

  init() {
    if (!this.isSupported_()) {
      return;
    }
    this.registerRootHandlers_();

    const {ROOT, UNBOUNDED} = MDCRippleFoundation.cssClasses;
    requestAnimationFrame(() => {
      this.adapter_.addClass(ROOT);
      if (this.adapter_.isUnbounded()) {
        this.adapter_.addClass(UNBOUNDED);
        // Unbounded ripples need layout logic applied immediately to set coordinates for both shade and ripple
        this.layoutInternal_();
      }
    });
  }

  destroy() {
    if (!this.isSupported_()) {
      return;
    }

    if (this.activationTimer_) {
      clearTimeout(this.activationTimer_);
      this.activationTimer_ = 0;
      const {FG_ACTIVATION} = MDCRippleFoundation.cssClasses;
      this.adapter_.removeClass(FG_ACTIVATION);
    }

    this.deregisterRootHandlers_();
    this.deregisterDeactivationHandlers_();

    const {ROOT, UNBOUNDED} = MDCRippleFoundation.cssClasses;
    requestAnimationFrame(() => {
      this.adapter_.removeClass(ROOT);
      this.adapter_.removeClass(UNBOUNDED);
      this.removeCssVars_();
    });
  }

  /** @private */
  registerRootHandlers_() {
    ACTIVATION_EVENT_TYPES.forEach((type) => {
      this.adapter_.registerInteractionHandler(type, this.activateHandler_);
    });
    this.adapter_.registerInteractionHandler('focus', this.focusHandler_);
    this.adapter_.registerInteractionHandler('blur', this.blurHandler_);

    if (this.adapter_.isUnbounded()) {
      this.adapter_.registerResizeHandler(this.resizeHandler_);
    }
  }

  /**
   * @param {!Event} e
   * @private
   */
  registerDeactivationHandlers_(e) {
    if (e.type === 'keydown') {
      this.adapter_.registerInteractionHandler('keyup', this.deactivateHandler_);
    } else {
      POINTER_DEACTIVATION_EVENT_TYPES.forEach((type) => {
        this.adapter_.registerDocumentInteractionHandler(type, this.deactivateHandler_);
      });
    }
  }

  /** @private */
  deregisterRootHandlers_() {
    ACTIVATION_EVENT_TYPES.forEach((type) => {
      this.adapter_.deregisterInteractionHandler(type, this.activateHandler_);
    });
    this.adapter_.deregisterInteractionHandler('focus', this.focusHandler_);
    this.adapter_.deregisterInteractionHandler('blur', this.blurHandler_);

    if (this.adapter_.isUnbounded()) {
      this.adapter_.deregisterResizeHandler(this.resizeHandler_);
    }
  }

  /** @private */
  deregisterDeactivationHandlers_() {
    this.adapter_.deregisterInteractionHandler('keyup', this.deactivateHandler_);
    POINTER_DEACTIVATION_EVENT_TYPES.forEach((type) => {
      this.adapter_.deregisterDocumentInteractionHandler(type, this.deactivateHandler_);
    });
  }

  /** @private */
  removeCssVars_() {
    const {strings} = MDCRippleFoundation;
    Object.keys(strings).forEach((k) => {
      if (k.indexOf('VAR_') === 0) {
        this.adapter_.updateCssVariable(strings[k], null);
      }
    });
  }

  /**
   * @param {?Event} e
   * @private
   */
  activate_(e) {
    if (this.adapter_.isSurfaceDisabled()) {
      return;
    }

    const activationState = this.activationState_;
    if (activationState.isActivated) {
      return;
    }

    // Avoid reacting to follow-on events fired by touch device after an already-processed user interaction
    const previousActivationEvent = this.previousActivationEvent_;
    const isSameInteraction = previousActivationEvent && e && previousActivationEvent.type !== e.type;
    if (isSameInteraction) {
      return;
    }

    activationState.isActivated = true;
    activationState.isProgrammatic = e === null;
    activationState.activationEvent = e;
    activationState.wasActivatedByPointer = activationState.isProgrammatic ? false : (
      e.type === 'mousedown' || e.type === 'touchstart' || e.type === 'pointerdown'
    );

    const hasActivatedChild =
      e && activatedTargets.length > 0 && activatedTargets.some((target) => this.adapter_.containsEventTarget(target));
    if (hasActivatedChild) {
      // Immediately reset activation state, while preserving logic that prevents touch follow-on events
      this.resetActivationState_();
      return;
    }

    if (e) {
      activatedTargets.push(/** @type {!EventTarget} */ (e.target));
      this.registerDeactivationHandlers_(e);
    }

    activationState.wasElementMadeActive = this.checkElementMadeActive_(e);
    if (activationState.wasElementMadeActive) {
      this.animateActivation_();
    }

    requestAnimationFrame(() => {
      // Reset array on next frame after the current event has had a chance to bubble to prevent ancestor ripples
      activatedTargets = [];

      if (!activationState.wasElementMadeActive && (e.key === ' ' || e.keyCode === 32)) {
        // If space was pressed, try again within an rAF call to detect :active, because different UAs report
        // active states inconsistently when they're called within event handling code:
        // - https://bugs.chromium.org/p/chromium/issues/detail?id=635971
        // - https://bugzilla.mozilla.org/show_bug.cgi?id=1293741
        // We try first outside rAF to support Edge, which does not exhibit this problem, but will crash if a CSS
        // variable is set within a rAF callback for a submit button interaction (#2241).
        activationState.wasElementMadeActive = this.checkElementMadeActive_(e);
        if (activationState.wasElementMadeActive) {
          this.animateActivation_();
        }
      }

      if (!activationState.wasElementMadeActive) {
        // Reset activation state immediately if element was not made active.
        this.activationState_ = this.defaultActivationState_();
      }
    });
  }

  /**
   * @param {?Event} e
   * @private
   */
  checkElementMadeActive_(e) {
    return (e && e.type === 'keydown') ? this.adapter_.isSurfaceActive() : true;
  }

  /**
   * @param {?Event=} event Optional event containing position information.
   */
  activate(event = null) {
    this.activate_(event);
  }

  /** @private */
  animateActivation_() {
    const {VAR_FG_TRANSLATE_START, VAR_FG_TRANSLATE_END} = MDCRippleFoundation.strings;
    const {FG_DEACTIVATION, FG_ACTIVATION} = MDCRippleFoundation.cssClasses;
    const {DEACTIVATION_TIMEOUT_MS} = MDCRippleFoundation.numbers;

    this.layoutInternal_();

    let translateStart = '';
    let translateEnd = '';

    if (!this.adapter_.isUnbounded()) {
      const {startPoint, endPoint} = this.getFgTranslationCoordinates_();
      translateStart = `${startPoint.x}px, ${startPoint.y}px`;
      translateEnd = `${endPoint.x}px, ${endPoint.y}px`;
    }

    this.adapter_.updateCssVariable(VAR_FG_TRANSLATE_START, translateStart);
    this.adapter_.updateCssVariable(VAR_FG_TRANSLATE_END, translateEnd);
    // Cancel any ongoing activation/deactivation animations
    clearTimeout(this.activationTimer_);
    clearTimeout(this.fgDeactivationRemovalTimer_);
    this.rmBoundedActivationClasses_();
    this.adapter_.removeClass(FG_DEACTIVATION);

    // Force layout in order to re-trigger the animation.
    this.adapter_.computeBoundingRect();
    this.adapter_.addClass(FG_ACTIVATION);
    this.activationTimer_ = setTimeout(() => this.activationTimerCallback_(), DEACTIVATION_TIMEOUT_MS);
  }

  /**
   * @private
   * @return {{startPoint: PointType, endPoint: PointType}}
   */
  getFgTranslationCoordinates_() {
    const {activationEvent, wasActivatedByPointer} = this.activationState_;

    let startPoint;
    if (wasActivatedByPointer) {
      startPoint = Object(_util__WEBPACK_IMPORTED_MODULE_3__["getNormalizedEventCoords"])(
        /** @type {!Event} */ (activationEvent),
        this.adapter_.getWindowPageOffset(), this.adapter_.computeBoundingRect()
      );
    } else {
      startPoint = {
        x: this.frame_.width / 2,
        y: this.frame_.height / 2,
      };
    }
    // Center the element around the start point.
    startPoint = {
      x: startPoint.x - (this.initialSize_ / 2),
      y: startPoint.y - (this.initialSize_ / 2),
    };

    const endPoint = {
      x: (this.frame_.width / 2) - (this.initialSize_ / 2),
      y: (this.frame_.height / 2) - (this.initialSize_ / 2),
    };

    return {startPoint, endPoint};
  }

  /** @private */
  runDeactivationUXLogicIfReady_() {
    // This method is called both when a pointing device is released, and when the activation animation ends.
    // The deactivation animation should only run after both of those occur.
    const {FG_DEACTIVATION} = MDCRippleFoundation.cssClasses;
    const {hasDeactivationUXRun, isActivated} = this.activationState_;
    const activationHasEnded = hasDeactivationUXRun || !isActivated;

    if (activationHasEnded && this.activationAnimationHasEnded_) {
      this.rmBoundedActivationClasses_();
      this.adapter_.addClass(FG_DEACTIVATION);
      this.fgDeactivationRemovalTimer_ = setTimeout(() => {
        this.adapter_.removeClass(FG_DEACTIVATION);
      }, _constants__WEBPACK_IMPORTED_MODULE_2__["numbers"].FG_DEACTIVATION_MS);
    }
  }

  /** @private */
  rmBoundedActivationClasses_() {
    const {FG_ACTIVATION} = MDCRippleFoundation.cssClasses;
    this.adapter_.removeClass(FG_ACTIVATION);
    this.activationAnimationHasEnded_ = false;
    this.adapter_.computeBoundingRect();
  }

  resetActivationState_() {
    this.previousActivationEvent_ = this.activationState_.activationEvent;
    this.activationState_ = this.defaultActivationState_();
    // Touch devices may fire additional events for the same interaction within a short time.
    // Store the previous event until it's safe to assume that subsequent events are for new interactions.
    setTimeout(() => this.previousActivationEvent_ = null, MDCRippleFoundation.numbers.TAP_DELAY_MS);
  }

  /**
   * @param {?Event} e
   * @private
   */
  deactivate_(e) {
    const activationState = this.activationState_;
    // This can happen in scenarios such as when you have a keyup event that blurs the element.
    if (!activationState.isActivated) {
      return;
    }

    const state = /** @type {!ActivationStateType} */ (Object.assign({}, activationState));

    if (activationState.isProgrammatic) {
      const evtObject = null;
      requestAnimationFrame(() => this.animateDeactivation_(evtObject, state));
      this.resetActivationState_();
    } else {
      this.deregisterDeactivationHandlers_();
      requestAnimationFrame(() => {
        this.activationState_.hasDeactivationUXRun = true;
        this.animateDeactivation_(e, state);
        this.resetActivationState_();
      });
    }
  }

  /**
   * @param {?Event=} event Optional event containing position information.
   */
  deactivate(event = null) {
    this.deactivate_(event);
  }

  /**
   * @param {Event} e
   * @param {!ActivationStateType} options
   * @private
   */
  animateDeactivation_(e, {wasActivatedByPointer, wasElementMadeActive}) {
    if (wasActivatedByPointer || wasElementMadeActive) {
      this.runDeactivationUXLogicIfReady_();
    }
  }

  layout() {
    if (this.layoutFrame_) {
      cancelAnimationFrame(this.layoutFrame_);
    }
    this.layoutFrame_ = requestAnimationFrame(() => {
      this.layoutInternal_();
      this.layoutFrame_ = 0;
    });
  }

  /** @private */
  layoutInternal_() {
    this.frame_ = this.adapter_.computeBoundingRect();
    const maxDim = Math.max(this.frame_.height, this.frame_.width);

    // Surface diameter is treated differently for unbounded vs. bounded ripples.
    // Unbounded ripple diameter is calculated smaller since the surface is expected to already be padded appropriately
    // to extend the hitbox, and the ripple is expected to meet the edges of the padded hitbox (which is typically
    // square). Bounded ripples, on the other hand, are fully expected to expand beyond the surface's longest diameter
    // (calculated based on the diagonal plus a constant padding), and are clipped at the surface's border via
    // `overflow: hidden`.
    const getBoundedRadius = () => {
      const hypotenuse = Math.sqrt(Math.pow(this.frame_.width, 2) + Math.pow(this.frame_.height, 2));
      return hypotenuse + MDCRippleFoundation.numbers.PADDING;
    };

    this.maxRadius_ = this.adapter_.isUnbounded() ? maxDim : getBoundedRadius();

    // Ripple is sized as a fraction of the largest dimension of the surface, then scales up using a CSS scale transform
    this.initialSize_ = maxDim * MDCRippleFoundation.numbers.INITIAL_ORIGIN_SCALE;
    this.fgScale_ = this.maxRadius_ / this.initialSize_;

    this.updateLayoutCssVars_();
  }

  /** @private */
  updateLayoutCssVars_() {
    const {
      VAR_FG_SIZE, VAR_LEFT, VAR_TOP, VAR_FG_SCALE,
    } = MDCRippleFoundation.strings;

    this.adapter_.updateCssVariable(VAR_FG_SIZE, `${this.initialSize_}px`);
    this.adapter_.updateCssVariable(VAR_FG_SCALE, this.fgScale_);

    if (this.adapter_.isUnbounded()) {
      this.unboundedCoords_ = {
        left: Math.round((this.frame_.width / 2) - (this.initialSize_ / 2)),
        top: Math.round((this.frame_.height / 2) - (this.initialSize_ / 2)),
      };

      this.adapter_.updateCssVariable(VAR_LEFT, `${this.unboundedCoords_.left}px`);
      this.adapter_.updateCssVariable(VAR_TOP, `${this.unboundedCoords_.top}px`);
    }
  }

  /** @param {boolean} unbounded */
  setUnbounded(unbounded) {
    const {UNBOUNDED} = MDCRippleFoundation.cssClasses;
    if (unbounded) {
      this.adapter_.addClass(UNBOUNDED);
    } else {
      this.adapter_.removeClass(UNBOUNDED);
    }
  }
}

/* harmony default export */ __webpack_exports__["default"] = (MDCRippleFoundation);


/***/ }),

/***/ "./node_modules/@material/ripple/index.js":
/*!************************************************!*\
  !*** ./node_modules/@material/ripple/index.js ***!
  \************************************************/
/*! exports provided: MDCRipple, MDCRippleFoundation, RippleCapableSurface, util */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MDCRipple", function() { return MDCRipple; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RippleCapableSurface", function() { return RippleCapableSurface; });
/* harmony import */ var _material_base_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @material/base/component */ "./node_modules/@material/base/component.js");
/* harmony import */ var _adapter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./adapter */ "./node_modules/@material/ripple/adapter.js");
/* harmony import */ var _foundation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./foundation */ "./node_modules/@material/ripple/foundation.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MDCRippleFoundation", function() { return _foundation__WEBPACK_IMPORTED_MODULE_2__["default"]; });

/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./util */ "./node_modules/@material/ripple/util.js");
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "util", function() { return _util__WEBPACK_IMPORTED_MODULE_3__; });
/**
 * @license
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */






/**
 * @extends MDCComponent<!MDCRippleFoundation>
 */
class MDCRipple extends _material_base_component__WEBPACK_IMPORTED_MODULE_0__["default"] {
  /** @param {...?} args */
  constructor(...args) {
    super(...args);

    /** @type {boolean} */
    this.disabled = false;

    /** @private {boolean} */
    this.unbounded_;
  }

  /**
   * @param {!Element} root
   * @param {{isUnbounded: (boolean|undefined)}=} options
   * @return {!MDCRipple}
   */
  static attachTo(root, {isUnbounded = undefined} = {}) {
    const ripple = new MDCRipple(root);
    // Only override unbounded behavior if option is explicitly specified
    if (isUnbounded !== undefined) {
      ripple.unbounded = /** @type {boolean} */ (isUnbounded);
    }
    return ripple;
  }

  /**
   * @param {!RippleCapableSurface} instance
   * @return {!MDCRippleAdapter}
   */
  static createAdapter(instance) {
    const MATCHES = _util__WEBPACK_IMPORTED_MODULE_3__["getMatchesProperty"](HTMLElement.prototype);

    return {
      browserSupportsCssVars: () => _util__WEBPACK_IMPORTED_MODULE_3__["supportsCssVariables"](window),
      isUnbounded: () => instance.unbounded,
      isSurfaceActive: () => instance.root_[MATCHES](':active'),
      isSurfaceDisabled: () => instance.disabled,
      addClass: (className) => instance.root_.classList.add(className),
      removeClass: (className) => instance.root_.classList.remove(className),
      containsEventTarget: (target) => instance.root_.contains(target),
      registerInteractionHandler: (evtType, handler) =>
        instance.root_.addEventListener(evtType, handler, _util__WEBPACK_IMPORTED_MODULE_3__["applyPassive"]()),
      deregisterInteractionHandler: (evtType, handler) =>
        instance.root_.removeEventListener(evtType, handler, _util__WEBPACK_IMPORTED_MODULE_3__["applyPassive"]()),
      registerDocumentInteractionHandler: (evtType, handler) =>
        document.documentElement.addEventListener(evtType, handler, _util__WEBPACK_IMPORTED_MODULE_3__["applyPassive"]()),
      deregisterDocumentInteractionHandler: (evtType, handler) =>
        document.documentElement.removeEventListener(evtType, handler, _util__WEBPACK_IMPORTED_MODULE_3__["applyPassive"]()),
      registerResizeHandler: (handler) => window.addEventListener('resize', handler),
      deregisterResizeHandler: (handler) => window.removeEventListener('resize', handler),
      updateCssVariable: (varName, value) => instance.root_.style.setProperty(varName, value),
      computeBoundingRect: () => instance.root_.getBoundingClientRect(),
      getWindowPageOffset: () => ({x: window.pageXOffset, y: window.pageYOffset}),
    };
  }

  /** @return {boolean} */
  get unbounded() {
    return this.unbounded_;
  }

  /** @param {boolean} unbounded */
  set unbounded(unbounded) {
    this.unbounded_ = Boolean(unbounded);
    this.setUnbounded_();
  }

  /**
   * Closure Compiler throws an access control error when directly accessing a
   * protected or private property inside a getter/setter, like unbounded above.
   * By accessing the protected property inside a method, we solve that problem.
   * That's why this function exists.
   * @private
   */
  setUnbounded_() {
    this.foundation_.setUnbounded(this.unbounded_);
  }

  activate() {
    this.foundation_.activate();
  }

  deactivate() {
    this.foundation_.deactivate();
  }

  layout() {
    this.foundation_.layout();
  }

  /** @return {!MDCRippleFoundation} */
  getDefaultFoundation() {
    return new _foundation__WEBPACK_IMPORTED_MODULE_2__["default"](MDCRipple.createAdapter(this));
  }

  initialSyncWithDOM() {
    this.unbounded = 'mdcRippleIsUnbounded' in this.root_.dataset;
  }
}

/**
 * See Material Design spec for more details on when to use ripples.
 * https://material.io/guidelines/motion/choreography.html#choreography-creation
 * @record
 */
class RippleCapableSurface {}

/** @protected {!Element} */
RippleCapableSurface.prototype.root_;

/**
 * Whether or not the ripple bleeds out of the bounds of the element.
 * @type {boolean|undefined}
 */
RippleCapableSurface.prototype.unbounded;

/**
 * Whether or not the ripple is attached to a disabled component.
 * @type {boolean|undefined}
 */
RippleCapableSurface.prototype.disabled;




/***/ }),

/***/ "./node_modules/@material/ripple/util.js":
/*!***********************************************!*\
  !*** ./node_modules/@material/ripple/util.js ***!
  \***********************************************/
/*! exports provided: supportsCssVariables, applyPassive, getMatchesProperty, getNormalizedEventCoords */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "supportsCssVariables", function() { return supportsCssVariables; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "applyPassive", function() { return applyPassive; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getMatchesProperty", function() { return getMatchesProperty; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getNormalizedEventCoords", function() { return getNormalizedEventCoords; });
/**
 * @license
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Stores result from supportsCssVariables to avoid redundant processing to detect CSS custom variable support.
 * @private {boolean|undefined}
 */
let supportsCssVariables_;

/**
 * Stores result from applyPassive to avoid redundant processing to detect passive event listener support.
 * @private {boolean|undefined}
 */
let supportsPassive_;

/**
 * @param {!Window} windowObj
 * @return {boolean}
 */
function detectEdgePseudoVarBug(windowObj) {
  // Detect versions of Edge with buggy var() support
  // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/11495448/
  const document = windowObj.document;
  const node = document.createElement('div');
  node.className = 'mdc-ripple-surface--test-edge-var-bug';
  document.body.appendChild(node);

  // The bug exists if ::before style ends up propagating to the parent element.
  // Additionally, getComputedStyle returns null in iframes with display: "none" in Firefox,
  // but Firefox is known to support CSS custom properties correctly.
  // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397
  const computedStyle = windowObj.getComputedStyle(node);
  const hasPseudoVarBug = computedStyle !== null && computedStyle.borderTopStyle === 'solid';
  node.remove();
  return hasPseudoVarBug;
}

/**
 * @param {!Window} windowObj
 * @param {boolean=} forceRefresh
 * @return {boolean|undefined}
 */

function supportsCssVariables(windowObj, forceRefresh = false) {
  let supportsCssVariables = supportsCssVariables_;
  if (typeof supportsCssVariables_ === 'boolean' && !forceRefresh) {
    return supportsCssVariables;
  }

  const supportsFunctionPresent = windowObj.CSS && typeof windowObj.CSS.supports === 'function';
  if (!supportsFunctionPresent) {
    return;
  }

  const explicitlySupportsCssVars = windowObj.CSS.supports('--css-vars', 'yes');
  // See: https://bugs.webkit.org/show_bug.cgi?id=154669
  // See: README section on Safari
  const weAreFeatureDetectingSafari10plus = (
    windowObj.CSS.supports('(--css-vars: yes)') &&
    windowObj.CSS.supports('color', '#00000000')
  );

  if (explicitlySupportsCssVars || weAreFeatureDetectingSafari10plus) {
    supportsCssVariables = !detectEdgePseudoVarBug(windowObj);
  } else {
    supportsCssVariables = false;
  }

  if (!forceRefresh) {
    supportsCssVariables_ = supportsCssVariables;
  }
  return supportsCssVariables;
}

//
/**
 * Determine whether the current browser supports passive event listeners, and if so, use them.
 * @param {!Window=} globalObj
 * @param {boolean=} forceRefresh
 * @return {boolean|{passive: boolean}}
 */
function applyPassive(globalObj = window, forceRefresh = false) {
  if (supportsPassive_ === undefined || forceRefresh) {
    let isSupported = false;
    try {
      globalObj.document.addEventListener('test', null, {get passive() {
        isSupported = true;
      }});
    } catch (e) { }

    supportsPassive_ = isSupported;
  }

  return supportsPassive_ ? {passive: true} : false;
}

/**
 * @param {!Object} HTMLElementPrototype
 * @return {!Array<string>}
 */
function getMatchesProperty(HTMLElementPrototype) {
  return [
    'webkitMatchesSelector', 'msMatchesSelector', 'matches',
  ].filter((p) => p in HTMLElementPrototype).pop();
}

/**
 * @param {!Event} ev
 * @param {{x: number, y: number}} pageOffset
 * @param {!ClientRect} clientRect
 * @return {{x: number, y: number}}
 */
function getNormalizedEventCoords(ev, pageOffset, clientRect) {
  const {x, y} = pageOffset;
  const documentX = x + clientRect.left;
  const documentY = y + clientRect.top;

  let normalizedX;
  let normalizedY;
  // Determine touch point relative to the ripple container.
  if (ev.type === 'touchstart') {
    normalizedX = ev.changedTouches[0].pageX - documentX;
    normalizedY = ev.changedTouches[0].pageY - documentY;
  } else {
    normalizedX = ev.pageX - documentX;
    normalizedY = ev.pageY - documentY;
  }

  return {x: normalizedX, y: normalizedY};
}




/***/ }),

/***/ "./node_modules/@material/snackbar/constants.js":
/*!******************************************************!*\
  !*** ./node_modules/@material/snackbar/constants.js ***!
  \******************************************************/
/*! exports provided: cssClasses, strings, numbers */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "cssClasses", function() { return cssClasses; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "strings", function() { return strings; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "numbers", function() { return numbers; });
/**
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const cssClasses = {
  ROOT: 'mdc-snackbar',
  TEXT: 'mdc-snackbar__text',
  ACTION_WRAPPER: 'mdc-snackbar__action-wrapper',
  ACTION_BUTTON: 'mdc-snackbar__action-button',
  ACTIVE: 'mdc-snackbar--active',
  MULTILINE: 'mdc-snackbar--multiline',
  ACTION_ON_BOTTOM: 'mdc-snackbar--action-on-bottom',
};

const strings = {
  TEXT_SELECTOR: '.mdc-snackbar__text',
  ACTION_WRAPPER_SELECTOR: '.mdc-snackbar__action-wrapper',
  ACTION_BUTTON_SELECTOR: '.mdc-snackbar__action-button',
  SHOW_EVENT: 'MDCSnackbar:show',
  HIDE_EVENT: 'MDCSnackbar:hide',
};

const numbers = {
  MESSAGE_TIMEOUT: 2750,
};


/***/ }),

/***/ "./node_modules/@material/snackbar/foundation.js":
/*!*******************************************************!*\
  !*** ./node_modules/@material/snackbar/foundation.js ***!
  \*******************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return MDCSnackbarFoundation; });
/* harmony import */ var _material_base_index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @material/base/index */ "./node_modules/@material/base/index.js");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constants */ "./node_modules/@material/snackbar/constants.js");
/**
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */




class MDCSnackbarFoundation extends _material_base_index__WEBPACK_IMPORTED_MODULE_0__["MDCFoundation"] {
  static get cssClasses() {
    return _constants__WEBPACK_IMPORTED_MODULE_1__["cssClasses"];
  }

  static get strings() {
    return _constants__WEBPACK_IMPORTED_MODULE_1__["strings"];
  }

  static get defaultAdapter() {
    return {
      addClass: (/* className: string */) => {},
      removeClass: (/* className: string */) => {},
      setAriaHidden: () => {},
      unsetAriaHidden: () => {},
      setActionAriaHidden: () => {},
      unsetActionAriaHidden: () => {},
      setActionText: (/* actionText: string */) => {},
      setMessageText: (/* message: string */) => {},
      setFocus: () => {},
      visibilityIsHidden: () => /* boolean */ false,
      registerCapturedBlurHandler: (/* handler: EventListener */) => {},
      deregisterCapturedBlurHandler: (/* handler: EventListener */) => {},
      registerVisibilityChangeHandler: (/* handler: EventListener */) => {},
      deregisterVisibilityChangeHandler: (/* handler: EventListener */) => {},
      registerCapturedInteractionHandler: (/* evtType: string, handler: EventListener */) => {},
      deregisterCapturedInteractionHandler: (/* evtType: string, handler: EventListener */) => {},
      registerActionClickHandler: (/* handler: EventListener */) => {},
      deregisterActionClickHandler: (/* handler: EventListener */) => {},
      registerTransitionEndHandler: (/* handler: EventListener */) => {},
      deregisterTransitionEndHandler: (/* handler: EventListener */) => {},
      notifyShow: () => {},
      notifyHide: () => {},
    };
  }

  get active() {
    return this.active_;
  }

  constructor(adapter) {
    super(Object.assign(MDCSnackbarFoundation.defaultAdapter, adapter));

    this.active_ = false;
    this.actionWasClicked_ = false;
    this.dismissOnAction_ = true;
    this.firstFocus_ = true;
    this.pointerDownRecognized_ = false;
    this.snackbarHasFocus_ = false;
    this.snackbarData_ = null;
    this.queue_ = [];
    this.actionClickHandler_ = () => {
      this.actionWasClicked_ = true;
      this.invokeAction_();
    };
    this.visibilitychangeHandler_ = () => {
      clearTimeout(this.timeoutId_);
      this.snackbarHasFocus_ = true;

      if (!this.adapter_.visibilityIsHidden()) {
        setTimeout(this.cleanup_.bind(this), this.snackbarData_.timeout || _constants__WEBPACK_IMPORTED_MODULE_1__["numbers"].MESSAGE_TIMEOUT);
      }
    };
    this.interactionHandler_ = (evt) => {
      if (evt.type == 'touchstart' || evt.type == 'mousedown') {
        this.pointerDownRecognized_ = true;
      }
      this.handlePossibleTabKeyboardFocus_(evt);

      if (evt.type == 'focus') {
        this.pointerDownRecognized_ = false;
      }
    };
    this.blurHandler_ = () => {
      clearTimeout(this.timeoutId_);
      this.snackbarHasFocus_ = false;
      this.timeoutId_ = setTimeout(this.cleanup_.bind(this), this.snackbarData_.timeout || _constants__WEBPACK_IMPORTED_MODULE_1__["numbers"].MESSAGE_TIMEOUT);
    };
  }

  init() {
    this.adapter_.registerActionClickHandler(this.actionClickHandler_);
    this.adapter_.setAriaHidden();
    this.adapter_.setActionAriaHidden();
  }

  destroy() {
    this.adapter_.deregisterActionClickHandler(this.actionClickHandler_);
    this.adapter_.deregisterCapturedBlurHandler(this.blurHandler_);
    this.adapter_.deregisterVisibilityChangeHandler(this.visibilitychangeHandler_);
    ['touchstart', 'mousedown', 'focus'].forEach((evtType) => {
      this.adapter_.deregisterCapturedInteractionHandler(evtType, this.interactionHandler_);
    });
  }

  dismissesOnAction() {
    return this.dismissOnAction_;
  }

  setDismissOnAction(dismissOnAction) {
    this.dismissOnAction_ = !!dismissOnAction;
  }

  show(data) {
    if (!data) {
      throw new Error(
        'Please provide a data object with at least a message to display.');
    }
    if (!data.message) {
      throw new Error('Please provide a message to be displayed.');
    }
    if (data.actionHandler && !data.actionText) {
      throw new Error('Please provide action text with the handler.');
    }
    if (this.active) {
      this.queue_.push(data);
      return;
    }
    clearTimeout(this.timeoutId_);
    this.snackbarData_ = data;
    this.firstFocus_ = true;
    this.adapter_.registerVisibilityChangeHandler(this.visibilitychangeHandler_);
    this.adapter_.registerCapturedBlurHandler(this.blurHandler_);
    ['touchstart', 'mousedown', 'focus'].forEach((evtType) => {
      this.adapter_.registerCapturedInteractionHandler(evtType, this.interactionHandler_);
    });

    const {ACTIVE, MULTILINE, ACTION_ON_BOTTOM} = _constants__WEBPACK_IMPORTED_MODULE_1__["cssClasses"];

    this.adapter_.setMessageText(this.snackbarData_.message);

    if (this.snackbarData_.multiline) {
      this.adapter_.addClass(MULTILINE);
      if (this.snackbarData_.actionOnBottom) {
        this.adapter_.addClass(ACTION_ON_BOTTOM);
      }
    }

    if (this.snackbarData_.actionHandler) {
      this.adapter_.setActionText(this.snackbarData_.actionText);
      this.actionHandler_ = this.snackbarData_.actionHandler;
      this.setActionHidden_(false);
    } else {
      this.setActionHidden_(true);
      this.actionHandler_ = null;
      this.adapter_.setActionText(null);
    }

    this.active_ = true;
    this.adapter_.addClass(ACTIVE);
    this.adapter_.unsetAriaHidden();
    this.adapter_.notifyShow();

    this.timeoutId_ = setTimeout(this.cleanup_.bind(this), this.snackbarData_.timeout || _constants__WEBPACK_IMPORTED_MODULE_1__["numbers"].MESSAGE_TIMEOUT);
  }

  handlePossibleTabKeyboardFocus_() {
    const hijackFocus =
      this.firstFocus_ && !this.pointerDownRecognized_;

    if (hijackFocus) {
      this.setFocusOnAction_();
    }

    this.firstFocus_ = false;
  }

  setFocusOnAction_() {
    this.adapter_.setFocus();
    this.snackbarHasFocus_ = true;
    this.firstFocus_ = false;
  }

  invokeAction_() {
    try {
      if (!this.actionHandler_) {
        return;
      }

      this.actionHandler_();
    } finally {
      if (this.dismissOnAction_) {
        this.cleanup_();
      }
    }
  }

  cleanup_() {
    const allowDismissal = !this.snackbarHasFocus_ || this.actionWasClicked_;

    if (allowDismissal) {
      const {ACTIVE, MULTILINE, ACTION_ON_BOTTOM} = _constants__WEBPACK_IMPORTED_MODULE_1__["cssClasses"];

      this.adapter_.removeClass(ACTIVE);

      const handler = () => {
        clearTimeout(this.timeoutId_);
        this.adapter_.deregisterTransitionEndHandler(handler);
        this.adapter_.removeClass(MULTILINE);
        this.adapter_.removeClass(ACTION_ON_BOTTOM);
        this.setActionHidden_(true);
        this.adapter_.setAriaHidden();
        this.active_ = false;
        this.snackbarHasFocus_ = false;
        this.adapter_.notifyHide();
        this.showNext_();
      };

      this.adapter_.registerTransitionEndHandler(handler);
    }
  }

  showNext_() {
    if (!this.queue_.length) {
      return;
    }
    this.show(this.queue_.shift());
  }

  setActionHidden_(isHidden) {
    if (isHidden) {
      this.adapter_.setActionAriaHidden();
    } else {
      this.adapter_.unsetActionAriaHidden();
    }
  }
}


/***/ }),

/***/ "./node_modules/@material/snackbar/index.js":
/*!**************************************************!*\
  !*** ./node_modules/@material/snackbar/index.js ***!
  \**************************************************/
/*! exports provided: MDCSnackbarFoundation, MDCSnackbar */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MDCSnackbar", function() { return MDCSnackbar; });
/* harmony import */ var _material_base_index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @material/base/index */ "./node_modules/@material/base/index.js");
/* harmony import */ var _foundation__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./foundation */ "./node_modules/@material/snackbar/foundation.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MDCSnackbarFoundation", function() { return _foundation__WEBPACK_IMPORTED_MODULE_1__["default"]; });

/* harmony import */ var _material_animation_index__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @material/animation/index */ "./node_modules/@material/animation/index.js");
/**
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */







class MDCSnackbar extends _material_base_index__WEBPACK_IMPORTED_MODULE_0__["MDCComponent"] {
  static attachTo(root) {
    return new MDCSnackbar(root);
  }

  show(data) {
    this.foundation_.show(data);
  }

  getDefaultFoundation() {
    const {
      TEXT_SELECTOR,
      ACTION_BUTTON_SELECTOR,
    } = _foundation__WEBPACK_IMPORTED_MODULE_1__["default"].strings;
    const getText = () => this.root_.querySelector(TEXT_SELECTOR);
    const getActionButton = () => this.root_.querySelector(ACTION_BUTTON_SELECTOR);

    /* eslint brace-style: "off" */
    return new _foundation__WEBPACK_IMPORTED_MODULE_1__["default"]({
      addClass: (className) => this.root_.classList.add(className),
      removeClass: (className) => this.root_.classList.remove(className),
      setAriaHidden: () => this.root_.setAttribute('aria-hidden', 'true'),
      unsetAriaHidden: () => this.root_.removeAttribute('aria-hidden'),
      setActionAriaHidden: () => getActionButton().setAttribute('aria-hidden', 'true'),
      unsetActionAriaHidden: () => getActionButton().removeAttribute('aria-hidden'),
      setActionText: (text) => {getActionButton().textContent = text;},
      setMessageText: (text) => {getText().textContent = text;},
      setFocus: () => getActionButton().focus(),
      visibilityIsHidden: () => document.hidden,
      registerCapturedBlurHandler: (handler) => getActionButton().addEventListener('blur', handler, true),
      deregisterCapturedBlurHandler: (handler) => getActionButton().removeEventListener('blur', handler, true),
      registerVisibilityChangeHandler: (handler) => document.addEventListener('visibilitychange', handler),
      deregisterVisibilityChangeHandler: (handler) => document.removeEventListener('visibilitychange', handler),
      registerCapturedInteractionHandler: (evt, handler) =>
        document.body.addEventListener(evt, handler, true),
      deregisterCapturedInteractionHandler: (evt, handler) =>
        document.body.removeEventListener(evt, handler, true),
      registerActionClickHandler: (handler) => getActionButton().addEventListener('click', handler),
      deregisterActionClickHandler: (handler) => getActionButton().removeEventListener('click', handler),
      registerTransitionEndHandler:
        (handler) => this.root_.addEventListener(Object(_material_animation_index__WEBPACK_IMPORTED_MODULE_2__["getCorrectEventName"])(window, 'transitionend'), handler),
      deregisterTransitionEndHandler:
        (handler) => this.root_.removeEventListener(Object(_material_animation_index__WEBPACK_IMPORTED_MODULE_2__["getCorrectEventName"])(window, 'transitionend'), handler),
      notifyShow: () => this.emit(_foundation__WEBPACK_IMPORTED_MODULE_1__["default"].strings.SHOW_EVENT),
      notifyHide: () => this.emit(_foundation__WEBPACK_IMPORTED_MODULE_1__["default"].strings.HIDE_EVENT),
    });
  }

  get dismissesOnAction() {
    return this.foundation_.dismissesOnAction();
  }

  set dismissesOnAction(dismissesOnAction) {
    this.foundation_.setDismissOnAction(dismissesOnAction);
  }
}


/***/ }),

/***/ "./node_modules/axios/index.js":
/*!*************************************!*\
  !*** ./node_modules/axios/index.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! ./lib/axios */ "./node_modules/axios/lib/axios.js");

/***/ }),

/***/ "./node_modules/axios/lib/adapters/xhr.js":
/*!************************************************!*\
  !*** ./node_modules/axios/lib/adapters/xhr.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");
var settle = __webpack_require__(/*! ./../core/settle */ "./node_modules/axios/lib/core/settle.js");
var buildURL = __webpack_require__(/*! ./../helpers/buildURL */ "./node_modules/axios/lib/helpers/buildURL.js");
var parseHeaders = __webpack_require__(/*! ./../helpers/parseHeaders */ "./node_modules/axios/lib/helpers/parseHeaders.js");
var isURLSameOrigin = __webpack_require__(/*! ./../helpers/isURLSameOrigin */ "./node_modules/axios/lib/helpers/isURLSameOrigin.js");
var createError = __webpack_require__(/*! ../core/createError */ "./node_modules/axios/lib/core/createError.js");
var btoa = (typeof window !== 'undefined' && window.btoa && window.btoa.bind(window)) || __webpack_require__(/*! ./../helpers/btoa */ "./node_modules/axios/lib/helpers/btoa.js");

module.exports = function xhrAdapter(config) {
  return new Promise(function dispatchXhrRequest(resolve, reject) {
    var requestData = config.data;
    var requestHeaders = config.headers;

    if (utils.isFormData(requestData)) {
      delete requestHeaders['Content-Type']; // Let the browser set it
    }

    var request = new XMLHttpRequest();
    var loadEvent = 'onreadystatechange';
    var xDomain = false;

    // For IE 8/9 CORS support
    // Only supports POST and GET calls and doesn't returns the response headers.
    // DON'T do this for testing b/c XMLHttpRequest is mocked, not XDomainRequest.
    if ("development" !== 'test' &&
        typeof window !== 'undefined' &&
        window.XDomainRequest && !('withCredentials' in request) &&
        !isURLSameOrigin(config.url)) {
      request = new window.XDomainRequest();
      loadEvent = 'onload';
      xDomain = true;
      request.onprogress = function handleProgress() {};
      request.ontimeout = function handleTimeout() {};
    }

    // HTTP basic authentication
    if (config.auth) {
      var username = config.auth.username || '';
      var password = config.auth.password || '';
      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
    }

    request.open(config.method.toUpperCase(), buildURL(config.url, config.params, config.paramsSerializer), true);

    // Set the request timeout in MS
    request.timeout = config.timeout;

    // Listen for ready state
    request[loadEvent] = function handleLoad() {
      if (!request || (request.readyState !== 4 && !xDomain)) {
        return;
      }

      // The request errored out and we didn't get a response, this will be
      // handled by onerror instead
      // With one exception: request that using file: protocol, most browsers
      // will return status as 0 even though it's a successful request
      if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
        return;
      }

      // Prepare the response
      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;
      var responseData = !config.responseType || config.responseType === 'text' ? request.responseText : request.response;
      var response = {
        data: responseData,
        // IE sends 1223 instead of 204 (https://github.com/axios/axios/issues/201)
        status: request.status === 1223 ? 204 : request.status,
        statusText: request.status === 1223 ? 'No Content' : request.statusText,
        headers: responseHeaders,
        config: config,
        request: request
      };

      settle(resolve, reject, response);

      // Clean up request
      request = null;
    };

    // Handle low level network errors
    request.onerror = function handleError() {
      // Real errors are hidden from us by the browser
      // onerror should only fire if it's a network error
      reject(createError('Network Error', config, null, request));

      // Clean up request
      request = null;
    };

    // Handle timeout
    request.ontimeout = function handleTimeout() {
      reject(createError('timeout of ' + config.timeout + 'ms exceeded', config, 'ECONNABORTED',
        request));

      // Clean up request
      request = null;
    };

    // Add xsrf header
    // This is only done if running in a standard browser environment.
    // Specifically not if we're in a web worker, or react-native.
    if (utils.isStandardBrowserEnv()) {
      var cookies = __webpack_require__(/*! ./../helpers/cookies */ "./node_modules/axios/lib/helpers/cookies.js");

      // Add xsrf header
      var xsrfValue = (config.withCredentials || isURLSameOrigin(config.url)) && config.xsrfCookieName ?
          cookies.read(config.xsrfCookieName) :
          undefined;

      if (xsrfValue) {
        requestHeaders[config.xsrfHeaderName] = xsrfValue;
      }
    }

    // Add headers to the request
    if ('setRequestHeader' in request) {
      utils.forEach(requestHeaders, function setRequestHeader(val, key) {
        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {
          // Remove Content-Type if data is undefined
          delete requestHeaders[key];
        } else {
          // Otherwise add header to the request
          request.setRequestHeader(key, val);
        }
      });
    }

    // Add withCredentials to request if needed
    if (config.withCredentials) {
      request.withCredentials = true;
    }

    // Add responseType to request if needed
    if (config.responseType) {
      try {
        request.responseType = config.responseType;
      } catch (e) {
        // Expected DOMException thrown by browsers not compatible XMLHttpRequest Level 2.
        // But, this can be suppressed for 'json' type as it can be parsed by default 'transformResponse' function.
        if (config.responseType !== 'json') {
          throw e;
        }
      }
    }

    // Handle progress if needed
    if (typeof config.onDownloadProgress === 'function') {
      request.addEventListener('progress', config.onDownloadProgress);
    }

    // Not all browsers support upload events
    if (typeof config.onUploadProgress === 'function' && request.upload) {
      request.upload.addEventListener('progress', config.onUploadProgress);
    }

    if (config.cancelToken) {
      // Handle cancellation
      config.cancelToken.promise.then(function onCanceled(cancel) {
        if (!request) {
          return;
        }

        request.abort();
        reject(cancel);
        // Clean up request
        request = null;
      });
    }

    if (requestData === undefined) {
      requestData = null;
    }

    // Send the request
    request.send(requestData);
  });
};


/***/ }),

/***/ "./node_modules/axios/lib/axios.js":
/*!*****************************************!*\
  !*** ./node_modules/axios/lib/axios.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./utils */ "./node_modules/axios/lib/utils.js");
var bind = __webpack_require__(/*! ./helpers/bind */ "./node_modules/axios/lib/helpers/bind.js");
var Axios = __webpack_require__(/*! ./core/Axios */ "./node_modules/axios/lib/core/Axios.js");
var defaults = __webpack_require__(/*! ./defaults */ "./node_modules/axios/lib/defaults.js");

/**
 * Create an instance of Axios
 *
 * @param {Object} defaultConfig The default config for the instance
 * @return {Axios} A new instance of Axios
 */
function createInstance(defaultConfig) {
  var context = new Axios(defaultConfig);
  var instance = bind(Axios.prototype.request, context);

  // Copy axios.prototype to instance
  utils.extend(instance, Axios.prototype, context);

  // Copy context to instance
  utils.extend(instance, context);

  return instance;
}

// Create the default instance to be exported
var axios = createInstance(defaults);

// Expose Axios class to allow class inheritance
axios.Axios = Axios;

// Factory for creating new instances
axios.create = function create(instanceConfig) {
  return createInstance(utils.merge(defaults, instanceConfig));
};

// Expose Cancel & CancelToken
axios.Cancel = __webpack_require__(/*! ./cancel/Cancel */ "./node_modules/axios/lib/cancel/Cancel.js");
axios.CancelToken = __webpack_require__(/*! ./cancel/CancelToken */ "./node_modules/axios/lib/cancel/CancelToken.js");
axios.isCancel = __webpack_require__(/*! ./cancel/isCancel */ "./node_modules/axios/lib/cancel/isCancel.js");

// Expose all/spread
axios.all = function all(promises) {
  return Promise.all(promises);
};
axios.spread = __webpack_require__(/*! ./helpers/spread */ "./node_modules/axios/lib/helpers/spread.js");

module.exports = axios;

// Allow use of default import syntax in TypeScript
module.exports.default = axios;


/***/ }),

/***/ "./node_modules/axios/lib/cancel/Cancel.js":
/*!*************************************************!*\
  !*** ./node_modules/axios/lib/cancel/Cancel.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * A `Cancel` is an object that is thrown when an operation is canceled.
 *
 * @class
 * @param {string=} message The message.
 */
function Cancel(message) {
  this.message = message;
}

Cancel.prototype.toString = function toString() {
  return 'Cancel' + (this.message ? ': ' + this.message : '');
};

Cancel.prototype.__CANCEL__ = true;

module.exports = Cancel;


/***/ }),

/***/ "./node_modules/axios/lib/cancel/CancelToken.js":
/*!******************************************************!*\
  !*** ./node_modules/axios/lib/cancel/CancelToken.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Cancel = __webpack_require__(/*! ./Cancel */ "./node_modules/axios/lib/cancel/Cancel.js");

/**
 * A `CancelToken` is an object that can be used to request cancellation of an operation.
 *
 * @class
 * @param {Function} executor The executor function.
 */
function CancelToken(executor) {
  if (typeof executor !== 'function') {
    throw new TypeError('executor must be a function.');
  }

  var resolvePromise;
  this.promise = new Promise(function promiseExecutor(resolve) {
    resolvePromise = resolve;
  });

  var token = this;
  executor(function cancel(message) {
    if (token.reason) {
      // Cancellation has already been requested
      return;
    }

    token.reason = new Cancel(message);
    resolvePromise(token.reason);
  });
}

/**
 * Throws a `Cancel` if cancellation has been requested.
 */
CancelToken.prototype.throwIfRequested = function throwIfRequested() {
  if (this.reason) {
    throw this.reason;
  }
};

/**
 * Returns an object that contains a new `CancelToken` and a function that, when called,
 * cancels the `CancelToken`.
 */
CancelToken.source = function source() {
  var cancel;
  var token = new CancelToken(function executor(c) {
    cancel = c;
  });
  return {
    token: token,
    cancel: cancel
  };
};

module.exports = CancelToken;


/***/ }),

/***/ "./node_modules/axios/lib/cancel/isCancel.js":
/*!***************************************************!*\
  !*** ./node_modules/axios/lib/cancel/isCancel.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function isCancel(value) {
  return !!(value && value.__CANCEL__);
};


/***/ }),

/***/ "./node_modules/axios/lib/core/Axios.js":
/*!**********************************************!*\
  !*** ./node_modules/axios/lib/core/Axios.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var defaults = __webpack_require__(/*! ./../defaults */ "./node_modules/axios/lib/defaults.js");
var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");
var InterceptorManager = __webpack_require__(/*! ./InterceptorManager */ "./node_modules/axios/lib/core/InterceptorManager.js");
var dispatchRequest = __webpack_require__(/*! ./dispatchRequest */ "./node_modules/axios/lib/core/dispatchRequest.js");

/**
 * Create a new instance of Axios
 *
 * @param {Object} instanceConfig The default config for the instance
 */
function Axios(instanceConfig) {
  this.defaults = instanceConfig;
  this.interceptors = {
    request: new InterceptorManager(),
    response: new InterceptorManager()
  };
}

/**
 * Dispatch a request
 *
 * @param {Object} config The config specific for this request (merged with this.defaults)
 */
Axios.prototype.request = function request(config) {
  /*eslint no-param-reassign:0*/
  // Allow for axios('example/url'[, config]) a la fetch API
  if (typeof config === 'string') {
    config = utils.merge({
      url: arguments[0]
    }, arguments[1]);
  }

  config = utils.merge(defaults, {method: 'get'}, this.defaults, config);
  config.method = config.method.toLowerCase();

  // Hook up interceptors middleware
  var chain = [dispatchRequest, undefined];
  var promise = Promise.resolve(config);

  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
    chain.unshift(interceptor.fulfilled, interceptor.rejected);
  });

  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
    chain.push(interceptor.fulfilled, interceptor.rejected);
  });

  while (chain.length) {
    promise = promise.then(chain.shift(), chain.shift());
  }

  return promise;
};

// Provide aliases for supported request methods
utils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function(url, config) {
    return this.request(utils.merge(config || {}, {
      method: method,
      url: url
    }));
  };
});

utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function(url, data, config) {
    return this.request(utils.merge(config || {}, {
      method: method,
      url: url,
      data: data
    }));
  };
});

module.exports = Axios;


/***/ }),

/***/ "./node_modules/axios/lib/core/InterceptorManager.js":
/*!***********************************************************!*\
  !*** ./node_modules/axios/lib/core/InterceptorManager.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

function InterceptorManager() {
  this.handlers = [];
}

/**
 * Add a new interceptor to the stack
 *
 * @param {Function} fulfilled The function to handle `then` for a `Promise`
 * @param {Function} rejected The function to handle `reject` for a `Promise`
 *
 * @return {Number} An ID used to remove interceptor later
 */
InterceptorManager.prototype.use = function use(fulfilled, rejected) {
  this.handlers.push({
    fulfilled: fulfilled,
    rejected: rejected
  });
  return this.handlers.length - 1;
};

/**
 * Remove an interceptor from the stack
 *
 * @param {Number} id The ID that was returned by `use`
 */
InterceptorManager.prototype.eject = function eject(id) {
  if (this.handlers[id]) {
    this.handlers[id] = null;
  }
};

/**
 * Iterate over all the registered interceptors
 *
 * This method is particularly useful for skipping over any
 * interceptors that may have become `null` calling `eject`.
 *
 * @param {Function} fn The function to call for each interceptor
 */
InterceptorManager.prototype.forEach = function forEach(fn) {
  utils.forEach(this.handlers, function forEachHandler(h) {
    if (h !== null) {
      fn(h);
    }
  });
};

module.exports = InterceptorManager;


/***/ }),

/***/ "./node_modules/axios/lib/core/createError.js":
/*!****************************************************!*\
  !*** ./node_modules/axios/lib/core/createError.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var enhanceError = __webpack_require__(/*! ./enhanceError */ "./node_modules/axios/lib/core/enhanceError.js");

/**
 * Create an Error with the specified message, config, error code, request and response.
 *
 * @param {string} message The error message.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The created error.
 */
module.exports = function createError(message, config, code, request, response) {
  var error = new Error(message);
  return enhanceError(error, config, code, request, response);
};


/***/ }),

/***/ "./node_modules/axios/lib/core/dispatchRequest.js":
/*!********************************************************!*\
  !*** ./node_modules/axios/lib/core/dispatchRequest.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");
var transformData = __webpack_require__(/*! ./transformData */ "./node_modules/axios/lib/core/transformData.js");
var isCancel = __webpack_require__(/*! ../cancel/isCancel */ "./node_modules/axios/lib/cancel/isCancel.js");
var defaults = __webpack_require__(/*! ../defaults */ "./node_modules/axios/lib/defaults.js");
var isAbsoluteURL = __webpack_require__(/*! ./../helpers/isAbsoluteURL */ "./node_modules/axios/lib/helpers/isAbsoluteURL.js");
var combineURLs = __webpack_require__(/*! ./../helpers/combineURLs */ "./node_modules/axios/lib/helpers/combineURLs.js");

/**
 * Throws a `Cancel` if cancellation has been requested.
 */
function throwIfCancellationRequested(config) {
  if (config.cancelToken) {
    config.cancelToken.throwIfRequested();
  }
}

/**
 * Dispatch a request to the server using the configured adapter.
 *
 * @param {object} config The config that is to be used for the request
 * @returns {Promise} The Promise to be fulfilled
 */
module.exports = function dispatchRequest(config) {
  throwIfCancellationRequested(config);

  // Support baseURL config
  if (config.baseURL && !isAbsoluteURL(config.url)) {
    config.url = combineURLs(config.baseURL, config.url);
  }

  // Ensure headers exist
  config.headers = config.headers || {};

  // Transform request data
  config.data = transformData(
    config.data,
    config.headers,
    config.transformRequest
  );

  // Flatten headers
  config.headers = utils.merge(
    config.headers.common || {},
    config.headers[config.method] || {},
    config.headers || {}
  );

  utils.forEach(
    ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],
    function cleanHeaderConfig(method) {
      delete config.headers[method];
    }
  );

  var adapter = config.adapter || defaults.adapter;

  return adapter(config).then(function onAdapterResolution(response) {
    throwIfCancellationRequested(config);

    // Transform response data
    response.data = transformData(
      response.data,
      response.headers,
      config.transformResponse
    );

    return response;
  }, function onAdapterRejection(reason) {
    if (!isCancel(reason)) {
      throwIfCancellationRequested(config);

      // Transform response data
      if (reason && reason.response) {
        reason.response.data = transformData(
          reason.response.data,
          reason.response.headers,
          config.transformResponse
        );
      }
    }

    return Promise.reject(reason);
  });
};


/***/ }),

/***/ "./node_modules/axios/lib/core/enhanceError.js":
/*!*****************************************************!*\
  !*** ./node_modules/axios/lib/core/enhanceError.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Update an Error with the specified config, error code, and response.
 *
 * @param {Error} error The error to update.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The error.
 */
module.exports = function enhanceError(error, config, code, request, response) {
  error.config = config;
  if (code) {
    error.code = code;
  }
  error.request = request;
  error.response = response;
  return error;
};


/***/ }),

/***/ "./node_modules/axios/lib/core/settle.js":
/*!***********************************************!*\
  !*** ./node_modules/axios/lib/core/settle.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var createError = __webpack_require__(/*! ./createError */ "./node_modules/axios/lib/core/createError.js");

/**
 * Resolve or reject a Promise based on response status.
 *
 * @param {Function} resolve A function that resolves the promise.
 * @param {Function} reject A function that rejects the promise.
 * @param {object} response The response.
 */
module.exports = function settle(resolve, reject, response) {
  var validateStatus = response.config.validateStatus;
  // Note: status is not exposed by XDomainRequest
  if (!response.status || !validateStatus || validateStatus(response.status)) {
    resolve(response);
  } else {
    reject(createError(
      'Request failed with status code ' + response.status,
      response.config,
      null,
      response.request,
      response
    ));
  }
};


/***/ }),

/***/ "./node_modules/axios/lib/core/transformData.js":
/*!******************************************************!*\
  !*** ./node_modules/axios/lib/core/transformData.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

/**
 * Transform the data for a request or a response
 *
 * @param {Object|String} data The data to be transformed
 * @param {Array} headers The headers for the request or response
 * @param {Array|Function} fns A single function or Array of functions
 * @returns {*} The resulting transformed data
 */
module.exports = function transformData(data, headers, fns) {
  /*eslint no-param-reassign:0*/
  utils.forEach(fns, function transform(fn) {
    data = fn(data, headers);
  });

  return data;
};


/***/ }),

/***/ "./node_modules/axios/lib/defaults.js":
/*!********************************************!*\
  !*** ./node_modules/axios/lib/defaults.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

var utils = __webpack_require__(/*! ./utils */ "./node_modules/axios/lib/utils.js");
var normalizeHeaderName = __webpack_require__(/*! ./helpers/normalizeHeaderName */ "./node_modules/axios/lib/helpers/normalizeHeaderName.js");

var DEFAULT_CONTENT_TYPE = {
  'Content-Type': 'application/x-www-form-urlencoded'
};

function setContentTypeIfUnset(headers, value) {
  if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {
    headers['Content-Type'] = value;
  }
}

function getDefaultAdapter() {
  var adapter;
  if (typeof XMLHttpRequest !== 'undefined') {
    // For browsers use XHR adapter
    adapter = __webpack_require__(/*! ./adapters/xhr */ "./node_modules/axios/lib/adapters/xhr.js");
  } else if (typeof process !== 'undefined') {
    // For node use HTTP adapter
    adapter = __webpack_require__(/*! ./adapters/http */ "./node_modules/axios/lib/adapters/xhr.js");
  }
  return adapter;
}

var defaults = {
  adapter: getDefaultAdapter(),

  transformRequest: [function transformRequest(data, headers) {
    normalizeHeaderName(headers, 'Content-Type');
    if (utils.isFormData(data) ||
      utils.isArrayBuffer(data) ||
      utils.isBuffer(data) ||
      utils.isStream(data) ||
      utils.isFile(data) ||
      utils.isBlob(data)
    ) {
      return data;
    }
    if (utils.isArrayBufferView(data)) {
      return data.buffer;
    }
    if (utils.isURLSearchParams(data)) {
      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');
      return data.toString();
    }
    if (utils.isObject(data)) {
      setContentTypeIfUnset(headers, 'application/json;charset=utf-8');
      return JSON.stringify(data);
    }
    return data;
  }],

  transformResponse: [function transformResponse(data) {
    /*eslint no-param-reassign:0*/
    if (typeof data === 'string') {
      try {
        data = JSON.parse(data);
      } catch (e) { /* Ignore */ }
    }
    return data;
  }],

  /**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */
  timeout: 0,

  xsrfCookieName: 'XSRF-TOKEN',
  xsrfHeaderName: 'X-XSRF-TOKEN',

  maxContentLength: -1,

  validateStatus: function validateStatus(status) {
    return status >= 200 && status < 300;
  }
};

defaults.headers = {
  common: {
    'Accept': 'application/json, text/plain, */*'
  }
};

utils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
  defaults.headers[method] = {};
});

utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
});

module.exports = defaults;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../process/browser.js */ "./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/axios/lib/helpers/bind.js":
/*!************************************************!*\
  !*** ./node_modules/axios/lib/helpers/bind.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function bind(fn, thisArg) {
  return function wrap() {
    var args = new Array(arguments.length);
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }
    return fn.apply(thisArg, args);
  };
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/btoa.js":
/*!************************************************!*\
  !*** ./node_modules/axios/lib/helpers/btoa.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// btoa polyfill for IE<10 courtesy https://github.com/davidchambers/Base64.js

var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

function E() {
  this.message = 'String contains an invalid character';
}
E.prototype = new Error;
E.prototype.code = 5;
E.prototype.name = 'InvalidCharacterError';

function btoa(input) {
  var str = String(input);
  var output = '';
  for (
    // initialize result and counter
    var block, charCode, idx = 0, map = chars;
    // if the next str index does not exist:
    //   change the mapping table to "="
    //   check if d has no fractional digits
    str.charAt(idx | 0) || (map = '=', idx % 1);
    // "8 - idx % 1 * 8" generates the sequence 2, 4, 6, 8
    output += map.charAt(63 & block >> 8 - idx % 1 * 8)
  ) {
    charCode = str.charCodeAt(idx += 3 / 4);
    if (charCode > 0xFF) {
      throw new E();
    }
    block = block << 8 | charCode;
  }
  return output;
}

module.exports = btoa;


/***/ }),

/***/ "./node_modules/axios/lib/helpers/buildURL.js":
/*!****************************************************!*\
  !*** ./node_modules/axios/lib/helpers/buildURL.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

function encode(val) {
  return encodeURIComponent(val).
    replace(/%40/gi, '@').
    replace(/%3A/gi, ':').
    replace(/%24/g, '$').
    replace(/%2C/gi, ',').
    replace(/%20/g, '+').
    replace(/%5B/gi, '[').
    replace(/%5D/gi, ']');
}

/**
 * Build a URL by appending params to the end
 *
 * @param {string} url The base of the url (e.g., http://www.google.com)
 * @param {object} [params] The params to be appended
 * @returns {string} The formatted url
 */
module.exports = function buildURL(url, params, paramsSerializer) {
  /*eslint no-param-reassign:0*/
  if (!params) {
    return url;
  }

  var serializedParams;
  if (paramsSerializer) {
    serializedParams = paramsSerializer(params);
  } else if (utils.isURLSearchParams(params)) {
    serializedParams = params.toString();
  } else {
    var parts = [];

    utils.forEach(params, function serialize(val, key) {
      if (val === null || typeof val === 'undefined') {
        return;
      }

      if (utils.isArray(val)) {
        key = key + '[]';
      } else {
        val = [val];
      }

      utils.forEach(val, function parseValue(v) {
        if (utils.isDate(v)) {
          v = v.toISOString();
        } else if (utils.isObject(v)) {
          v = JSON.stringify(v);
        }
        parts.push(encode(key) + '=' + encode(v));
      });
    });

    serializedParams = parts.join('&');
  }

  if (serializedParams) {
    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
  }

  return url;
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/combineURLs.js":
/*!*******************************************************!*\
  !*** ./node_modules/axios/lib/helpers/combineURLs.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Creates a new URL by combining the specified URLs
 *
 * @param {string} baseURL The base URL
 * @param {string} relativeURL The relative URL
 * @returns {string} The combined URL
 */
module.exports = function combineURLs(baseURL, relativeURL) {
  return relativeURL
    ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '')
    : baseURL;
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/cookies.js":
/*!***************************************************!*\
  !*** ./node_modules/axios/lib/helpers/cookies.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

module.exports = (
  utils.isStandardBrowserEnv() ?

  // Standard browser envs support document.cookie
  (function standardBrowserEnv() {
    return {
      write: function write(name, value, expires, path, domain, secure) {
        var cookie = [];
        cookie.push(name + '=' + encodeURIComponent(value));

        if (utils.isNumber(expires)) {
          cookie.push('expires=' + new Date(expires).toGMTString());
        }

        if (utils.isString(path)) {
          cookie.push('path=' + path);
        }

        if (utils.isString(domain)) {
          cookie.push('domain=' + domain);
        }

        if (secure === true) {
          cookie.push('secure');
        }

        document.cookie = cookie.join('; ');
      },

      read: function read(name) {
        var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
        return (match ? decodeURIComponent(match[3]) : null);
      },

      remove: function remove(name) {
        this.write(name, '', Date.now() - 86400000);
      }
    };
  })() :

  // Non standard browser env (web workers, react-native) lack needed support.
  (function nonStandardBrowserEnv() {
    return {
      write: function write() {},
      read: function read() { return null; },
      remove: function remove() {}
    };
  })()
);


/***/ }),

/***/ "./node_modules/axios/lib/helpers/isAbsoluteURL.js":
/*!*********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/isAbsoluteURL.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Determines whether the specified URL is absolute
 *
 * @param {string} url The URL to test
 * @returns {boolean} True if the specified URL is absolute, otherwise false
 */
module.exports = function isAbsoluteURL(url) {
  // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
  // by any combination of letters, digits, plus, period, or hyphen.
  return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url);
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/isURLSameOrigin.js":
/*!***********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/isURLSameOrigin.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

module.exports = (
  utils.isStandardBrowserEnv() ?

  // Standard browser envs have full support of the APIs needed to test
  // whether the request URL is of the same origin as current location.
  (function standardBrowserEnv() {
    var msie = /(msie|trident)/i.test(navigator.userAgent);
    var urlParsingNode = document.createElement('a');
    var originURL;

    /**
    * Parse a URL to discover it's components
    *
    * @param {String} url The URL to be parsed
    * @returns {Object}
    */
    function resolveURL(url) {
      var href = url;

      if (msie) {
        // IE needs attribute set twice to normalize properties
        urlParsingNode.setAttribute('href', href);
        href = urlParsingNode.href;
      }

      urlParsingNode.setAttribute('href', href);

      // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
      return {
        href: urlParsingNode.href,
        protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
        host: urlParsingNode.host,
        search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
        hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
        hostname: urlParsingNode.hostname,
        port: urlParsingNode.port,
        pathname: (urlParsingNode.pathname.charAt(0) === '/') ?
                  urlParsingNode.pathname :
                  '/' + urlParsingNode.pathname
      };
    }

    originURL = resolveURL(window.location.href);

    /**
    * Determine if a URL shares the same origin as the current location
    *
    * @param {String} requestURL The URL to test
    * @returns {boolean} True if URL shares the same origin, otherwise false
    */
    return function isURLSameOrigin(requestURL) {
      var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;
      return (parsed.protocol === originURL.protocol &&
            parsed.host === originURL.host);
    };
  })() :

  // Non standard browser envs (web workers, react-native) lack needed support.
  (function nonStandardBrowserEnv() {
    return function isURLSameOrigin() {
      return true;
    };
  })()
);


/***/ }),

/***/ "./node_modules/axios/lib/helpers/normalizeHeaderName.js":
/*!***************************************************************!*\
  !*** ./node_modules/axios/lib/helpers/normalizeHeaderName.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ../utils */ "./node_modules/axios/lib/utils.js");

module.exports = function normalizeHeaderName(headers, normalizedName) {
  utils.forEach(headers, function processHeader(value, name) {
    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
      headers[normalizedName] = value;
      delete headers[name];
    }
  });
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/parseHeaders.js":
/*!********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/parseHeaders.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

// Headers whose duplicates are ignored by node
// c.f. https://nodejs.org/api/http.html#http_message_headers
var ignoreDuplicateOf = [
  'age', 'authorization', 'content-length', 'content-type', 'etag',
  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',
  'last-modified', 'location', 'max-forwards', 'proxy-authorization',
  'referer', 'retry-after', 'user-agent'
];

/**
 * Parse headers into an object
 *
 * ```
 * Date: Wed, 27 Aug 2014 08:58:49 GMT
 * Content-Type: application/json
 * Connection: keep-alive
 * Transfer-Encoding: chunked
 * ```
 *
 * @param {String} headers Headers needing to be parsed
 * @returns {Object} Headers parsed into an object
 */
module.exports = function parseHeaders(headers) {
  var parsed = {};
  var key;
  var val;
  var i;

  if (!headers) { return parsed; }

  utils.forEach(headers.split('\n'), function parser(line) {
    i = line.indexOf(':');
    key = utils.trim(line.substr(0, i)).toLowerCase();
    val = utils.trim(line.substr(i + 1));

    if (key) {
      if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
        return;
      }
      if (key === 'set-cookie') {
        parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
      } else {
        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
      }
    }
  });

  return parsed;
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/spread.js":
/*!**************************************************!*\
  !*** ./node_modules/axios/lib/helpers/spread.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Syntactic sugar for invoking a function and expanding an array for arguments.
 *
 * Common use case would be to use `Function.prototype.apply`.
 *
 *  ```js
 *  function f(x, y, z) {}
 *  var args = [1, 2, 3];
 *  f.apply(null, args);
 *  ```
 *
 * With `spread` this example can be re-written.
 *
 *  ```js
 *  spread(function(x, y, z) {})([1, 2, 3]);
 *  ```
 *
 * @param {Function} callback
 * @returns {Function}
 */
module.exports = function spread(callback) {
  return function wrap(arr) {
    return callback.apply(null, arr);
  };
};


/***/ }),

/***/ "./node_modules/axios/lib/utils.js":
/*!*****************************************!*\
  !*** ./node_modules/axios/lib/utils.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var bind = __webpack_require__(/*! ./helpers/bind */ "./node_modules/axios/lib/helpers/bind.js");
var isBuffer = __webpack_require__(/*! is-buffer */ "./node_modules/is-buffer/index.js");

/*global toString:true*/

// utils is a library of generic helper functions non-specific to axios

var toString = Object.prototype.toString;

/**
 * Determine if a value is an Array
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Array, otherwise false
 */
function isArray(val) {
  return toString.call(val) === '[object Array]';
}

/**
 * Determine if a value is an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
 */
function isArrayBuffer(val) {
  return toString.call(val) === '[object ArrayBuffer]';
}

/**
 * Determine if a value is a FormData
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an FormData, otherwise false
 */
function isFormData(val) {
  return (typeof FormData !== 'undefined') && (val instanceof FormData);
}

/**
 * Determine if a value is a view on an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
 */
function isArrayBufferView(val) {
  var result;
  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {
    result = ArrayBuffer.isView(val);
  } else {
    result = (val) && (val.buffer) && (val.buffer instanceof ArrayBuffer);
  }
  return result;
}

/**
 * Determine if a value is a String
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a String, otherwise false
 */
function isString(val) {
  return typeof val === 'string';
}

/**
 * Determine if a value is a Number
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Number, otherwise false
 */
function isNumber(val) {
  return typeof val === 'number';
}

/**
 * Determine if a value is undefined
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if the value is undefined, otherwise false
 */
function isUndefined(val) {
  return typeof val === 'undefined';
}

/**
 * Determine if a value is an Object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Object, otherwise false
 */
function isObject(val) {
  return val !== null && typeof val === 'object';
}

/**
 * Determine if a value is a Date
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Date, otherwise false
 */
function isDate(val) {
  return toString.call(val) === '[object Date]';
}

/**
 * Determine if a value is a File
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a File, otherwise false
 */
function isFile(val) {
  return toString.call(val) === '[object File]';
}

/**
 * Determine if a value is a Blob
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Blob, otherwise false
 */
function isBlob(val) {
  return toString.call(val) === '[object Blob]';
}

/**
 * Determine if a value is a Function
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Function, otherwise false
 */
function isFunction(val) {
  return toString.call(val) === '[object Function]';
}

/**
 * Determine if a value is a Stream
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Stream, otherwise false
 */
function isStream(val) {
  return isObject(val) && isFunction(val.pipe);
}

/**
 * Determine if a value is a URLSearchParams object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
 */
function isURLSearchParams(val) {
  return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;
}

/**
 * Trim excess whitespace off the beginning and end of a string
 *
 * @param {String} str The String to trim
 * @returns {String} The String freed of excess whitespace
 */
function trim(str) {
  return str.replace(/^\s*/, '').replace(/\s*$/, '');
}

/**
 * Determine if we're running in a standard browser environment
 *
 * This allows axios to run in a web worker, and react-native.
 * Both environments support XMLHttpRequest, but not fully standard globals.
 *
 * web workers:
 *  typeof window -> undefined
 *  typeof document -> undefined
 *
 * react-native:
 *  navigator.product -> 'ReactNative'
 */
function isStandardBrowserEnv() {
  if (typeof navigator !== 'undefined' && navigator.product === 'ReactNative') {
    return false;
  }
  return (
    typeof window !== 'undefined' &&
    typeof document !== 'undefined'
  );
}

/**
 * Iterate over an Array or an Object invoking a function for each item.
 *
 * If `obj` is an Array callback will be called passing
 * the value, index, and complete array for each item.
 *
 * If 'obj' is an Object callback will be called passing
 * the value, key, and complete object for each property.
 *
 * @param {Object|Array} obj The object to iterate
 * @param {Function} fn The callback to invoke for each item
 */
function forEach(obj, fn) {
  // Don't bother if no value provided
  if (obj === null || typeof obj === 'undefined') {
    return;
  }

  // Force an array if not already something iterable
  if (typeof obj !== 'object') {
    /*eslint no-param-reassign:0*/
    obj = [obj];
  }

  if (isArray(obj)) {
    // Iterate over array values
    for (var i = 0, l = obj.length; i < l; i++) {
      fn.call(null, obj[i], i, obj);
    }
  } else {
    // Iterate over object keys
    for (var key in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, key)) {
        fn.call(null, obj[key], key, obj);
      }
    }
  }
}

/**
 * Accepts varargs expecting each argument to be an object, then
 * immutably merges the properties of each object and returns result.
 *
 * When multiple objects contain the same key the later object in
 * the arguments list will take precedence.
 *
 * Example:
 *
 * ```js
 * var result = merge({foo: 123}, {foo: 456});
 * console.log(result.foo); // outputs 456
 * ```
 *
 * @param {Object} obj1 Object to merge
 * @returns {Object} Result of all merge properties
 */
function merge(/* obj1, obj2, obj3, ... */) {
  var result = {};
  function assignValue(val, key) {
    if (typeof result[key] === 'object' && typeof val === 'object') {
      result[key] = merge(result[key], val);
    } else {
      result[key] = val;
    }
  }

  for (var i = 0, l = arguments.length; i < l; i++) {
    forEach(arguments[i], assignValue);
  }
  return result;
}

/**
 * Extends object a by mutably adding to it the properties of object b.
 *
 * @param {Object} a The object to be extended
 * @param {Object} b The object to copy properties from
 * @param {Object} thisArg The object to bind function to
 * @return {Object} The resulting value of object a
 */
function extend(a, b, thisArg) {
  forEach(b, function assignValue(val, key) {
    if (thisArg && typeof val === 'function') {
      a[key] = bind(val, thisArg);
    } else {
      a[key] = val;
    }
  });
  return a;
}

module.exports = {
  isArray: isArray,
  isArrayBuffer: isArrayBuffer,
  isBuffer: isBuffer,
  isFormData: isFormData,
  isArrayBufferView: isArrayBufferView,
  isString: isString,
  isNumber: isNumber,
  isObject: isObject,
  isUndefined: isUndefined,
  isDate: isDate,
  isFile: isFile,
  isBlob: isBlob,
  isFunction: isFunction,
  isStream: isStream,
  isURLSearchParams: isURLSearchParams,
  isStandardBrowserEnv: isStandardBrowserEnv,
  forEach: forEach,
  merge: merge,
  extend: extend,
  trim: trim
};


/***/ }),

/***/ "./node_modules/clipboard/dist/clipboard.js":
/*!**************************************************!*\
  !*** ./node_modules/clipboard/dist/clipboard.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/*!
 * clipboard.js v2.0.1
 * https://zenorocha.github.io/clipboard.js
 * 
 * Licensed MIT © Zeno Rocha
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(true)
		module.exports = factory();
	else {}
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 3);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {
    if (true) {
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [module, __webpack_require__(7)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    } else { var mod; }
})(this, function (module, _select) {
    'use strict';

    var _select2 = _interopRequireDefault(_select);

    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }

    var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
        return typeof obj;
    } : function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    var _createClass = function () {
        function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
            }
        }

        return function (Constructor, protoProps, staticProps) {
            if (protoProps) defineProperties(Constructor.prototype, protoProps);
            if (staticProps) defineProperties(Constructor, staticProps);
            return Constructor;
        };
    }();

    var ClipboardAction = function () {
        /**
         * @param {Object} options
         */
        function ClipboardAction(options) {
            _classCallCheck(this, ClipboardAction);

            this.resolveOptions(options);
            this.initSelection();
        }

        /**
         * Defines base properties passed from constructor.
         * @param {Object} options
         */


        _createClass(ClipboardAction, [{
            key: 'resolveOptions',
            value: function resolveOptions() {
                var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

                this.action = options.action;
                this.container = options.container;
                this.emitter = options.emitter;
                this.target = options.target;
                this.text = options.text;
                this.trigger = options.trigger;

                this.selectedText = '';
            }
        }, {
            key: 'initSelection',
            value: function initSelection() {
                if (this.text) {
                    this.selectFake();
                } else if (this.target) {
                    this.selectTarget();
                }
            }
        }, {
            key: 'selectFake',
            value: function selectFake() {
                var _this = this;

                var isRTL = document.documentElement.getAttribute('dir') == 'rtl';

                this.removeFake();

                this.fakeHandlerCallback = function () {
                    return _this.removeFake();
                };
                this.fakeHandler = this.container.addEventListener('click', this.fakeHandlerCallback) || true;

                this.fakeElem = document.createElement('textarea');
                // Prevent zooming on iOS
                this.fakeElem.style.fontSize = '12pt';
                // Reset box model
                this.fakeElem.style.border = '0';
                this.fakeElem.style.padding = '0';
                this.fakeElem.style.margin = '0';
                // Move element out of screen horizontally
                this.fakeElem.style.position = 'absolute';
                this.fakeElem.style[isRTL ? 'right' : 'left'] = '-9999px';
                // Move element to the same position vertically
                var yPosition = window.pageYOffset || document.documentElement.scrollTop;
                this.fakeElem.style.top = yPosition + 'px';

                this.fakeElem.setAttribute('readonly', '');
                this.fakeElem.value = this.text;

                this.container.appendChild(this.fakeElem);

                this.selectedText = (0, _select2.default)(this.fakeElem);
                this.copyText();
            }
        }, {
            key: 'removeFake',
            value: function removeFake() {
                if (this.fakeHandler) {
                    this.container.removeEventListener('click', this.fakeHandlerCallback);
                    this.fakeHandler = null;
                    this.fakeHandlerCallback = null;
                }

                if (this.fakeElem) {
                    this.container.removeChild(this.fakeElem);
                    this.fakeElem = null;
                }
            }
        }, {
            key: 'selectTarget',
            value: function selectTarget() {
                this.selectedText = (0, _select2.default)(this.target);
                this.copyText();
            }
        }, {
            key: 'copyText',
            value: function copyText() {
                var succeeded = void 0;

                try {
                    succeeded = document.execCommand(this.action);
                } catch (err) {
                    succeeded = false;
                }

                this.handleResult(succeeded);
            }
        }, {
            key: 'handleResult',
            value: function handleResult(succeeded) {
                this.emitter.emit(succeeded ? 'success' : 'error', {
                    action: this.action,
                    text: this.selectedText,
                    trigger: this.trigger,
                    clearSelection: this.clearSelection.bind(this)
                });
            }
        }, {
            key: 'clearSelection',
            value: function clearSelection() {
                if (this.trigger) {
                    this.trigger.focus();
                }

                window.getSelection().removeAllRanges();
            }
        }, {
            key: 'destroy',
            value: function destroy() {
                this.removeFake();
            }
        }, {
            key: 'action',
            set: function set() {
                var action = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'copy';

                this._action = action;

                if (this._action !== 'copy' && this._action !== 'cut') {
                    throw new Error('Invalid "action" value, use either "copy" or "cut"');
                }
            },
            get: function get() {
                return this._action;
            }
        }, {
            key: 'target',
            set: function set(target) {
                if (target !== undefined) {
                    if (target && (typeof target === 'undefined' ? 'undefined' : _typeof(target)) === 'object' && target.nodeType === 1) {
                        if (this.action === 'copy' && target.hasAttribute('disabled')) {
                            throw new Error('Invalid "target" attribute. Please use "readonly" instead of "disabled" attribute');
                        }

                        if (this.action === 'cut' && (target.hasAttribute('readonly') || target.hasAttribute('disabled'))) {
                            throw new Error('Invalid "target" attribute. You can\'t cut text from elements with "readonly" or "disabled" attributes');
                        }

                        this._target = target;
                    } else {
                        throw new Error('Invalid "target" value, use a valid Element');
                    }
                }
            },
            get: function get() {
                return this._target;
            }
        }]);

        return ClipboardAction;
    }();

    module.exports = ClipboardAction;
});

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

var is = __webpack_require__(6);
var delegate = __webpack_require__(5);

/**
 * Validates all params and calls the right
 * listener function based on its target type.
 *
 * @param {String|HTMLElement|HTMLCollection|NodeList} target
 * @param {String} type
 * @param {Function} callback
 * @return {Object}
 */
function listen(target, type, callback) {
    if (!target && !type && !callback) {
        throw new Error('Missing required arguments');
    }

    if (!is.string(type)) {
        throw new TypeError('Second argument must be a String');
    }

    if (!is.fn(callback)) {
        throw new TypeError('Third argument must be a Function');
    }

    if (is.node(target)) {
        return listenNode(target, type, callback);
    }
    else if (is.nodeList(target)) {
        return listenNodeList(target, type, callback);
    }
    else if (is.string(target)) {
        return listenSelector(target, type, callback);
    }
    else {
        throw new TypeError('First argument must be a String, HTMLElement, HTMLCollection, or NodeList');
    }
}

/**
 * Adds an event listener to a HTML element
 * and returns a remove listener function.
 *
 * @param {HTMLElement} node
 * @param {String} type
 * @param {Function} callback
 * @return {Object}
 */
function listenNode(node, type, callback) {
    node.addEventListener(type, callback);

    return {
        destroy: function() {
            node.removeEventListener(type, callback);
        }
    }
}

/**
 * Add an event listener to a list of HTML elements
 * and returns a remove listener function.
 *
 * @param {NodeList|HTMLCollection} nodeList
 * @param {String} type
 * @param {Function} callback
 * @return {Object}
 */
function listenNodeList(nodeList, type, callback) {
    Array.prototype.forEach.call(nodeList, function(node) {
        node.addEventListener(type, callback);
    });

    return {
        destroy: function() {
            Array.prototype.forEach.call(nodeList, function(node) {
                node.removeEventListener(type, callback);
            });
        }
    }
}

/**
 * Add an event listener to a selector
 * and returns a remove listener function.
 *
 * @param {String} selector
 * @param {String} type
 * @param {Function} callback
 * @return {Object}
 */
function listenSelector(selector, type, callback) {
    return delegate(document.body, selector, type, callback);
}

module.exports = listen;


/***/ }),
/* 2 */
/***/ (function(module, exports) {

function E () {
  // Keep this empty so it's easier to inherit from
  // (via https://github.com/lipsmack from https://github.com/scottcorgan/tiny-emitter/issues/3)
}

E.prototype = {
  on: function (name, callback, ctx) {
    var e = this.e || (this.e = {});

    (e[name] || (e[name] = [])).push({
      fn: callback,
      ctx: ctx
    });

    return this;
  },

  once: function (name, callback, ctx) {
    var self = this;
    function listener () {
      self.off(name, listener);
      callback.apply(ctx, arguments);
    };

    listener._ = callback
    return this.on(name, listener, ctx);
  },

  emit: function (name) {
    var data = [].slice.call(arguments, 1);
    var evtArr = ((this.e || (this.e = {}))[name] || []).slice();
    var i = 0;
    var len = evtArr.length;

    for (i; i < len; i++) {
      evtArr[i].fn.apply(evtArr[i].ctx, data);
    }

    return this;
  },

  off: function (name, callback) {
    var e = this.e || (this.e = {});
    var evts = e[name];
    var liveEvents = [];

    if (evts && callback) {
      for (var i = 0, len = evts.length; i < len; i++) {
        if (evts[i].fn !== callback && evts[i].fn._ !== callback)
          liveEvents.push(evts[i]);
      }
    }

    // Remove event from queue to prevent memory leak
    // Suggested by https://github.com/lazd
    // Ref: https://github.com/scottcorgan/tiny-emitter/commit/c6ebfaa9bc973b33d110a84a307742b7cf94c953#commitcomment-5024910

    (liveEvents.length)
      ? e[name] = liveEvents
      : delete e[name];

    return this;
  }
};

module.exports = E;


/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {
    if (true) {
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [module, __webpack_require__(0), __webpack_require__(2), __webpack_require__(1)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    } else { var mod; }
})(this, function (module, _clipboardAction, _tinyEmitter, _goodListener) {
    'use strict';

    var _clipboardAction2 = _interopRequireDefault(_clipboardAction);

    var _tinyEmitter2 = _interopRequireDefault(_tinyEmitter);

    var _goodListener2 = _interopRequireDefault(_goodListener);

    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }

    var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
        return typeof obj;
    } : function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    var _createClass = function () {
        function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
            }
        }

        return function (Constructor, protoProps, staticProps) {
            if (protoProps) defineProperties(Constructor.prototype, protoProps);
            if (staticProps) defineProperties(Constructor, staticProps);
            return Constructor;
        };
    }();

    function _possibleConstructorReturn(self, call) {
        if (!self) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }

        return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }

    function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        }

        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }

    var Clipboard = function (_Emitter) {
        _inherits(Clipboard, _Emitter);

        /**
         * @param {String|HTMLElement|HTMLCollection|NodeList} trigger
         * @param {Object} options
         */
        function Clipboard(trigger, options) {
            _classCallCheck(this, Clipboard);

            var _this = _possibleConstructorReturn(this, (Clipboard.__proto__ || Object.getPrototypeOf(Clipboard)).call(this));

            _this.resolveOptions(options);
            _this.listenClick(trigger);
            return _this;
        }

        /**
         * Defines if attributes would be resolved using internal setter functions
         * or custom functions that were passed in the constructor.
         * @param {Object} options
         */


        _createClass(Clipboard, [{
            key: 'resolveOptions',
            value: function resolveOptions() {
                var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

                this.action = typeof options.action === 'function' ? options.action : this.defaultAction;
                this.target = typeof options.target === 'function' ? options.target : this.defaultTarget;
                this.text = typeof options.text === 'function' ? options.text : this.defaultText;
                this.container = _typeof(options.container) === 'object' ? options.container : document.body;
            }
        }, {
            key: 'listenClick',
            value: function listenClick(trigger) {
                var _this2 = this;

                this.listener = (0, _goodListener2.default)(trigger, 'click', function (e) {
                    return _this2.onClick(e);
                });
            }
        }, {
            key: 'onClick',
            value: function onClick(e) {
                var trigger = e.delegateTarget || e.currentTarget;

                if (this.clipboardAction) {
                    this.clipboardAction = null;
                }

                this.clipboardAction = new _clipboardAction2.default({
                    action: this.action(trigger),
                    target: this.target(trigger),
                    text: this.text(trigger),
                    container: this.container,
                    trigger: trigger,
                    emitter: this
                });
            }
        }, {
            key: 'defaultAction',
            value: function defaultAction(trigger) {
                return getAttributeValue('action', trigger);
            }
        }, {
            key: 'defaultTarget',
            value: function defaultTarget(trigger) {
                var selector = getAttributeValue('target', trigger);

                if (selector) {
                    return document.querySelector(selector);
                }
            }
        }, {
            key: 'defaultText',
            value: function defaultText(trigger) {
                return getAttributeValue('text', trigger);
            }
        }, {
            key: 'destroy',
            value: function destroy() {
                this.listener.destroy();

                if (this.clipboardAction) {
                    this.clipboardAction.destroy();
                    this.clipboardAction = null;
                }
            }
        }], [{
            key: 'isSupported',
            value: function isSupported() {
                var action = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ['copy', 'cut'];

                var actions = typeof action === 'string' ? [action] : action;
                var support = !!document.queryCommandSupported;

                actions.forEach(function (action) {
                    support = support && !!document.queryCommandSupported(action);
                });

                return support;
            }
        }]);

        return Clipboard;
    }(_tinyEmitter2.default);

    /**
     * Helper function to retrieve attribute value.
     * @param {String} suffix
     * @param {Element} element
     */
    function getAttributeValue(suffix, element) {
        var attribute = 'data-clipboard-' + suffix;

        if (!element.hasAttribute(attribute)) {
            return;
        }

        return element.getAttribute(attribute);
    }

    module.exports = Clipboard;
});

/***/ }),
/* 4 */
/***/ (function(module, exports) {

var DOCUMENT_NODE_TYPE = 9;

/**
 * A polyfill for Element.matches()
 */
if (typeof Element !== 'undefined' && !Element.prototype.matches) {
    var proto = Element.prototype;

    proto.matches = proto.matchesSelector ||
                    proto.mozMatchesSelector ||
                    proto.msMatchesSelector ||
                    proto.oMatchesSelector ||
                    proto.webkitMatchesSelector;
}

/**
 * Finds the closest parent that matches a selector.
 *
 * @param {Element} element
 * @param {String} selector
 * @return {Function}
 */
function closest (element, selector) {
    while (element && element.nodeType !== DOCUMENT_NODE_TYPE) {
        if (typeof element.matches === 'function' &&
            element.matches(selector)) {
          return element;
        }
        element = element.parentNode;
    }
}

module.exports = closest;


/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

var closest = __webpack_require__(4);

/**
 * Delegates event to a selector.
 *
 * @param {Element} element
 * @param {String} selector
 * @param {String} type
 * @param {Function} callback
 * @param {Boolean} useCapture
 * @return {Object}
 */
function _delegate(element, selector, type, callback, useCapture) {
    var listenerFn = listener.apply(this, arguments);

    element.addEventListener(type, listenerFn, useCapture);

    return {
        destroy: function() {
            element.removeEventListener(type, listenerFn, useCapture);
        }
    }
}

/**
 * Delegates event to a selector.
 *
 * @param {Element|String|Array} [elements]
 * @param {String} selector
 * @param {String} type
 * @param {Function} callback
 * @param {Boolean} useCapture
 * @return {Object}
 */
function delegate(elements, selector, type, callback, useCapture) {
    // Handle the regular Element usage
    if (typeof elements.addEventListener === 'function') {
        return _delegate.apply(null, arguments);
    }

    // Handle Element-less usage, it defaults to global delegation
    if (typeof type === 'function') {
        // Use `document` as the first parameter, then apply arguments
        // This is a short way to .unshift `arguments` without running into deoptimizations
        return _delegate.bind(null, document).apply(null, arguments);
    }

    // Handle Selector-based usage
    if (typeof elements === 'string') {
        elements = document.querySelectorAll(elements);
    }

    // Handle Array-like based usage
    return Array.prototype.map.call(elements, function (element) {
        return _delegate(element, selector, type, callback, useCapture);
    });
}

/**
 * Finds closest match and invokes callback.
 *
 * @param {Element} element
 * @param {String} selector
 * @param {String} type
 * @param {Function} callback
 * @return {Function}
 */
function listener(element, selector, type, callback) {
    return function(e) {
        e.delegateTarget = closest(e.target, selector);

        if (e.delegateTarget) {
            callback.call(element, e);
        }
    }
}

module.exports = delegate;


/***/ }),
/* 6 */
/***/ (function(module, exports) {

/**
 * Check if argument is a HTML element.
 *
 * @param {Object} value
 * @return {Boolean}
 */
exports.node = function(value) {
    return value !== undefined
        && value instanceof HTMLElement
        && value.nodeType === 1;
};

/**
 * Check if argument is a list of HTML elements.
 *
 * @param {Object} value
 * @return {Boolean}
 */
exports.nodeList = function(value) {
    var type = Object.prototype.toString.call(value);

    return value !== undefined
        && (type === '[object NodeList]' || type === '[object HTMLCollection]')
        && ('length' in value)
        && (value.length === 0 || exports.node(value[0]));
};

/**
 * Check if argument is a string.
 *
 * @param {Object} value
 * @return {Boolean}
 */
exports.string = function(value) {
    return typeof value === 'string'
        || value instanceof String;
};

/**
 * Check if argument is a function.
 *
 * @param {Object} value
 * @return {Boolean}
 */
exports.fn = function(value) {
    var type = Object.prototype.toString.call(value);

    return type === '[object Function]';
};


/***/ }),
/* 7 */
/***/ (function(module, exports) {

function select(element) {
    var selectedText;

    if (element.nodeName === 'SELECT') {
        element.focus();

        selectedText = element.value;
    }
    else if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {
        var isReadOnly = element.hasAttribute('readonly');

        if (!isReadOnly) {
            element.setAttribute('readonly', '');
        }

        element.select();
        element.setSelectionRange(0, element.value.length);

        if (!isReadOnly) {
            element.removeAttribute('readonly');
        }

        selectedText = element.value;
    }
    else {
        if (element.hasAttribute('contenteditable')) {
            element.focus();
        }

        var selection = window.getSelection();
        var range = document.createRange();

        range.selectNodeContents(element);
        selection.removeAllRanges();
        selection.addRange(range);

        selectedText = selection.toString();
    }

    return selectedText;
}

module.exports = select;


/***/ })
/******/ ]);
});

/***/ }),

/***/ "./node_modules/core-decorators/es/applyDecorators.js":
/*!************************************************************!*\
  !*** ./node_modules/core-decorators/es/applyDecorators.js ***!
  \************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return applyDecorators; });
var defineProperty = Object.defineProperty,
    getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;


function applyDecorators(Class, props) {
  var prototype = Class.prototype;


  for (var key in props) {
    var decorators = props[key];

    for (var i = 0, l = decorators.length; i < l; i++) {
      var decorator = decorators[i];

      defineProperty(prototype, key, decorator(prototype, key, getOwnPropertyDescriptor(prototype, key)));
    }
  }

  return Class;
}

/***/ }),

/***/ "./node_modules/core-decorators/es/autobind.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-decorators/es/autobind.js ***!
  \*****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return autobind; });
/* harmony import */ var _private_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./private/utils */ "./node_modules/core-decorators/es/private/utils.js");
function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }


var defineProperty = Object.defineProperty,
    getPrototypeOf = Object.getPrototypeOf;


var mapStore = void 0;

function getBoundSuper(obj, fn) {
  if (typeof WeakMap === 'undefined') {
    throw new Error('Using @autobind on ' + fn.name + '() requires WeakMap support due to its use of super.' + fn.name + '()\n      See https://github.com/jayphelps/core-decorators.js/issues/20');
  }

  if (!mapStore) {
    mapStore = new WeakMap();
  }

  if (mapStore.has(obj) === false) {
    mapStore.set(obj, new WeakMap());
  }

  var superStore = mapStore.get(obj);

  if (superStore.has(fn) === false) {
    superStore.set(fn, Object(_private_utils__WEBPACK_IMPORTED_MODULE_0__["bind"])(fn, obj));
  }

  return superStore.get(fn);
}

function autobindClass(klass) {
  var descs = Object(_private_utils__WEBPACK_IMPORTED_MODULE_0__["getOwnPropertyDescriptors"])(klass.prototype);
  var keys = Object(_private_utils__WEBPACK_IMPORTED_MODULE_0__["getOwnKeys"])(descs);

  for (var i = 0, l = keys.length; i < l; i++) {
    var key = keys[i];
    var desc = descs[key];

    if (typeof desc.value !== 'function' || key === 'constructor') {
      continue;
    }

    defineProperty(klass.prototype, key, autobindMethod(klass.prototype, key, desc));
  }
}

function autobindMethod(target, key, _ref) {
  var fn = _ref.value,
      configurable = _ref.configurable,
      enumerable = _ref.enumerable;

  if (typeof fn !== 'function') {
    throw new SyntaxError('@autobind can only be used on functions, not: ' + fn);
  }

  var constructor = target.constructor;


  return {
    configurable: configurable,
    enumerable: enumerable,

    get: function get() {
      // Class.prototype.key lookup
      // Someone accesses the property directly on the prototype on which it is
      // actually defined on, i.e. Class.prototype.hasOwnProperty(key)
      if (this === target) {
        return fn;
      }

      // Class.prototype.key lookup
      // Someone accesses the property directly on a prototype but it was found
      // up the chain, not defined directly on it
      // i.e. Class.prototype.hasOwnProperty(key) == false && key in Class.prototype
      if (this.constructor !== constructor && getPrototypeOf(this).constructor === constructor) {
        return fn;
      }

      // Autobound method calling super.sameMethod() which is also autobound and so on.
      if (this.constructor !== constructor && key in this.constructor.prototype) {
        return getBoundSuper(this, fn);
      }

      var boundFn = Object(_private_utils__WEBPACK_IMPORTED_MODULE_0__["bind"])(fn, this);

      defineProperty(this, key, {
        configurable: true,
        writable: true,
        // NOT enumerable when it's a bound method
        enumerable: false,
        value: boundFn
      });

      return boundFn;
    },

    set: Object(_private_utils__WEBPACK_IMPORTED_MODULE_0__["createDefaultSetter"])(key)
  };
}

function handle(args) {
  if (args.length === 1) {
    return autobindClass.apply(undefined, _toConsumableArray(args));
  } else {
    return autobindMethod.apply(undefined, _toConsumableArray(args));
  }
}

function autobind() {
  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  if (args.length === 0) {
    return function () {
      return handle(arguments);
    };
  } else {
    return handle(args);
  }
}

/***/ }),

/***/ "./node_modules/core-decorators/es/core-decorators.js":
/*!************************************************************!*\
  !*** ./node_modules/core-decorators/es/core-decorators.js ***!
  \************************************************************/
/*! exports provided: override, deprecate, deprecated, suppressWarnings, memoize, autobind, readonly, enumerable, nonenumerable, nonconfigurable, debounce, throttle, decorate, mixin, mixins, lazyInitialize, time, extendDescriptor, profile, applyDecorators */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _override__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./override */ "./node_modules/core-decorators/es/override.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "override", function() { return _override__WEBPACK_IMPORTED_MODULE_0__["default"]; });

/* harmony import */ var _deprecate__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./deprecate */ "./node_modules/core-decorators/es/deprecate.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "deprecate", function() { return _deprecate__WEBPACK_IMPORTED_MODULE_1__["default"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "deprecated", function() { return _deprecate__WEBPACK_IMPORTED_MODULE_1__["default"]; });

/* harmony import */ var _suppress_warnings__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./suppress-warnings */ "./node_modules/core-decorators/es/suppress-warnings.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "suppressWarnings", function() { return _suppress_warnings__WEBPACK_IMPORTED_MODULE_2__["default"]; });

/* harmony import */ var _memoize__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./memoize */ "./node_modules/core-decorators/es/memoize.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "memoize", function() { return _memoize__WEBPACK_IMPORTED_MODULE_3__["default"]; });

/* harmony import */ var _autobind__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./autobind */ "./node_modules/core-decorators/es/autobind.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "autobind", function() { return _autobind__WEBPACK_IMPORTED_MODULE_4__["default"]; });

/* harmony import */ var _readonly__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./readonly */ "./node_modules/core-decorators/es/readonly.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "readonly", function() { return _readonly__WEBPACK_IMPORTED_MODULE_5__["default"]; });

/* harmony import */ var _enumerable__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./enumerable */ "./node_modules/core-decorators/es/enumerable.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "enumerable", function() { return _enumerable__WEBPACK_IMPORTED_MODULE_6__["default"]; });

/* harmony import */ var _nonenumerable__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./nonenumerable */ "./node_modules/core-decorators/es/nonenumerable.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "nonenumerable", function() { return _nonenumerable__WEBPACK_IMPORTED_MODULE_7__["default"]; });

/* harmony import */ var _nonconfigurable__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./nonconfigurable */ "./node_modules/core-decorators/es/nonconfigurable.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "nonconfigurable", function() { return _nonconfigurable__WEBPACK_IMPORTED_MODULE_8__["default"]; });

/* harmony import */ var _debounce__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./debounce */ "./node_modules/core-decorators/es/debounce.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "debounce", function() { return _debounce__WEBPACK_IMPORTED_MODULE_9__["default"]; });

/* harmony import */ var _throttle__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./throttle */ "./node_modules/core-decorators/es/throttle.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "throttle", function() { return _throttle__WEBPACK_IMPORTED_MODULE_10__["default"]; });

/* harmony import */ var _decorate__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./decorate */ "./node_modules/core-decorators/es/decorate.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "decorate", function() { return _decorate__WEBPACK_IMPORTED_MODULE_11__["default"]; });

/* harmony import */ var _mixin__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./mixin */ "./node_modules/core-decorators/es/mixin.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "mixin", function() { return _mixin__WEBPACK_IMPORTED_MODULE_12__["default"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "mixins", function() { return _mixin__WEBPACK_IMPORTED_MODULE_12__["default"]; });

/* harmony import */ var _lazy_initialize__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./lazy-initialize */ "./node_modules/core-decorators/es/lazy-initialize.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "lazyInitialize", function() { return _lazy_initialize__WEBPACK_IMPORTED_MODULE_13__["default"]; });

/* harmony import */ var _time__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./time */ "./node_modules/core-decorators/es/time.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "time", function() { return _time__WEBPACK_IMPORTED_MODULE_14__["default"]; });

/* harmony import */ var _extendDescriptor__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./extendDescriptor */ "./node_modules/core-decorators/es/extendDescriptor.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "extendDescriptor", function() { return _extendDescriptor__WEBPACK_IMPORTED_MODULE_15__["default"]; });

/* harmony import */ var _profile__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./profile */ "./node_modules/core-decorators/es/profile.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "profile", function() { return _profile__WEBPACK_IMPORTED_MODULE_16__["default"]; });

/* harmony import */ var _applyDecorators__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./applyDecorators */ "./node_modules/core-decorators/es/applyDecorators.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "applyDecorators", function() { return _applyDecorators__WEBPACK_IMPORTED_MODULE_17__["default"]; });

/**
 * core-decorators.js
 * (c) 2017 Jay Phelps and contributors
 * MIT Licensed
 * https://github.com/jayphelps/core-decorators.js
 * @license
 */


















// Helper to apply decorators to a class without transpiler support


/***/ }),

/***/ "./node_modules/core-decorators/es/debounce.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-decorators/es/debounce.js ***!
  \*****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return debounce; });
/* harmony import */ var _private_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./private/utils */ "./node_modules/core-decorators/es/private/utils.js");
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();



var DEFAULT_TIMEOUT = 300;

function handleDescriptor(target, key, descriptor, _ref) {
  var _ref2 = _slicedToArray(_ref, 2),
      _ref2$ = _ref2[0],
      wait = _ref2$ === undefined ? DEFAULT_TIMEOUT : _ref2$,
      _ref2$2 = _ref2[1],
      immediate = _ref2$2 === undefined ? false : _ref2$2;

  var callback = descriptor.value;

  if (typeof callback !== 'function') {
    throw new SyntaxError('Only functions can be debounced');
  }

  return _extends({}, descriptor, {
    value: function value() {
      var _this = this;

      var _metaFor = Object(_private_utils__WEBPACK_IMPORTED_MODULE_0__["metaFor"])(this),
          debounceTimeoutIds = _metaFor.debounceTimeoutIds;

      var timeout = debounceTimeoutIds[key];
      var callNow = immediate && !timeout;
      var args = arguments;

      clearTimeout(timeout);

      debounceTimeoutIds[key] = setTimeout(function () {
        delete debounceTimeoutIds[key];
        if (!immediate) {
          callback.apply(_this, args);
        }
      }, wait);

      if (callNow) {
        callback.apply(this, args);
      }
    }
  });
}

function debounce() {
  Object(_private_utils__WEBPACK_IMPORTED_MODULE_0__["internalDeprecation"])('@debounce is deprecated and will be removed shortly. Use @debounce from lodash-decorators.\n\n  https://www.npmjs.com/package/lodash-decorators');

  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  return Object(_private_utils__WEBPACK_IMPORTED_MODULE_0__["decorate"])(handleDescriptor, args);
}

/***/ }),

/***/ "./node_modules/core-decorators/es/decorate.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-decorators/es/decorate.js ***!
  \*****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return decorate; });
/* harmony import */ var _private_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./private/utils */ "./node_modules/core-decorators/es/private/utils.js");
function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _toArray(arr) { return Array.isArray(arr) ? arr : Array.from(arr); }


var defineProperty = Object.defineProperty;


function handleDescriptor(target, key, descriptor, _ref) {
  var _ref2 = _toArray(_ref),
      decorator = _ref2[0],
      args = _ref2.slice(1);

  var configurable = descriptor.configurable,
      enumerable = descriptor.enumerable,
      writable = descriptor.writable;

  var originalGet = descriptor.get;
  var originalSet = descriptor.set;
  var originalValue = descriptor.value;
  var isGetter = !!originalGet;

  return {
    configurable: configurable,
    enumerable: enumerable,
    get: function get() {
      var fn = isGetter ? originalGet.call(this) : originalValue;
      var value = decorator.call.apply(decorator, [this, fn].concat(_toConsumableArray(args)));

      if (isGetter) {
        return value;
      } else {
        var desc = {
          configurable: configurable,
          enumerable: enumerable
        };

        desc.value = value;
        desc.writable = writable;

        defineProperty(this, key, desc);

        return value;
      }
    },

    set: isGetter ? originalSet : Object(_private_utils__WEBPACK_IMPORTED_MODULE_0__["createDefaultSetter"])()
  };
}

function decorate() {
  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  return Object(_private_utils__WEBPACK_IMPORTED_MODULE_0__["decorate"])(handleDescriptor, args);
}

/***/ }),

/***/ "./node_modules/core-decorators/es/deprecate.js":
/*!******************************************************!*\
  !*** ./node_modules/core-decorators/es/deprecate.js ***!
  \******************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return deprecate; });
/* harmony import */ var _private_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./private/utils */ "./node_modules/core-decorators/es/private/utils.js");
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();



var DEFAULT_MSG = 'This function will be removed in future versions.';

function handleDescriptor(target, key, descriptor, _ref) {
  var _ref2 = _slicedToArray(_ref, 2),
      _ref2$ = _ref2[0],
      msg = _ref2$ === undefined ? DEFAULT_MSG : _ref2$,
      _ref2$2 = _ref2[1],
      options = _ref2$2 === undefined ? {} : _ref2$2;

  if (typeof descriptor.value !== 'function') {
    throw new SyntaxError('Only functions can be marked as deprecated');
  }

  var methodSignature = target.constructor.name + '#' + key;

  if (options.url) {
    msg += '\n\n    See ' + options.url + ' for more details.\n\n';
  }

  return _extends({}, descriptor, {
    value: function deprecationWrapper() {
      Object(_private_utils__WEBPACK_IMPORTED_MODULE_0__["warn"])('DEPRECATION ' + methodSignature + ': ' + msg);
      return descriptor.value.apply(this, arguments);
    }
  });
}

function deprecate() {
  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  return Object(_private_utils__WEBPACK_IMPORTED_MODULE_0__["decorate"])(handleDescriptor, args);
}

/***/ }),

/***/ "./node_modules/core-decorators/es/enumerable.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-decorators/es/enumerable.js ***!
  \*******************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return enumerable; });
/* harmony import */ var _private_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./private/utils */ "./node_modules/core-decorators/es/private/utils.js");


function handleDescriptor(target, key, descriptor) {
  descriptor.enumerable = true;
  return descriptor;
}

function enumerable() {
  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  return Object(_private_utils__WEBPACK_IMPORTED_MODULE_0__["decorate"])(handleDescriptor, args);
}

/***/ }),

/***/ "./node_modules/core-decorators/es/extendDescriptor.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-decorators/es/extendDescriptor.js ***!
  \*************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return extendDescriptor; });
/* harmony import */ var _private_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./private/utils */ "./node_modules/core-decorators/es/private/utils.js");
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };


var getPrototypeOf = Object.getPrototypeOf,
    getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;


function handleDescriptor(target, key, descriptor) {
  var superKlass = getPrototypeOf(target);
  var superDesc = getOwnPropertyDescriptor(superKlass, key);

  return _extends({}, superDesc, {
    value: descriptor.value,
    initializer: descriptor.initializer,
    get: descriptor.get || superDesc.get,
    set: descriptor.set || superDesc.set
  });
}

function extendDescriptor() {
  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  return Object(_private_utils__WEBPACK_IMPORTED_MODULE_0__["decorate"])(handleDescriptor, args);
}

/***/ }),

/***/ "./node_modules/core-decorators/es/lazy-initialize.js":
/*!************************************************************!*\
  !*** ./node_modules/core-decorators/es/lazy-initialize.js ***!
  \************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return lazyInitialize; });
/* harmony import */ var _private_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./private/utils */ "./node_modules/core-decorators/es/private/utils.js");

var defineProperty = Object.defineProperty;


function handleDescriptor(target, key, descriptor) {
  var configurable = descriptor.configurable,
      enumerable = descriptor.enumerable,
      initializer = descriptor.initializer,
      value = descriptor.value;

  return {
    configurable: configurable,
    enumerable: enumerable,

    get: function get() {
      // This happens if someone accesses the
      // property directly on the prototype
      if (this === target) {
        return;
      }

      var ret = initializer ? initializer.call(this) : value;

      defineProperty(this, key, {
        configurable: configurable,
        enumerable: enumerable,
        writable: true,
        value: ret
      });

      return ret;
    },


    set: Object(_private_utils__WEBPACK_IMPORTED_MODULE_0__["createDefaultSetter"])(key)
  };
}

function lazyInitialize() {
  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  return Object(_private_utils__WEBPACK_IMPORTED_MODULE_0__["decorate"])(handleDescriptor, args);
}

/***/ }),

/***/ "./node_modules/core-decorators/es/memoize.js":
/*!****************************************************!*\
  !*** ./node_modules/core-decorators/es/memoize.js ***!
  \****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return memoize; });
/* harmony import */ var _private_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./private/utils */ "./node_modules/core-decorators/es/private/utils.js");
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }



function toObject(cache, value) {
  if (value === Object(value)) {
    return value;
  }
  return cache[value] || (cache[value] = {});
}

function applyAndCache(context, fn, args, cache, signature) {
  var ret = fn.apply(context, args);
  cache[signature] = ret;
  return ret;
}

function metaForDescriptor(descriptor) {
  var fn = void 0,
      wrapKey = void 0;

  // This is ugly code, but way faster than other
  // ways I tried that *looked* pretty

  if (descriptor.value) {
    fn = descriptor.value;
    wrapKey = 'value';
  } else if (descriptor.get) {
    fn = descriptor.get;
    wrapKey = 'get';
  } else if (descriptor.set) {
    fn = descriptor.set;
    wrapKey = 'set';
  }

  return { fn: fn, wrapKey: wrapKey };
}

function handleDescriptor(target, key, descriptor) {
  var _metaForDescriptor = metaForDescriptor(descriptor),
      fn = _metaForDescriptor.fn,
      wrapKey = _metaForDescriptor.wrapKey;

  var argumentCache = new WeakMap();
  var signatureCache = Object.create(null);
  var primativeRefCache = Object.create(null);
  var argumentIdCounter = 0;

  return _extends({}, descriptor, _defineProperty({}, wrapKey, function memoizeWrapper() {
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var signature = '0';

    for (var i = 0, l = args.length; i < l; i++) {
      var arg = args[i];
      var argRef = toObject(primativeRefCache, arg);
      var argKey = argumentCache.get(argRef);

      if (argKey === undefined) {
        argKey = ++argumentIdCounter;
        argumentCache.set(argRef, argKey);
      }

      signature += argKey;
    }

    return signatureCache[signature] || applyAndCache(this, fn, arguments, signatureCache, signature);
  }));
}

function memoize() {
  Object(_private_utils__WEBPACK_IMPORTED_MODULE_0__["internalDeprecation"])('@memoize is deprecated and will be removed shortly. Use @memoize from lodash-decorators.\n\n  https://www.npmjs.com/package/lodash-decorators');

  for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    args[_key2] = arguments[_key2];
  }

  return Object(_private_utils__WEBPACK_IMPORTED_MODULE_0__["decorate"])(handleDescriptor, args);
}

/***/ }),

/***/ "./node_modules/core-decorators/es/mixin.js":
/*!**************************************************!*\
  !*** ./node_modules/core-decorators/es/mixin.js ***!
  \**************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return mixin; });
/* harmony import */ var _private_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./private/utils */ "./node_modules/core-decorators/es/private/utils.js");
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };



var defineProperty = Object.defineProperty,
    getPrototypeOf = Object.getPrototypeOf;


function buggySymbol(symbol) {
  return Object.prototype.toString.call(symbol) === '[object Symbol]' && (typeof symbol === 'undefined' ? 'undefined' : _typeof(symbol)) === 'object';
}

function hasProperty(prop, obj) {
  // We have to traverse manually prototypes' chain for polyfilled ES6 Symbols
  // like "in" operator does.
  // I.e.: Babel 5 Symbol polyfill stores every created symbol in Object.prototype.
  // That's why we cannot use construction like "prop in obj" to check, if needed
  // prop actually exists in given object/prototypes' chain.
  if (buggySymbol(prop)) {
    do {
      if (obj === Object.prototype) {
        // Polyfill assigns undefined as value for stored symbol key.
        // We can assume in this special case if there is nothing assigned it doesn't exist.
        return typeof obj[prop] !== 'undefined';
      }
      if (obj.hasOwnProperty(prop)) {
        return true;
      }
    } while (obj = getPrototypeOf(obj));
    return false;
  } else {
    return prop in obj;
  }
}

function handleClass(target, mixins) {
  if (!mixins.length) {
    throw new SyntaxError('@mixin() class ' + target.name + ' requires at least one mixin as an argument');
  }

  for (var i = 0, l = mixins.length; i < l; i++) {
    var descs = Object(_private_utils__WEBPACK_IMPORTED_MODULE_0__["getOwnPropertyDescriptors"])(mixins[i]);
    var keys = Object(_private_utils__WEBPACK_IMPORTED_MODULE_0__["getOwnKeys"])(descs);

    for (var j = 0, k = keys.length; j < k; j++) {
      var key = keys[j];

      if (!hasProperty(key, target.prototype)) {
        defineProperty(target.prototype, key, descs[key]);
      }
    }
  }
}

function mixin() {
  for (var _len = arguments.length, mixins = Array(_len), _key = 0; _key < _len; _key++) {
    mixins[_key] = arguments[_key];
  }

  Object(_private_utils__WEBPACK_IMPORTED_MODULE_0__["internalDeprecation"])('@mixin is deprecated and will be removed shortly. Use @mixin from lodash-decorators.\n\n  https://www.npmjs.com/package/lodash-decorators');

  if (typeof mixins[0] === 'function') {
    return handleClass(mixins[0], []);
  } else {
    return function (target) {
      return handleClass(target, mixins);
    };
  }
}

/***/ }),

/***/ "./node_modules/core-decorators/es/nonconfigurable.js":
/*!************************************************************!*\
  !*** ./node_modules/core-decorators/es/nonconfigurable.js ***!
  \************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return nonconfigurable; });
/* harmony import */ var _private_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./private/utils */ "./node_modules/core-decorators/es/private/utils.js");


function handleDescriptor(target, key, descriptor) {
  descriptor.configurable = false;
  return descriptor;
}

function nonconfigurable() {
  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  return Object(_private_utils__WEBPACK_IMPORTED_MODULE_0__["decorate"])(handleDescriptor, args);
}

/***/ }),

/***/ "./node_modules/core-decorators/es/nonenumerable.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-decorators/es/nonenumerable.js ***!
  \**********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return nonenumerable; });
/* harmony import */ var _private_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./private/utils */ "./node_modules/core-decorators/es/private/utils.js");


function handleDescriptor(target, key, descriptor) {
  descriptor.enumerable = false;
  return descriptor;
}

function nonenumerable() {
  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  return Object(_private_utils__WEBPACK_IMPORTED_MODULE_0__["decorate"])(handleDescriptor, args);
}

/***/ }),

/***/ "./node_modules/core-decorators/es/override.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-decorators/es/override.js ***!
  \*****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return override; });
/* harmony import */ var _private_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./private/utils */ "./node_modules/core-decorators/es/private/utils.js");
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }



var GENERIC_FUNCTION_ERROR = '{child} does not properly override {parent}';
var FUNCTION_REGEXP = /^function ([_$a-zA-Z\xA0-\uFFFF][_$a-zA-Z0-9\xA0-\uFFFF]*)?(\([^\)]*\))[\s\S]+$/;

var SyntaxErrorReporter = function () {
  _createClass(SyntaxErrorReporter, [{
    key: '_getTopic',
    value: function _getTopic(descriptor) {
      if (descriptor === undefined) {
        return null;
      }

      if ('value' in descriptor) {
        return descriptor.value;
      }

      if ('get' in descriptor) {
        return descriptor.get;
      }

      if ('set' in descriptor) {
        return descriptor.set;
      }
    }
  }, {
    key: '_extractTopicSignature',
    value: function _extractTopicSignature(topic) {
      switch (typeof topic === 'undefined' ? 'undefined' : _typeof(topic)) {
        case 'function':
          return this._extractFunctionSignature(topic);
        default:
          return this.key;
      }
    }
  }, {
    key: '_extractFunctionSignature',
    value: function _extractFunctionSignature(fn) {
      var _this = this;

      return fn.toString().replace(FUNCTION_REGEXP, function (match) {
        var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _this.key;
        var params = arguments[2];
        return name + params;
      });
    }
  }, {
    key: 'key',
    get: function get() {
      return this.childDescriptor.key;
    }
  }, {
    key: 'parentNotation',
    get: function get() {
      return this.parentKlass.constructor.name + '#' + this.parentPropertySignature;
    }
  }, {
    key: 'childNotation',
    get: function get() {
      return this.childKlass.constructor.name + '#' + this.childPropertySignature;
    }
  }, {
    key: 'parentTopic',
    get: function get() {
      return this._getTopic(this.parentDescriptor);
    }
  }, {
    key: 'childTopic',
    get: function get() {
      return this._getTopic(this.childDescriptor);
    }
  }, {
    key: 'parentPropertySignature',
    get: function get() {
      return this._extractTopicSignature(this.parentTopic);
    }
  }, {
    key: 'childPropertySignature',
    get: function get() {
      return this._extractTopicSignature(this.childTopic);
    }
  }]);

  function SyntaxErrorReporter(parentKlass, childKlass, parentDescriptor, childDescriptor) {
    _classCallCheck(this, SyntaxErrorReporter);

    this.parentKlass = parentKlass;
    this.childKlass = childKlass;
    this.parentDescriptor = parentDescriptor;
    this.childDescriptor = childDescriptor;
  }

  _createClass(SyntaxErrorReporter, [{
    key: 'assert',
    value: function assert(condition) {
      var msg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';

      if (condition !== true) {
        this.error(GENERIC_FUNCTION_ERROR + msg);
      }
    }
  }, {
    key: 'error',
    value: function error(msg) {
      var _this2 = this;

      msg = msg
      // Replace lazily, because they actually might not
      // be available in all cases
      .replace('{parent}', function (m) {
        return _this2.parentNotation;
      }).replace('{child}', function (m) {
        return _this2.childNotation;
      });
      throw new SyntaxError(msg);
    }
  }]);

  return SyntaxErrorReporter;
}();

function getDescriptorType(descriptor) {
  if (descriptor.hasOwnProperty('value')) {
    return 'data';
  }

  if (descriptor.hasOwnProperty('get') || descriptor.hasOwnProperty('set')) {
    return 'accessor';
  }

  // If none of them exist, browsers treat it as
  // a data descriptor with a value of `undefined`
  return 'data';
}

function checkFunctionSignatures(parent, child, reporter) {
  reporter.assert(parent.length === child.length);
}

function checkDataDescriptors(parent, child, reporter) {
  var parentValueType = _typeof(parent.value);
  var childValueType = _typeof(child.value);

  if (parentValueType === 'undefined' && childValueType === 'undefined') {
    // class properties can be any expression, which isn't ran until the
    // the instance is created, so we can't reliably get type information
    // for them yet (per spec). Perhaps when Babel includes flow-type info
    // in runtime? Tried regex solutions, but super hacky and only feasible
    // on primitives, which is confusing for usage...
    reporter.error('descriptor values are both undefined. (class properties are are not currently supported)\'');
  }

  if (parentValueType !== childValueType) {
    var isFunctionOverUndefined = childValueType === 'function' && parentValueType === undefined;
    // Even though we don't support class properties, this
    // will still handle more than just functions, just in case.
    // Shadowing an undefined value is an error if the inherited
    // value was undefined (usually a class property, not a method)
    if (isFunctionOverUndefined || parentValueType !== undefined) {
      reporter.error('value types do not match. {parent} is "' + parentValueType + '", {child} is "' + childValueType + '"');
    }
  }

  // Switch, in preparation for supporting more types
  switch (childValueType) {
    case 'function':
      checkFunctionSignatures(parent.value, child.value, reporter);
      break;

    default:
      reporter.error('Unexpected error. Please file a bug with: {parent} is "' + parentValueType + '", {child} is "' + childValueType + '"');
      break;
  }
}

function checkAccessorDescriptors(parent, child, reporter) {
  var parentHasGetter = typeof parent.get === 'function';
  var childHasGetter = typeof child.get === 'function';
  var parentHasSetter = typeof parent.set === 'function';
  var childHasSetter = typeof child.set === 'function';

  if (parentHasGetter || childHasGetter) {
    if (!parentHasGetter && parentHasSetter) {
      reporter.error('{parent} is setter but {child} is getter');
    }

    if (!childHasGetter && childHasSetter) {
      reporter.error('{parent} is getter but {child} is setter');
    }

    checkFunctionSignatures(parent.get, child.get, reporter);
  }

  if (parentHasSetter || childHasSetter) {
    if (!parentHasSetter && parentHasGetter) {
      reporter.error('{parent} is getter but {child} is setter');
    }

    if (!childHasSetter && childHasGetter) {
      reporter.error('{parent} is setter but {child} is getter');
    }

    checkFunctionSignatures(parent.set, child.set, reporter);
  }
}

function checkDescriptors(parent, child, reporter) {
  var parentType = getDescriptorType(parent);
  var childType = getDescriptorType(child);

  if (parentType !== childType) {
    reporter.error('descriptor types do not match. {parent} is "' + parentType + '", {child} is "' + childType + '"');
  }

  switch (childType) {
    case 'data':
      checkDataDescriptors(parent, child, reporter);
      break;

    case 'accessor':
      checkAccessorDescriptors(parent, child, reporter);
      break;
  }
}

var suggestionTransforms = [function (key) {
  return key.toLowerCase();
}, function (key) {
  return key.toUpperCase();
}, function (key) {
  return key + 's';
}, function (key) {
  return key.slice(0, -1);
}, function (key) {
  return key.slice(1, key.length);
}];

function findPossibleAlternatives(superKlass, key) {
  for (var i = 0, l = suggestionTransforms.length; i < l; i++) {
    var fn = suggestionTransforms[i];
    var suggestion = fn(key);

    if (suggestion in superKlass) {
      return suggestion;
    }
  }

  return null;
}

function handleDescriptor(target, key, descriptor) {
  descriptor.key = key;
  var superKlass = Object.getPrototypeOf(target);
  var superDescriptor = Object.getOwnPropertyDescriptor(superKlass, key);
  var reporter = new SyntaxErrorReporter(superKlass, target, superDescriptor, descriptor);

  if (superDescriptor === undefined) {
    var suggestedKey = findPossibleAlternatives(superKlass, key);
    var suggestion = suggestedKey ? '\n\n  Did you mean "' + suggestedKey + '"?' : '';
    reporter.error('No descriptor matching {child} was found on the prototype chain.' + suggestion);
  }

  checkDescriptors(superDescriptor, descriptor, reporter);

  return descriptor;
}

function override() {
  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  return Object(_private_utils__WEBPACK_IMPORTED_MODULE_0__["decorate"])(handleDescriptor, args);
}

/***/ }),

/***/ "./node_modules/core-decorators/es/private/utils.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-decorators/es/private/utils.js ***!
  \**********************************************************/
/*! exports provided: isDescriptor, decorate, metaFor, getOwnKeys, getOwnPropertyDescriptors, createDefaultSetter, bind, warn, internalDeprecation */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isDescriptor", function() { return isDescriptor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "decorate", function() { return decorate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "metaFor", function() { return metaFor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getOwnKeys", function() { return getOwnKeys; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getOwnPropertyDescriptors", function() { return getOwnPropertyDescriptors; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createDefaultSetter", function() { return createDefaultSetter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "bind", function() { return bind; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "warn", function() { return warn; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "internalDeprecation", function() { return internalDeprecation; });
/* harmony import */ var _lazy_initialize__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lazy-initialize */ "./node_modules/core-decorators/es/lazy-initialize.js");
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _desc, _value, _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;

function _initDefineProp(target, property, descriptor, context) {
  if (!descriptor) return;
  Object.defineProperty(target, property, {
    enumerable: descriptor.enumerable,
    configurable: descriptor.configurable,
    writable: descriptor.writable,
    value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
  });
}

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
  var desc = {};
  Object['ke' + 'ys'](descriptor).forEach(function (key) {
    desc[key] = descriptor[key];
  });
  desc.enumerable = !!desc.enumerable;
  desc.configurable = !!desc.configurable;

  if ('value' in desc || desc.initializer) {
    desc.writable = true;
  }

  desc = decorators.slice().reverse().reduce(function (desc, decorator) {
    return decorator(target, property, desc) || desc;
  }, desc);

  if (context && desc.initializer !== void 0) {
    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
    desc.initializer = undefined;
  }

  if (desc.initializer === void 0) {
    Object['define' + 'Property'](target, property, desc);
    desc = null;
  }

  return desc;
}

function _initializerWarningHelper(descriptor, context) {
  throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
}

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }



var defineProperty = Object.defineProperty,
    getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor,
    getOwnPropertyNames = Object.getOwnPropertyNames,
    getOwnPropertySymbols = Object.getOwnPropertySymbols;


function isDescriptor(desc) {
  if (!desc || !desc.hasOwnProperty) {
    return false;
  }

  var keys = ['value', 'initializer', 'get', 'set'];

  for (var i = 0, l = keys.length; i < l; i++) {
    if (desc.hasOwnProperty(keys[i])) {
      return true;
    }
  }

  return false;
}

function decorate(handleDescriptor, entryArgs) {
  if (isDescriptor(entryArgs[entryArgs.length - 1])) {
    return handleDescriptor.apply(undefined, _toConsumableArray(entryArgs).concat([[]]));
  } else {
    return function () {
      return handleDescriptor.apply(undefined, _toConsumableArray(Array.prototype.slice.call(arguments)).concat([entryArgs]));
    };
  }
}

var Meta = (_class = function Meta() {
  _classCallCheck(this, Meta);

  _initDefineProp(this, 'debounceTimeoutIds', _descriptor, this);

  _initDefineProp(this, 'throttleTimeoutIds', _descriptor2, this);

  _initDefineProp(this, 'throttlePreviousTimestamps', _descriptor3, this);

  _initDefineProp(this, 'throttleTrailingArgs', _descriptor4, this);

  _initDefineProp(this, 'profileLastRan', _descriptor5, this);
}, (_descriptor = _applyDecoratedDescriptor(_class.prototype, 'debounceTimeoutIds', [_lazy_initialize__WEBPACK_IMPORTED_MODULE_0__["default"]], {
  enumerable: true,
  initializer: function initializer() {
    return {};
  }
}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, 'throttleTimeoutIds', [_lazy_initialize__WEBPACK_IMPORTED_MODULE_0__["default"]], {
  enumerable: true,
  initializer: function initializer() {
    return {};
  }
}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, 'throttlePreviousTimestamps', [_lazy_initialize__WEBPACK_IMPORTED_MODULE_0__["default"]], {
  enumerable: true,
  initializer: function initializer() {
    return {};
  }
}), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, 'throttleTrailingArgs', [_lazy_initialize__WEBPACK_IMPORTED_MODULE_0__["default"]], {
  enumerable: true,
  initializer: function initializer() {
    return null;
  }
}), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, 'profileLastRan', [_lazy_initialize__WEBPACK_IMPORTED_MODULE_0__["default"]], {
  enumerable: true,
  initializer: function initializer() {
    return null;
  }
})), _class);


var META_KEY = typeof Symbol === 'function' ? Symbol('__core_decorators__') : '__core_decorators__';

function metaFor(obj) {
  if (obj.hasOwnProperty(META_KEY) === false) {
    defineProperty(obj, META_KEY, {
      // Defaults: NOT enumerable, configurable, or writable
      value: new Meta()
    });
  }

  return obj[META_KEY];
}

var getOwnKeys = getOwnPropertySymbols ? function (object) {
  return getOwnPropertyNames(object).concat(getOwnPropertySymbols(object));
} : getOwnPropertyNames;

function getOwnPropertyDescriptors(obj) {
  var descs = {};

  getOwnKeys(obj).forEach(function (key) {
    return descs[key] = getOwnPropertyDescriptor(obj, key);
  });

  return descs;
}

function createDefaultSetter(key) {
  return function set(newValue) {
    Object.defineProperty(this, key, {
      configurable: true,
      writable: true,
      // IS enumerable when reassigned by the outside word
      enumerable: true,
      value: newValue
    });

    return newValue;
  };
}

function bind(fn, context) {
  if (fn.bind) {
    return fn.bind(context);
  } else {
    return function __autobind__() {
      return fn.apply(context, arguments);
    };
  }
}

var warn = function () {
  if ((typeof console === 'undefined' ? 'undefined' : _typeof(console)) !== 'object' || !console || typeof console.warn !== 'function') {
    return function () {};
  } else {
    return bind(console.warn, console);
  }
}();

var seenDeprecations = {};
function internalDeprecation(msg) {
  if (seenDeprecations[msg] !== true) {
    seenDeprecations[msg] = true;
    warn('DEPRECATION: ' + msg);
  }
}

/***/ }),

/***/ "./node_modules/core-decorators/es/profile.js":
/*!****************************************************!*\
  !*** ./node_modules/core-decorators/es/profile.js ***!
  \****************************************************/
/*! exports provided: defaultConsole, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "defaultConsole", function() { return defaultConsole; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return profile; });
/* harmony import */ var _private_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./private/utils */ "./node_modules/core-decorators/es/private/utils.js");
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();



var oc = console;

// Exported for mocking in tests
var defaultConsole = {
  profile: console.profile ? Object(_private_utils__WEBPACK_IMPORTED_MODULE_0__["bind"])(console.profile, console) : function () {},
  profileEnd: console.profileEnd ? Object(_private_utils__WEBPACK_IMPORTED_MODULE_0__["bind"])(console.profileEnd, console) : function () {},
  warn: _private_utils__WEBPACK_IMPORTED_MODULE_0__["warn"]
};

function handleDescriptor(target, key, descriptor, _ref) {
  var _ref2 = _slicedToArray(_ref, 3),
      _ref2$ = _ref2[0],
      prefix = _ref2$ === undefined ? null : _ref2$,
      _ref2$2 = _ref2[1],
      onceThrottleOrFunction = _ref2$2 === undefined ? false : _ref2$2,
      _ref2$3 = _ref2[2],
      console = _ref2$3 === undefined ? defaultConsole : _ref2$3;

  if (!profile.__enabled) {
    if (!profile.__warned) {
      console.warn('console.profile is not supported. All @profile decorators are disabled.');
      profile.__warned = true;
    }
    return descriptor;
  }

  var fn = descriptor.value;

  if (prefix === null) {
    prefix = target.constructor.name + '.' + key;
  }

  if (typeof fn !== 'function') {
    throw new SyntaxError('@profile can only be used on functions, not: ' + fn);
  }

  return _extends({}, descriptor, {
    value: function value() {
      var now = Date.now();
      var meta = Object(_private_utils__WEBPACK_IMPORTED_MODULE_0__["metaFor"])(this);
      if (onceThrottleOrFunction === true && !meta.profileLastRan || onceThrottleOrFunction === false || typeof onceThrottleOrFunction === 'number' && now - meta.profileLastRan > onceThrottleOrFunction || typeof onceThrottleOrFunction === 'function' && onceThrottleOrFunction.apply(this, arguments)) {
        console.profile(prefix);
        meta.profileLastRan = now;
      }

      try {
        return fn.apply(this, arguments);
      } finally {
        console.profileEnd(prefix);
      }
    }
  });
}

function profile() {
  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  return Object(_private_utils__WEBPACK_IMPORTED_MODULE_0__["decorate"])(handleDescriptor, args);
}

// Only Chrome, Firefox, and Edge support profile.
// Exposing properties for testing.
profile.__enabled = !!console.profile;
profile.__warned = false;

/***/ }),

/***/ "./node_modules/core-decorators/es/readonly.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-decorators/es/readonly.js ***!
  \*****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return readonly; });
/* harmony import */ var _private_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./private/utils */ "./node_modules/core-decorators/es/private/utils.js");


function handleDescriptor(target, key, descriptor) {
  descriptor.writable = false;
  return descriptor;
}

function readonly() {
  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  return Object(_private_utils__WEBPACK_IMPORTED_MODULE_0__["decorate"])(handleDescriptor, args);
}

/***/ }),

/***/ "./node_modules/core-decorators/es/suppress-warnings.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-decorators/es/suppress-warnings.js ***!
  \**************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return suppressWarnings; });
/* harmony import */ var _private_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./private/utils */ "./node_modules/core-decorators/es/private/utils.js");
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };



function suppressedWarningNoop() {
  // Warnings are currently suppressed via @suppressWarnings
}

function applyWithoutWarnings(context, fn, args) {
  if ((typeof console === 'undefined' ? 'undefined' : _typeof(console)) === 'object') {
    var nativeWarn = console.warn;
    console.warn = suppressedWarningNoop;
    var ret = fn.apply(context, args);
    console.warn = nativeWarn;
    return ret;
  } else {
    return fn.apply(context, args);
  }
}

function handleDescriptor(target, key, descriptor) {
  return _extends({}, descriptor, {
    value: function suppressWarningsWrapper() {
      return applyWithoutWarnings(this, descriptor.value, arguments);
    }
  });
}

function suppressWarnings() {
  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  return Object(_private_utils__WEBPACK_IMPORTED_MODULE_0__["decorate"])(handleDescriptor, args);
}

/***/ }),

/***/ "./node_modules/core-decorators/es/throttle.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-decorators/es/throttle.js ***!
  \*****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return throttle; });
/* harmony import */ var _private_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./private/utils */ "./node_modules/core-decorators/es/private/utils.js");
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();



var DEFAULT_TIMEOUT = 300;

function handleDescriptor(target, key, descriptor, _ref) {
  var _ref2 = _slicedToArray(_ref, 2),
      _ref2$ = _ref2[0],
      wait = _ref2$ === undefined ? DEFAULT_TIMEOUT : _ref2$,
      _ref2$2 = _ref2[1],
      options = _ref2$2 === undefined ? {} : _ref2$2;

  var callback = descriptor.value;

  if (typeof callback !== 'function') {
    throw new SyntaxError('Only functions can be throttled');
  }

  if (options.leading !== false) {
    options.leading = true;
  }

  if (options.trailing !== false) {
    options.trailing = true;
  }

  return _extends({}, descriptor, {
    value: function value() {
      var _this = this;

      var meta = Object(_private_utils__WEBPACK_IMPORTED_MODULE_0__["metaFor"])(this);
      var throttleTimeoutIds = meta.throttleTimeoutIds,
          throttlePreviousTimestamps = meta.throttlePreviousTimestamps;

      var timeout = throttleTimeoutIds[key];
      // last execute timestamp
      var previous = throttlePreviousTimestamps[key] || 0;
      var now = Date.now();

      if (options.trailing) {
        meta.throttleTrailingArgs = arguments;
      }

      // if first be called and disable the execution on the leading edge
      // set last execute timestamp to now
      if (!previous && options.leading === false) {
        previous = now;
      }

      var remaining = wait - (now - previous);

      if (remaining <= 0) {
        clearTimeout(timeout);
        delete throttleTimeoutIds[key];
        throttlePreviousTimestamps[key] = now;
        callback.apply(this, arguments);
      } else if (!timeout && options.trailing) {
        throttleTimeoutIds[key] = setTimeout(function () {
          throttlePreviousTimestamps[key] = options.leading === false ? 0 : Date.now();
          delete throttleTimeoutIds[key];
          callback.apply(_this, meta.throttleTrailingArgs);
          // don't leak memory!
          meta.throttleTrailingArgs = null;
        }, remaining);
      }
    }
  });
}

function throttle() {
  Object(_private_utils__WEBPACK_IMPORTED_MODULE_0__["internalDeprecation"])('@throttle is deprecated and will be removed shortly. Use @throttle from lodash-decorators.\n\n  https://www.npmjs.com/package/lodash-decorators');

  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  return Object(_private_utils__WEBPACK_IMPORTED_MODULE_0__["decorate"])(handleDescriptor, args);
}

/***/ }),

/***/ "./node_modules/core-decorators/es/time.js":
/*!*************************************************!*\
  !*** ./node_modules/core-decorators/es/time.js ***!
  \*************************************************/
/*! exports provided: defaultConsole, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "defaultConsole", function() { return defaultConsole; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return time; });
/* harmony import */ var _private_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./private/utils */ "./node_modules/core-decorators/es/private/utils.js");
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();



var labels = {};

// Exported for mocking in tests
var defaultConsole = {
  time: console.time ? console.time.bind(console) : function (label) {
    labels[label] = new Date();
  },
  timeEnd: console.timeEnd ? console.timeEnd.bind(console) : function (label) {
    var timeNow = new Date();
    var timeTaken = timeNow - labels[label];
    delete labels[label];
    console.log(label + ': ' + timeTaken + 'ms');
  }
};

var count = 0;

function handleDescriptor(target, key, descriptor, _ref) {
  var _ref2 = _slicedToArray(_ref, 2),
      _ref2$ = _ref2[0],
      prefix = _ref2$ === undefined ? null : _ref2$,
      _ref2$2 = _ref2[1],
      console = _ref2$2 === undefined ? defaultConsole : _ref2$2;

  var fn = descriptor.value;

  if (prefix === null) {
    prefix = target.constructor.name + '.' + key;
  }

  if (typeof fn !== 'function') {
    throw new SyntaxError('@time can only be used on functions, not: ' + fn);
  }

  return _extends({}, descriptor, {
    value: function value() {
      var label = prefix + '-' + count;
      count++;
      console.time(label);

      try {
        return fn.apply(this, arguments);
      } finally {
        console.timeEnd(label);
      }
    }
  });
}

function time() {
  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  return Object(_private_utils__WEBPACK_IMPORTED_MODULE_0__["decorate"])(handleDescriptor, args);
}

/***/ }),

/***/ "./node_modules/hammerjs/hammer.js":
/*!*****************************************!*\
  !*** ./node_modules/hammerjs/hammer.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_RESULT__;/*! Hammer.JS - v2.0.7 - 2016-04-22
 * http://hammerjs.github.io/
 *
 * Copyright (c) 2016 Jorik Tangelder;
 * Licensed under the MIT license */
(function(window, document, exportName, undefined) {
  'use strict';

var VENDOR_PREFIXES = ['', 'webkit', 'Moz', 'MS', 'ms', 'o'];
var TEST_ELEMENT = document.createElement('div');

var TYPE_FUNCTION = 'function';

var round = Math.round;
var abs = Math.abs;
var now = Date.now;

/**
 * set a timeout with a given scope
 * @param {Function} fn
 * @param {Number} timeout
 * @param {Object} context
 * @returns {number}
 */
function setTimeoutContext(fn, timeout, context) {
    return setTimeout(bindFn(fn, context), timeout);
}

/**
 * if the argument is an array, we want to execute the fn on each entry
 * if it aint an array we don't want to do a thing.
 * this is used by all the methods that accept a single and array argument.
 * @param {*|Array} arg
 * @param {String} fn
 * @param {Object} [context]
 * @returns {Boolean}
 */
function invokeArrayArg(arg, fn, context) {
    if (Array.isArray(arg)) {
        each(arg, context[fn], context);
        return true;
    }
    return false;
}

/**
 * walk objects and arrays
 * @param {Object} obj
 * @param {Function} iterator
 * @param {Object} context
 */
function each(obj, iterator, context) {
    var i;

    if (!obj) {
        return;
    }

    if (obj.forEach) {
        obj.forEach(iterator, context);
    } else if (obj.length !== undefined) {
        i = 0;
        while (i < obj.length) {
            iterator.call(context, obj[i], i, obj);
            i++;
        }
    } else {
        for (i in obj) {
            obj.hasOwnProperty(i) && iterator.call(context, obj[i], i, obj);
        }
    }
}

/**
 * wrap a method with a deprecation warning and stack trace
 * @param {Function} method
 * @param {String} name
 * @param {String} message
 * @returns {Function} A new function wrapping the supplied method.
 */
function deprecate(method, name, message) {
    var deprecationMessage = 'DEPRECATED METHOD: ' + name + '\n' + message + ' AT \n';
    return function() {
        var e = new Error('get-stack-trace');
        var stack = e && e.stack ? e.stack.replace(/^[^\(]+?[\n$]/gm, '')
            .replace(/^\s+at\s+/gm, '')
            .replace(/^Object.<anonymous>\s*\(/gm, '{anonymous}()@') : 'Unknown Stack Trace';

        var log = window.console && (window.console.warn || window.console.log);
        if (log) {
            log.call(window.console, deprecationMessage, stack);
        }
        return method.apply(this, arguments);
    };
}

/**
 * extend object.
 * means that properties in dest will be overwritten by the ones in src.
 * @param {Object} target
 * @param {...Object} objects_to_assign
 * @returns {Object} target
 */
var assign;
if (typeof Object.assign !== 'function') {
    assign = function assign(target) {
        if (target === undefined || target === null) {
            throw new TypeError('Cannot convert undefined or null to object');
        }

        var output = Object(target);
        for (var index = 1; index < arguments.length; index++) {
            var source = arguments[index];
            if (source !== undefined && source !== null) {
                for (var nextKey in source) {
                    if (source.hasOwnProperty(nextKey)) {
                        output[nextKey] = source[nextKey];
                    }
                }
            }
        }
        return output;
    };
} else {
    assign = Object.assign;
}

/**
 * extend object.
 * means that properties in dest will be overwritten by the ones in src.
 * @param {Object} dest
 * @param {Object} src
 * @param {Boolean} [merge=false]
 * @returns {Object} dest
 */
var extend = deprecate(function extend(dest, src, merge) {
    var keys = Object.keys(src);
    var i = 0;
    while (i < keys.length) {
        if (!merge || (merge && dest[keys[i]] === undefined)) {
            dest[keys[i]] = src[keys[i]];
        }
        i++;
    }
    return dest;
}, 'extend', 'Use `assign`.');

/**
 * merge the values from src in the dest.
 * means that properties that exist in dest will not be overwritten by src
 * @param {Object} dest
 * @param {Object} src
 * @returns {Object} dest
 */
var merge = deprecate(function merge(dest, src) {
    return extend(dest, src, true);
}, 'merge', 'Use `assign`.');

/**
 * simple class inheritance
 * @param {Function} child
 * @param {Function} base
 * @param {Object} [properties]
 */
function inherit(child, base, properties) {
    var baseP = base.prototype,
        childP;

    childP = child.prototype = Object.create(baseP);
    childP.constructor = child;
    childP._super = baseP;

    if (properties) {
        assign(childP, properties);
    }
}

/**
 * simple function bind
 * @param {Function} fn
 * @param {Object} context
 * @returns {Function}
 */
function bindFn(fn, context) {
    return function boundFn() {
        return fn.apply(context, arguments);
    };
}

/**
 * let a boolean value also be a function that must return a boolean
 * this first item in args will be used as the context
 * @param {Boolean|Function} val
 * @param {Array} [args]
 * @returns {Boolean}
 */
function boolOrFn(val, args) {
    if (typeof val == TYPE_FUNCTION) {
        return val.apply(args ? args[0] || undefined : undefined, args);
    }
    return val;
}

/**
 * use the val2 when val1 is undefined
 * @param {*} val1
 * @param {*} val2
 * @returns {*}
 */
function ifUndefined(val1, val2) {
    return (val1 === undefined) ? val2 : val1;
}

/**
 * addEventListener with multiple events at once
 * @param {EventTarget} target
 * @param {String} types
 * @param {Function} handler
 */
function addEventListeners(target, types, handler) {
    each(splitStr(types), function(type) {
        target.addEventListener(type, handler, false);
    });
}

/**
 * removeEventListener with multiple events at once
 * @param {EventTarget} target
 * @param {String} types
 * @param {Function} handler
 */
function removeEventListeners(target, types, handler) {
    each(splitStr(types), function(type) {
        target.removeEventListener(type, handler, false);
    });
}

/**
 * find if a node is in the given parent
 * @method hasParent
 * @param {HTMLElement} node
 * @param {HTMLElement} parent
 * @return {Boolean} found
 */
function hasParent(node, parent) {
    while (node) {
        if (node == parent) {
            return true;
        }
        node = node.parentNode;
    }
    return false;
}

/**
 * small indexOf wrapper
 * @param {String} str
 * @param {String} find
 * @returns {Boolean} found
 */
function inStr(str, find) {
    return str.indexOf(find) > -1;
}

/**
 * split string on whitespace
 * @param {String} str
 * @returns {Array} words
 */
function splitStr(str) {
    return str.trim().split(/\s+/g);
}

/**
 * find if a array contains the object using indexOf or a simple polyFill
 * @param {Array} src
 * @param {String} find
 * @param {String} [findByKey]
 * @return {Boolean|Number} false when not found, or the index
 */
function inArray(src, find, findByKey) {
    if (src.indexOf && !findByKey) {
        return src.indexOf(find);
    } else {
        var i = 0;
        while (i < src.length) {
            if ((findByKey && src[i][findByKey] == find) || (!findByKey && src[i] === find)) {
                return i;
            }
            i++;
        }
        return -1;
    }
}

/**
 * convert array-like objects to real arrays
 * @param {Object} obj
 * @returns {Array}
 */
function toArray(obj) {
    return Array.prototype.slice.call(obj, 0);
}

/**
 * unique array with objects based on a key (like 'id') or just by the array's value
 * @param {Array} src [{id:1},{id:2},{id:1}]
 * @param {String} [key]
 * @param {Boolean} [sort=False]
 * @returns {Array} [{id:1},{id:2}]
 */
function uniqueArray(src, key, sort) {
    var results = [];
    var values = [];
    var i = 0;

    while (i < src.length) {
        var val = key ? src[i][key] : src[i];
        if (inArray(values, val) < 0) {
            results.push(src[i]);
        }
        values[i] = val;
        i++;
    }

    if (sort) {
        if (!key) {
            results = results.sort();
        } else {
            results = results.sort(function sortUniqueArray(a, b) {
                return a[key] > b[key];
            });
        }
    }

    return results;
}

/**
 * get the prefixed property
 * @param {Object} obj
 * @param {String} property
 * @returns {String|Undefined} prefixed
 */
function prefixed(obj, property) {
    var prefix, prop;
    var camelProp = property[0].toUpperCase() + property.slice(1);

    var i = 0;
    while (i < VENDOR_PREFIXES.length) {
        prefix = VENDOR_PREFIXES[i];
        prop = (prefix) ? prefix + camelProp : property;

        if (prop in obj) {
            return prop;
        }
        i++;
    }
    return undefined;
}

/**
 * get a unique id
 * @returns {number} uniqueId
 */
var _uniqueId = 1;
function uniqueId() {
    return _uniqueId++;
}

/**
 * get the window object of an element
 * @param {HTMLElement} element
 * @returns {DocumentView|Window}
 */
function getWindowForElement(element) {
    var doc = element.ownerDocument || element;
    return (doc.defaultView || doc.parentWindow || window);
}

var MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android/i;

var SUPPORT_TOUCH = ('ontouchstart' in window);
var SUPPORT_POINTER_EVENTS = prefixed(window, 'PointerEvent') !== undefined;
var SUPPORT_ONLY_TOUCH = SUPPORT_TOUCH && MOBILE_REGEX.test(navigator.userAgent);

var INPUT_TYPE_TOUCH = 'touch';
var INPUT_TYPE_PEN = 'pen';
var INPUT_TYPE_MOUSE = 'mouse';
var INPUT_TYPE_KINECT = 'kinect';

var COMPUTE_INTERVAL = 25;

var INPUT_START = 1;
var INPUT_MOVE = 2;
var INPUT_END = 4;
var INPUT_CANCEL = 8;

var DIRECTION_NONE = 1;
var DIRECTION_LEFT = 2;
var DIRECTION_RIGHT = 4;
var DIRECTION_UP = 8;
var DIRECTION_DOWN = 16;

var DIRECTION_HORIZONTAL = DIRECTION_LEFT | DIRECTION_RIGHT;
var DIRECTION_VERTICAL = DIRECTION_UP | DIRECTION_DOWN;
var DIRECTION_ALL = DIRECTION_HORIZONTAL | DIRECTION_VERTICAL;

var PROPS_XY = ['x', 'y'];
var PROPS_CLIENT_XY = ['clientX', 'clientY'];

/**
 * create new input type manager
 * @param {Manager} manager
 * @param {Function} callback
 * @returns {Input}
 * @constructor
 */
function Input(manager, callback) {
    var self = this;
    this.manager = manager;
    this.callback = callback;
    this.element = manager.element;
    this.target = manager.options.inputTarget;

    // smaller wrapper around the handler, for the scope and the enabled state of the manager,
    // so when disabled the input events are completely bypassed.
    this.domHandler = function(ev) {
        if (boolOrFn(manager.options.enable, [manager])) {
            self.handler(ev);
        }
    };

    this.init();

}

Input.prototype = {
    /**
     * should handle the inputEvent data and trigger the callback
     * @virtual
     */
    handler: function() { },

    /**
     * bind the events
     */
    init: function() {
        this.evEl && addEventListeners(this.element, this.evEl, this.domHandler);
        this.evTarget && addEventListeners(this.target, this.evTarget, this.domHandler);
        this.evWin && addEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);
    },

    /**
     * unbind the events
     */
    destroy: function() {
        this.evEl && removeEventListeners(this.element, this.evEl, this.domHandler);
        this.evTarget && removeEventListeners(this.target, this.evTarget, this.domHandler);
        this.evWin && removeEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);
    }
};

/**
 * create new input type manager
 * called by the Manager constructor
 * @param {Hammer} manager
 * @returns {Input}
 */
function createInputInstance(manager) {
    var Type;
    var inputClass = manager.options.inputClass;

    if (inputClass) {
        Type = inputClass;
    } else if (SUPPORT_POINTER_EVENTS) {
        Type = PointerEventInput;
    } else if (SUPPORT_ONLY_TOUCH) {
        Type = TouchInput;
    } else if (!SUPPORT_TOUCH) {
        Type = MouseInput;
    } else {
        Type = TouchMouseInput;
    }
    return new (Type)(manager, inputHandler);
}

/**
 * handle input events
 * @param {Manager} manager
 * @param {String} eventType
 * @param {Object} input
 */
function inputHandler(manager, eventType, input) {
    var pointersLen = input.pointers.length;
    var changedPointersLen = input.changedPointers.length;
    var isFirst = (eventType & INPUT_START && (pointersLen - changedPointersLen === 0));
    var isFinal = (eventType & (INPUT_END | INPUT_CANCEL) && (pointersLen - changedPointersLen === 0));

    input.isFirst = !!isFirst;
    input.isFinal = !!isFinal;

    if (isFirst) {
        manager.session = {};
    }

    // source event is the normalized value of the domEvents
    // like 'touchstart, mouseup, pointerdown'
    input.eventType = eventType;

    // compute scale, rotation etc
    computeInputData(manager, input);

    // emit secret event
    manager.emit('hammer.input', input);

    manager.recognize(input);
    manager.session.prevInput = input;
}

/**
 * extend the data with some usable properties like scale, rotate, velocity etc
 * @param {Object} manager
 * @param {Object} input
 */
function computeInputData(manager, input) {
    var session = manager.session;
    var pointers = input.pointers;
    var pointersLength = pointers.length;

    // store the first input to calculate the distance and direction
    if (!session.firstInput) {
        session.firstInput = simpleCloneInputData(input);
    }

    // to compute scale and rotation we need to store the multiple touches
    if (pointersLength > 1 && !session.firstMultiple) {
        session.firstMultiple = simpleCloneInputData(input);
    } else if (pointersLength === 1) {
        session.firstMultiple = false;
    }

    var firstInput = session.firstInput;
    var firstMultiple = session.firstMultiple;
    var offsetCenter = firstMultiple ? firstMultiple.center : firstInput.center;

    var center = input.center = getCenter(pointers);
    input.timeStamp = now();
    input.deltaTime = input.timeStamp - firstInput.timeStamp;

    input.angle = getAngle(offsetCenter, center);
    input.distance = getDistance(offsetCenter, center);

    computeDeltaXY(session, input);
    input.offsetDirection = getDirection(input.deltaX, input.deltaY);

    var overallVelocity = getVelocity(input.deltaTime, input.deltaX, input.deltaY);
    input.overallVelocityX = overallVelocity.x;
    input.overallVelocityY = overallVelocity.y;
    input.overallVelocity = (abs(overallVelocity.x) > abs(overallVelocity.y)) ? overallVelocity.x : overallVelocity.y;

    input.scale = firstMultiple ? getScale(firstMultiple.pointers, pointers) : 1;
    input.rotation = firstMultiple ? getRotation(firstMultiple.pointers, pointers) : 0;

    input.maxPointers = !session.prevInput ? input.pointers.length : ((input.pointers.length >
        session.prevInput.maxPointers) ? input.pointers.length : session.prevInput.maxPointers);

    computeIntervalInputData(session, input);

    // find the correct target
    var target = manager.element;
    if (hasParent(input.srcEvent.target, target)) {
        target = input.srcEvent.target;
    }
    input.target = target;
}

function computeDeltaXY(session, input) {
    var center = input.center;
    var offset = session.offsetDelta || {};
    var prevDelta = session.prevDelta || {};
    var prevInput = session.prevInput || {};

    if (input.eventType === INPUT_START || prevInput.eventType === INPUT_END) {
        prevDelta = session.prevDelta = {
            x: prevInput.deltaX || 0,
            y: prevInput.deltaY || 0
        };

        offset = session.offsetDelta = {
            x: center.x,
            y: center.y
        };
    }

    input.deltaX = prevDelta.x + (center.x - offset.x);
    input.deltaY = prevDelta.y + (center.y - offset.y);
}

/**
 * velocity is calculated every x ms
 * @param {Object} session
 * @param {Object} input
 */
function computeIntervalInputData(session, input) {
    var last = session.lastInterval || input,
        deltaTime = input.timeStamp - last.timeStamp,
        velocity, velocityX, velocityY, direction;

    if (input.eventType != INPUT_CANCEL && (deltaTime > COMPUTE_INTERVAL || last.velocity === undefined)) {
        var deltaX = input.deltaX - last.deltaX;
        var deltaY = input.deltaY - last.deltaY;

        var v = getVelocity(deltaTime, deltaX, deltaY);
        velocityX = v.x;
        velocityY = v.y;
        velocity = (abs(v.x) > abs(v.y)) ? v.x : v.y;
        direction = getDirection(deltaX, deltaY);

        session.lastInterval = input;
    } else {
        // use latest velocity info if it doesn't overtake a minimum period
        velocity = last.velocity;
        velocityX = last.velocityX;
        velocityY = last.velocityY;
        direction = last.direction;
    }

    input.velocity = velocity;
    input.velocityX = velocityX;
    input.velocityY = velocityY;
    input.direction = direction;
}

/**
 * create a simple clone from the input used for storage of firstInput and firstMultiple
 * @param {Object} input
 * @returns {Object} clonedInputData
 */
function simpleCloneInputData(input) {
    // make a simple copy of the pointers because we will get a reference if we don't
    // we only need clientXY for the calculations
    var pointers = [];
    var i = 0;
    while (i < input.pointers.length) {
        pointers[i] = {
            clientX: round(input.pointers[i].clientX),
            clientY: round(input.pointers[i].clientY)
        };
        i++;
    }

    return {
        timeStamp: now(),
        pointers: pointers,
        center: getCenter(pointers),
        deltaX: input.deltaX,
        deltaY: input.deltaY
    };
}

/**
 * get the center of all the pointers
 * @param {Array} pointers
 * @return {Object} center contains `x` and `y` properties
 */
function getCenter(pointers) {
    var pointersLength = pointers.length;

    // no need to loop when only one touch
    if (pointersLength === 1) {
        return {
            x: round(pointers[0].clientX),
            y: round(pointers[0].clientY)
        };
    }

    var x = 0, y = 0, i = 0;
    while (i < pointersLength) {
        x += pointers[i].clientX;
        y += pointers[i].clientY;
        i++;
    }

    return {
        x: round(x / pointersLength),
        y: round(y / pointersLength)
    };
}

/**
 * calculate the velocity between two points. unit is in px per ms.
 * @param {Number} deltaTime
 * @param {Number} x
 * @param {Number} y
 * @return {Object} velocity `x` and `y`
 */
function getVelocity(deltaTime, x, y) {
    return {
        x: x / deltaTime || 0,
        y: y / deltaTime || 0
    };
}

/**
 * get the direction between two points
 * @param {Number} x
 * @param {Number} y
 * @return {Number} direction
 */
function getDirection(x, y) {
    if (x === y) {
        return DIRECTION_NONE;
    }

    if (abs(x) >= abs(y)) {
        return x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;
    }
    return y < 0 ? DIRECTION_UP : DIRECTION_DOWN;
}

/**
 * calculate the absolute distance between two points
 * @param {Object} p1 {x, y}
 * @param {Object} p2 {x, y}
 * @param {Array} [props] containing x and y keys
 * @return {Number} distance
 */
function getDistance(p1, p2, props) {
    if (!props) {
        props = PROPS_XY;
    }
    var x = p2[props[0]] - p1[props[0]],
        y = p2[props[1]] - p1[props[1]];

    return Math.sqrt((x * x) + (y * y));
}

/**
 * calculate the angle between two coordinates
 * @param {Object} p1
 * @param {Object} p2
 * @param {Array} [props] containing x and y keys
 * @return {Number} angle
 */
function getAngle(p1, p2, props) {
    if (!props) {
        props = PROPS_XY;
    }
    var x = p2[props[0]] - p1[props[0]],
        y = p2[props[1]] - p1[props[1]];
    return Math.atan2(y, x) * 180 / Math.PI;
}

/**
 * calculate the rotation degrees between two pointersets
 * @param {Array} start array of pointers
 * @param {Array} end array of pointers
 * @return {Number} rotation
 */
function getRotation(start, end) {
    return getAngle(end[1], end[0], PROPS_CLIENT_XY) + getAngle(start[1], start[0], PROPS_CLIENT_XY);
}

/**
 * calculate the scale factor between two pointersets
 * no scale is 1, and goes down to 0 when pinched together, and bigger when pinched out
 * @param {Array} start array of pointers
 * @param {Array} end array of pointers
 * @return {Number} scale
 */
function getScale(start, end) {
    return getDistance(end[0], end[1], PROPS_CLIENT_XY) / getDistance(start[0], start[1], PROPS_CLIENT_XY);
}

var MOUSE_INPUT_MAP = {
    mousedown: INPUT_START,
    mousemove: INPUT_MOVE,
    mouseup: INPUT_END
};

var MOUSE_ELEMENT_EVENTS = 'mousedown';
var MOUSE_WINDOW_EVENTS = 'mousemove mouseup';

/**
 * Mouse events input
 * @constructor
 * @extends Input
 */
function MouseInput() {
    this.evEl = MOUSE_ELEMENT_EVENTS;
    this.evWin = MOUSE_WINDOW_EVENTS;

    this.pressed = false; // mousedown state

    Input.apply(this, arguments);
}

inherit(MouseInput, Input, {
    /**
     * handle mouse events
     * @param {Object} ev
     */
    handler: function MEhandler(ev) {
        var eventType = MOUSE_INPUT_MAP[ev.type];

        // on start we want to have the left mouse button down
        if (eventType & INPUT_START && ev.button === 0) {
            this.pressed = true;
        }

        if (eventType & INPUT_MOVE && ev.which !== 1) {
            eventType = INPUT_END;
        }

        // mouse must be down
        if (!this.pressed) {
            return;
        }

        if (eventType & INPUT_END) {
            this.pressed = false;
        }

        this.callback(this.manager, eventType, {
            pointers: [ev],
            changedPointers: [ev],
            pointerType: INPUT_TYPE_MOUSE,
            srcEvent: ev
        });
    }
});

var POINTER_INPUT_MAP = {
    pointerdown: INPUT_START,
    pointermove: INPUT_MOVE,
    pointerup: INPUT_END,
    pointercancel: INPUT_CANCEL,
    pointerout: INPUT_CANCEL
};

// in IE10 the pointer types is defined as an enum
var IE10_POINTER_TYPE_ENUM = {
    2: INPUT_TYPE_TOUCH,
    3: INPUT_TYPE_PEN,
    4: INPUT_TYPE_MOUSE,
    5: INPUT_TYPE_KINECT // see https://twitter.com/jacobrossi/status/480596438489890816
};

var POINTER_ELEMENT_EVENTS = 'pointerdown';
var POINTER_WINDOW_EVENTS = 'pointermove pointerup pointercancel';

// IE10 has prefixed support, and case-sensitive
if (window.MSPointerEvent && !window.PointerEvent) {
    POINTER_ELEMENT_EVENTS = 'MSPointerDown';
    POINTER_WINDOW_EVENTS = 'MSPointerMove MSPointerUp MSPointerCancel';
}

/**
 * Pointer events input
 * @constructor
 * @extends Input
 */
function PointerEventInput() {
    this.evEl = POINTER_ELEMENT_EVENTS;
    this.evWin = POINTER_WINDOW_EVENTS;

    Input.apply(this, arguments);

    this.store = (this.manager.session.pointerEvents = []);
}

inherit(PointerEventInput, Input, {
    /**
     * handle mouse events
     * @param {Object} ev
     */
    handler: function PEhandler(ev) {
        var store = this.store;
        var removePointer = false;

        var eventTypeNormalized = ev.type.toLowerCase().replace('ms', '');
        var eventType = POINTER_INPUT_MAP[eventTypeNormalized];
        var pointerType = IE10_POINTER_TYPE_ENUM[ev.pointerType] || ev.pointerType;

        var isTouch = (pointerType == INPUT_TYPE_TOUCH);

        // get index of the event in the store
        var storeIndex = inArray(store, ev.pointerId, 'pointerId');

        // start and mouse must be down
        if (eventType & INPUT_START && (ev.button === 0 || isTouch)) {
            if (storeIndex < 0) {
                store.push(ev);
                storeIndex = store.length - 1;
            }
        } else if (eventType & (INPUT_END | INPUT_CANCEL)) {
            removePointer = true;
        }

        // it not found, so the pointer hasn't been down (so it's probably a hover)
        if (storeIndex < 0) {
            return;
        }

        // update the event in the store
        store[storeIndex] = ev;

        this.callback(this.manager, eventType, {
            pointers: store,
            changedPointers: [ev],
            pointerType: pointerType,
            srcEvent: ev
        });

        if (removePointer) {
            // remove from the store
            store.splice(storeIndex, 1);
        }
    }
});

var SINGLE_TOUCH_INPUT_MAP = {
    touchstart: INPUT_START,
    touchmove: INPUT_MOVE,
    touchend: INPUT_END,
    touchcancel: INPUT_CANCEL
};

var SINGLE_TOUCH_TARGET_EVENTS = 'touchstart';
var SINGLE_TOUCH_WINDOW_EVENTS = 'touchstart touchmove touchend touchcancel';

/**
 * Touch events input
 * @constructor
 * @extends Input
 */
function SingleTouchInput() {
    this.evTarget = SINGLE_TOUCH_TARGET_EVENTS;
    this.evWin = SINGLE_TOUCH_WINDOW_EVENTS;
    this.started = false;

    Input.apply(this, arguments);
}

inherit(SingleTouchInput, Input, {
    handler: function TEhandler(ev) {
        var type = SINGLE_TOUCH_INPUT_MAP[ev.type];

        // should we handle the touch events?
        if (type === INPUT_START) {
            this.started = true;
        }

        if (!this.started) {
            return;
        }

        var touches = normalizeSingleTouches.call(this, ev, type);

        // when done, reset the started state
        if (type & (INPUT_END | INPUT_CANCEL) && touches[0].length - touches[1].length === 0) {
            this.started = false;
        }

        this.callback(this.manager, type, {
            pointers: touches[0],
            changedPointers: touches[1],
            pointerType: INPUT_TYPE_TOUCH,
            srcEvent: ev
        });
    }
});

/**
 * @this {TouchInput}
 * @param {Object} ev
 * @param {Number} type flag
 * @returns {undefined|Array} [all, changed]
 */
function normalizeSingleTouches(ev, type) {
    var all = toArray(ev.touches);
    var changed = toArray(ev.changedTouches);

    if (type & (INPUT_END | INPUT_CANCEL)) {
        all = uniqueArray(all.concat(changed), 'identifier', true);
    }

    return [all, changed];
}

var TOUCH_INPUT_MAP = {
    touchstart: INPUT_START,
    touchmove: INPUT_MOVE,
    touchend: INPUT_END,
    touchcancel: INPUT_CANCEL
};

var TOUCH_TARGET_EVENTS = 'touchstart touchmove touchend touchcancel';

/**
 * Multi-user touch events input
 * @constructor
 * @extends Input
 */
function TouchInput() {
    this.evTarget = TOUCH_TARGET_EVENTS;
    this.targetIds = {};

    Input.apply(this, arguments);
}

inherit(TouchInput, Input, {
    handler: function MTEhandler(ev) {
        var type = TOUCH_INPUT_MAP[ev.type];
        var touches = getTouches.call(this, ev, type);
        if (!touches) {
            return;
        }

        this.callback(this.manager, type, {
            pointers: touches[0],
            changedPointers: touches[1],
            pointerType: INPUT_TYPE_TOUCH,
            srcEvent: ev
        });
    }
});

/**
 * @this {TouchInput}
 * @param {Object} ev
 * @param {Number} type flag
 * @returns {undefined|Array} [all, changed]
 */
function getTouches(ev, type) {
    var allTouches = toArray(ev.touches);
    var targetIds = this.targetIds;

    // when there is only one touch, the process can be simplified
    if (type & (INPUT_START | INPUT_MOVE) && allTouches.length === 1) {
        targetIds[allTouches[0].identifier] = true;
        return [allTouches, allTouches];
    }

    var i,
        targetTouches,
        changedTouches = toArray(ev.changedTouches),
        changedTargetTouches = [],
        target = this.target;

    // get target touches from touches
    targetTouches = allTouches.filter(function(touch) {
        return hasParent(touch.target, target);
    });

    // collect touches
    if (type === INPUT_START) {
        i = 0;
        while (i < targetTouches.length) {
            targetIds[targetTouches[i].identifier] = true;
            i++;
        }
    }

    // filter changed touches to only contain touches that exist in the collected target ids
    i = 0;
    while (i < changedTouches.length) {
        if (targetIds[changedTouches[i].identifier]) {
            changedTargetTouches.push(changedTouches[i]);
        }

        // cleanup removed touches
        if (type & (INPUT_END | INPUT_CANCEL)) {
            delete targetIds[changedTouches[i].identifier];
        }
        i++;
    }

    if (!changedTargetTouches.length) {
        return;
    }

    return [
        // merge targetTouches with changedTargetTouches so it contains ALL touches, including 'end' and 'cancel'
        uniqueArray(targetTouches.concat(changedTargetTouches), 'identifier', true),
        changedTargetTouches
    ];
}

/**
 * Combined touch and mouse input
 *
 * Touch has a higher priority then mouse, and while touching no mouse events are allowed.
 * This because touch devices also emit mouse events while doing a touch.
 *
 * @constructor
 * @extends Input
 */

var DEDUP_TIMEOUT = 2500;
var DEDUP_DISTANCE = 25;

function TouchMouseInput() {
    Input.apply(this, arguments);

    var handler = bindFn(this.handler, this);
    this.touch = new TouchInput(this.manager, handler);
    this.mouse = new MouseInput(this.manager, handler);

    this.primaryTouch = null;
    this.lastTouches = [];
}

inherit(TouchMouseInput, Input, {
    /**
     * handle mouse and touch events
     * @param {Hammer} manager
     * @param {String} inputEvent
     * @param {Object} inputData
     */
    handler: function TMEhandler(manager, inputEvent, inputData) {
        var isTouch = (inputData.pointerType == INPUT_TYPE_TOUCH),
            isMouse = (inputData.pointerType == INPUT_TYPE_MOUSE);

        if (isMouse && inputData.sourceCapabilities && inputData.sourceCapabilities.firesTouchEvents) {
            return;
        }

        // when we're in a touch event, record touches to  de-dupe synthetic mouse event
        if (isTouch) {
            recordTouches.call(this, inputEvent, inputData);
        } else if (isMouse && isSyntheticEvent.call(this, inputData)) {
            return;
        }

        this.callback(manager, inputEvent, inputData);
    },

    /**
     * remove the event listeners
     */
    destroy: function destroy() {
        this.touch.destroy();
        this.mouse.destroy();
    }
});

function recordTouches(eventType, eventData) {
    if (eventType & INPUT_START) {
        this.primaryTouch = eventData.changedPointers[0].identifier;
        setLastTouch.call(this, eventData);
    } else if (eventType & (INPUT_END | INPUT_CANCEL)) {
        setLastTouch.call(this, eventData);
    }
}

function setLastTouch(eventData) {
    var touch = eventData.changedPointers[0];

    if (touch.identifier === this.primaryTouch) {
        var lastTouch = {x: touch.clientX, y: touch.clientY};
        this.lastTouches.push(lastTouch);
        var lts = this.lastTouches;
        var removeLastTouch = function() {
            var i = lts.indexOf(lastTouch);
            if (i > -1) {
                lts.splice(i, 1);
            }
        };
        setTimeout(removeLastTouch, DEDUP_TIMEOUT);
    }
}

function isSyntheticEvent(eventData) {
    var x = eventData.srcEvent.clientX, y = eventData.srcEvent.clientY;
    for (var i = 0; i < this.lastTouches.length; i++) {
        var t = this.lastTouches[i];
        var dx = Math.abs(x - t.x), dy = Math.abs(y - t.y);
        if (dx <= DEDUP_DISTANCE && dy <= DEDUP_DISTANCE) {
            return true;
        }
    }
    return false;
}

var PREFIXED_TOUCH_ACTION = prefixed(TEST_ELEMENT.style, 'touchAction');
var NATIVE_TOUCH_ACTION = PREFIXED_TOUCH_ACTION !== undefined;

// magical touchAction value
var TOUCH_ACTION_COMPUTE = 'compute';
var TOUCH_ACTION_AUTO = 'auto';
var TOUCH_ACTION_MANIPULATION = 'manipulation'; // not implemented
var TOUCH_ACTION_NONE = 'none';
var TOUCH_ACTION_PAN_X = 'pan-x';
var TOUCH_ACTION_PAN_Y = 'pan-y';
var TOUCH_ACTION_MAP = getTouchActionProps();

/**
 * Touch Action
 * sets the touchAction property or uses the js alternative
 * @param {Manager} manager
 * @param {String} value
 * @constructor
 */
function TouchAction(manager, value) {
    this.manager = manager;
    this.set(value);
}

TouchAction.prototype = {
    /**
     * set the touchAction value on the element or enable the polyfill
     * @param {String} value
     */
    set: function(value) {
        // find out the touch-action by the event handlers
        if (value == TOUCH_ACTION_COMPUTE) {
            value = this.compute();
        }

        if (NATIVE_TOUCH_ACTION && this.manager.element.style && TOUCH_ACTION_MAP[value]) {
            this.manager.element.style[PREFIXED_TOUCH_ACTION] = value;
        }
        this.actions = value.toLowerCase().trim();
    },

    /**
     * just re-set the touchAction value
     */
    update: function() {
        this.set(this.manager.options.touchAction);
    },

    /**
     * compute the value for the touchAction property based on the recognizer's settings
     * @returns {String} value
     */
    compute: function() {
        var actions = [];
        each(this.manager.recognizers, function(recognizer) {
            if (boolOrFn(recognizer.options.enable, [recognizer])) {
                actions = actions.concat(recognizer.getTouchAction());
            }
        });
        return cleanTouchActions(actions.join(' '));
    },

    /**
     * this method is called on each input cycle and provides the preventing of the browser behavior
     * @param {Object} input
     */
    preventDefaults: function(input) {
        var srcEvent = input.srcEvent;
        var direction = input.offsetDirection;

        // if the touch action did prevented once this session
        if (this.manager.session.prevented) {
            srcEvent.preventDefault();
            return;
        }

        var actions = this.actions;
        var hasNone = inStr(actions, TOUCH_ACTION_NONE) && !TOUCH_ACTION_MAP[TOUCH_ACTION_NONE];
        var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_Y];
        var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_X];

        if (hasNone) {
            //do not prevent defaults if this is a tap gesture

            var isTapPointer = input.pointers.length === 1;
            var isTapMovement = input.distance < 2;
            var isTapTouchTime = input.deltaTime < 250;

            if (isTapPointer && isTapMovement && isTapTouchTime) {
                return;
            }
        }

        if (hasPanX && hasPanY) {
            // `pan-x pan-y` means browser handles all scrolling/panning, do not prevent
            return;
        }

        if (hasNone ||
            (hasPanY && direction & DIRECTION_HORIZONTAL) ||
            (hasPanX && direction & DIRECTION_VERTICAL)) {
            return this.preventSrc(srcEvent);
        }
    },

    /**
     * call preventDefault to prevent the browser's default behavior (scrolling in most cases)
     * @param {Object} srcEvent
     */
    preventSrc: function(srcEvent) {
        this.manager.session.prevented = true;
        srcEvent.preventDefault();
    }
};

/**
 * when the touchActions are collected they are not a valid value, so we need to clean things up. *
 * @param {String} actions
 * @returns {*}
 */
function cleanTouchActions(actions) {
    // none
    if (inStr(actions, TOUCH_ACTION_NONE)) {
        return TOUCH_ACTION_NONE;
    }

    var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);
    var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y);

    // if both pan-x and pan-y are set (different recognizers
    // for different directions, e.g. horizontal pan but vertical swipe?)
    // we need none (as otherwise with pan-x pan-y combined none of these
    // recognizers will work, since the browser would handle all panning
    if (hasPanX && hasPanY) {
        return TOUCH_ACTION_NONE;
    }

    // pan-x OR pan-y
    if (hasPanX || hasPanY) {
        return hasPanX ? TOUCH_ACTION_PAN_X : TOUCH_ACTION_PAN_Y;
    }

    // manipulation
    if (inStr(actions, TOUCH_ACTION_MANIPULATION)) {
        return TOUCH_ACTION_MANIPULATION;
    }

    return TOUCH_ACTION_AUTO;
}

function getTouchActionProps() {
    if (!NATIVE_TOUCH_ACTION) {
        return false;
    }
    var touchMap = {};
    var cssSupports = window.CSS && window.CSS.supports;
    ['auto', 'manipulation', 'pan-y', 'pan-x', 'pan-x pan-y', 'none'].forEach(function(val) {

        // If css.supports is not supported but there is native touch-action assume it supports
        // all values. This is the case for IE 10 and 11.
        touchMap[val] = cssSupports ? window.CSS.supports('touch-action', val) : true;
    });
    return touchMap;
}

/**
 * Recognizer flow explained; *
 * All recognizers have the initial state of POSSIBLE when a input session starts.
 * The definition of a input session is from the first input until the last input, with all it's movement in it. *
 * Example session for mouse-input: mousedown -> mousemove -> mouseup
 *
 * On each recognizing cycle (see Manager.recognize) the .recognize() method is executed
 * which determines with state it should be.
 *
 * If the recognizer has the state FAILED, CANCELLED or RECOGNIZED (equals ENDED), it is reset to
 * POSSIBLE to give it another change on the next cycle.
 *
 *               Possible
 *                  |
 *            +-----+---------------+
 *            |                     |
 *      +-----+-----+               |
 *      |           |               |
 *   Failed      Cancelled          |
 *                          +-------+------+
 *                          |              |
 *                      Recognized       Began
 *                                         |
 *                                      Changed
 *                                         |
 *                                  Ended/Recognized
 */
var STATE_POSSIBLE = 1;
var STATE_BEGAN = 2;
var STATE_CHANGED = 4;
var STATE_ENDED = 8;
var STATE_RECOGNIZED = STATE_ENDED;
var STATE_CANCELLED = 16;
var STATE_FAILED = 32;

/**
 * Recognizer
 * Every recognizer needs to extend from this class.
 * @constructor
 * @param {Object} options
 */
function Recognizer(options) {
    this.options = assign({}, this.defaults, options || {});

    this.id = uniqueId();

    this.manager = null;

    // default is enable true
    this.options.enable = ifUndefined(this.options.enable, true);

    this.state = STATE_POSSIBLE;

    this.simultaneous = {};
    this.requireFail = [];
}

Recognizer.prototype = {
    /**
     * @virtual
     * @type {Object}
     */
    defaults: {},

    /**
     * set options
     * @param {Object} options
     * @return {Recognizer}
     */
    set: function(options) {
        assign(this.options, options);

        // also update the touchAction, in case something changed about the directions/enabled state
        this.manager && this.manager.touchAction.update();
        return this;
    },

    /**
     * recognize simultaneous with an other recognizer.
     * @param {Recognizer} otherRecognizer
     * @returns {Recognizer} this
     */
    recognizeWith: function(otherRecognizer) {
        if (invokeArrayArg(otherRecognizer, 'recognizeWith', this)) {
            return this;
        }

        var simultaneous = this.simultaneous;
        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
        if (!simultaneous[otherRecognizer.id]) {
            simultaneous[otherRecognizer.id] = otherRecognizer;
            otherRecognizer.recognizeWith(this);
        }
        return this;
    },

    /**
     * drop the simultaneous link. it doesnt remove the link on the other recognizer.
     * @param {Recognizer} otherRecognizer
     * @returns {Recognizer} this
     */
    dropRecognizeWith: function(otherRecognizer) {
        if (invokeArrayArg(otherRecognizer, 'dropRecognizeWith', this)) {
            return this;
        }

        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
        delete this.simultaneous[otherRecognizer.id];
        return this;
    },

    /**
     * recognizer can only run when an other is failing
     * @param {Recognizer} otherRecognizer
     * @returns {Recognizer} this
     */
    requireFailure: function(otherRecognizer) {
        if (invokeArrayArg(otherRecognizer, 'requireFailure', this)) {
            return this;
        }

        var requireFail = this.requireFail;
        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
        if (inArray(requireFail, otherRecognizer) === -1) {
            requireFail.push(otherRecognizer);
            otherRecognizer.requireFailure(this);
        }
        return this;
    },

    /**
     * drop the requireFailure link. it does not remove the link on the other recognizer.
     * @param {Recognizer} otherRecognizer
     * @returns {Recognizer} this
     */
    dropRequireFailure: function(otherRecognizer) {
        if (invokeArrayArg(otherRecognizer, 'dropRequireFailure', this)) {
            return this;
        }

        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
        var index = inArray(this.requireFail, otherRecognizer);
        if (index > -1) {
            this.requireFail.splice(index, 1);
        }
        return this;
    },

    /**
     * has require failures boolean
     * @returns {boolean}
     */
    hasRequireFailures: function() {
        return this.requireFail.length > 0;
    },

    /**
     * if the recognizer can recognize simultaneous with an other recognizer
     * @param {Recognizer} otherRecognizer
     * @returns {Boolean}
     */
    canRecognizeWith: function(otherRecognizer) {
        return !!this.simultaneous[otherRecognizer.id];
    },

    /**
     * You should use `tryEmit` instead of `emit` directly to check
     * that all the needed recognizers has failed before emitting.
     * @param {Object} input
     */
    emit: function(input) {
        var self = this;
        var state = this.state;

        function emit(event) {
            self.manager.emit(event, input);
        }

        // 'panstart' and 'panmove'
        if (state < STATE_ENDED) {
            emit(self.options.event + stateStr(state));
        }

        emit(self.options.event); // simple 'eventName' events

        if (input.additionalEvent) { // additional event(panleft, panright, pinchin, pinchout...)
            emit(input.additionalEvent);
        }

        // panend and pancancel
        if (state >= STATE_ENDED) {
            emit(self.options.event + stateStr(state));
        }
    },

    /**
     * Check that all the require failure recognizers has failed,
     * if true, it emits a gesture event,
     * otherwise, setup the state to FAILED.
     * @param {Object} input
     */
    tryEmit: function(input) {
        if (this.canEmit()) {
            return this.emit(input);
        }
        // it's failing anyway
        this.state = STATE_FAILED;
    },

    /**
     * can we emit?
     * @returns {boolean}
     */
    canEmit: function() {
        var i = 0;
        while (i < this.requireFail.length) {
            if (!(this.requireFail[i].state & (STATE_FAILED | STATE_POSSIBLE))) {
                return false;
            }
            i++;
        }
        return true;
    },

    /**
     * update the recognizer
     * @param {Object} inputData
     */
    recognize: function(inputData) {
        // make a new copy of the inputData
        // so we can change the inputData without messing up the other recognizers
        var inputDataClone = assign({}, inputData);

        // is is enabled and allow recognizing?
        if (!boolOrFn(this.options.enable, [this, inputDataClone])) {
            this.reset();
            this.state = STATE_FAILED;
            return;
        }

        // reset when we've reached the end
        if (this.state & (STATE_RECOGNIZED | STATE_CANCELLED | STATE_FAILED)) {
            this.state = STATE_POSSIBLE;
        }

        this.state = this.process(inputDataClone);

        // the recognizer has recognized a gesture
        // so trigger an event
        if (this.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED | STATE_CANCELLED)) {
            this.tryEmit(inputDataClone);
        }
    },

    /**
     * return the state of the recognizer
     * the actual recognizing happens in this method
     * @virtual
     * @param {Object} inputData
     * @returns {Const} STATE
     */
    process: function(inputData) { }, // jshint ignore:line

    /**
     * return the preferred touch-action
     * @virtual
     * @returns {Array}
     */
    getTouchAction: function() { },

    /**
     * called when the gesture isn't allowed to recognize
     * like when another is being recognized or it is disabled
     * @virtual
     */
    reset: function() { }
};

/**
 * get a usable string, used as event postfix
 * @param {Const} state
 * @returns {String} state
 */
function stateStr(state) {
    if (state & STATE_CANCELLED) {
        return 'cancel';
    } else if (state & STATE_ENDED) {
        return 'end';
    } else if (state & STATE_CHANGED) {
        return 'move';
    } else if (state & STATE_BEGAN) {
        return 'start';
    }
    return '';
}

/**
 * direction cons to string
 * @param {Const} direction
 * @returns {String}
 */
function directionStr(direction) {
    if (direction == DIRECTION_DOWN) {
        return 'down';
    } else if (direction == DIRECTION_UP) {
        return 'up';
    } else if (direction == DIRECTION_LEFT) {
        return 'left';
    } else if (direction == DIRECTION_RIGHT) {
        return 'right';
    }
    return '';
}

/**
 * get a recognizer by name if it is bound to a manager
 * @param {Recognizer|String} otherRecognizer
 * @param {Recognizer} recognizer
 * @returns {Recognizer}
 */
function getRecognizerByNameIfManager(otherRecognizer, recognizer) {
    var manager = recognizer.manager;
    if (manager) {
        return manager.get(otherRecognizer);
    }
    return otherRecognizer;
}

/**
 * This recognizer is just used as a base for the simple attribute recognizers.
 * @constructor
 * @extends Recognizer
 */
function AttrRecognizer() {
    Recognizer.apply(this, arguments);
}

inherit(AttrRecognizer, Recognizer, {
    /**
     * @namespace
     * @memberof AttrRecognizer
     */
    defaults: {
        /**
         * @type {Number}
         * @default 1
         */
        pointers: 1
    },

    /**
     * Used to check if it the recognizer receives valid input, like input.distance > 10.
     * @memberof AttrRecognizer
     * @param {Object} input
     * @returns {Boolean} recognized
     */
    attrTest: function(input) {
        var optionPointers = this.options.pointers;
        return optionPointers === 0 || input.pointers.length === optionPointers;
    },

    /**
     * Process the input and return the state for the recognizer
     * @memberof AttrRecognizer
     * @param {Object} input
     * @returns {*} State
     */
    process: function(input) {
        var state = this.state;
        var eventType = input.eventType;

        var isRecognized = state & (STATE_BEGAN | STATE_CHANGED);
        var isValid = this.attrTest(input);

        // on cancel input and we've recognized before, return STATE_CANCELLED
        if (isRecognized && (eventType & INPUT_CANCEL || !isValid)) {
            return state | STATE_CANCELLED;
        } else if (isRecognized || isValid) {
            if (eventType & INPUT_END) {
                return state | STATE_ENDED;
            } else if (!(state & STATE_BEGAN)) {
                return STATE_BEGAN;
            }
            return state | STATE_CHANGED;
        }
        return STATE_FAILED;
    }
});

/**
 * Pan
 * Recognized when the pointer is down and moved in the allowed direction.
 * @constructor
 * @extends AttrRecognizer
 */
function PanRecognizer() {
    AttrRecognizer.apply(this, arguments);

    this.pX = null;
    this.pY = null;
}

inherit(PanRecognizer, AttrRecognizer, {
    /**
     * @namespace
     * @memberof PanRecognizer
     */
    defaults: {
        event: 'pan',
        threshold: 10,
        pointers: 1,
        direction: DIRECTION_ALL
    },

    getTouchAction: function() {
        var direction = this.options.direction;
        var actions = [];
        if (direction & DIRECTION_HORIZONTAL) {
            actions.push(TOUCH_ACTION_PAN_Y);
        }
        if (direction & DIRECTION_VERTICAL) {
            actions.push(TOUCH_ACTION_PAN_X);
        }
        return actions;
    },

    directionTest: function(input) {
        var options = this.options;
        var hasMoved = true;
        var distance = input.distance;
        var direction = input.direction;
        var x = input.deltaX;
        var y = input.deltaY;

        // lock to axis?
        if (!(direction & options.direction)) {
            if (options.direction & DIRECTION_HORIZONTAL) {
                direction = (x === 0) ? DIRECTION_NONE : (x < 0) ? DIRECTION_LEFT : DIRECTION_RIGHT;
                hasMoved = x != this.pX;
                distance = Math.abs(input.deltaX);
            } else {
                direction = (y === 0) ? DIRECTION_NONE : (y < 0) ? DIRECTION_UP : DIRECTION_DOWN;
                hasMoved = y != this.pY;
                distance = Math.abs(input.deltaY);
            }
        }
        input.direction = direction;
        return hasMoved && distance > options.threshold && direction & options.direction;
    },

    attrTest: function(input) {
        return AttrRecognizer.prototype.attrTest.call(this, input) &&
            (this.state & STATE_BEGAN || (!(this.state & STATE_BEGAN) && this.directionTest(input)));
    },

    emit: function(input) {

        this.pX = input.deltaX;
        this.pY = input.deltaY;

        var direction = directionStr(input.direction);

        if (direction) {
            input.additionalEvent = this.options.event + direction;
        }
        this._super.emit.call(this, input);
    }
});

/**
 * Pinch
 * Recognized when two or more pointers are moving toward (zoom-in) or away from each other (zoom-out).
 * @constructor
 * @extends AttrRecognizer
 */
function PinchRecognizer() {
    AttrRecognizer.apply(this, arguments);
}

inherit(PinchRecognizer, AttrRecognizer, {
    /**
     * @namespace
     * @memberof PinchRecognizer
     */
    defaults: {
        event: 'pinch',
        threshold: 0,
        pointers: 2
    },

    getTouchAction: function() {
        return [TOUCH_ACTION_NONE];
    },

    attrTest: function(input) {
        return this._super.attrTest.call(this, input) &&
            (Math.abs(input.scale - 1) > this.options.threshold || this.state & STATE_BEGAN);
    },

    emit: function(input) {
        if (input.scale !== 1) {
            var inOut = input.scale < 1 ? 'in' : 'out';
            input.additionalEvent = this.options.event + inOut;
        }
        this._super.emit.call(this, input);
    }
});

/**
 * Press
 * Recognized when the pointer is down for x ms without any movement.
 * @constructor
 * @extends Recognizer
 */
function PressRecognizer() {
    Recognizer.apply(this, arguments);

    this._timer = null;
    this._input = null;
}

inherit(PressRecognizer, Recognizer, {
    /**
     * @namespace
     * @memberof PressRecognizer
     */
    defaults: {
        event: 'press',
        pointers: 1,
        time: 251, // minimal time of the pointer to be pressed
        threshold: 9 // a minimal movement is ok, but keep it low
    },

    getTouchAction: function() {
        return [TOUCH_ACTION_AUTO];
    },

    process: function(input) {
        var options = this.options;
        var validPointers = input.pointers.length === options.pointers;
        var validMovement = input.distance < options.threshold;
        var validTime = input.deltaTime > options.time;

        this._input = input;

        // we only allow little movement
        // and we've reached an end event, so a tap is possible
        if (!validMovement || !validPointers || (input.eventType & (INPUT_END | INPUT_CANCEL) && !validTime)) {
            this.reset();
        } else if (input.eventType & INPUT_START) {
            this.reset();
            this._timer = setTimeoutContext(function() {
                this.state = STATE_RECOGNIZED;
                this.tryEmit();
            }, options.time, this);
        } else if (input.eventType & INPUT_END) {
            return STATE_RECOGNIZED;
        }
        return STATE_FAILED;
    },

    reset: function() {
        clearTimeout(this._timer);
    },

    emit: function(input) {
        if (this.state !== STATE_RECOGNIZED) {
            return;
        }

        if (input && (input.eventType & INPUT_END)) {
            this.manager.emit(this.options.event + 'up', input);
        } else {
            this._input.timeStamp = now();
            this.manager.emit(this.options.event, this._input);
        }
    }
});

/**
 * Rotate
 * Recognized when two or more pointer are moving in a circular motion.
 * @constructor
 * @extends AttrRecognizer
 */
function RotateRecognizer() {
    AttrRecognizer.apply(this, arguments);
}

inherit(RotateRecognizer, AttrRecognizer, {
    /**
     * @namespace
     * @memberof RotateRecognizer
     */
    defaults: {
        event: 'rotate',
        threshold: 0,
        pointers: 2
    },

    getTouchAction: function() {
        return [TOUCH_ACTION_NONE];
    },

    attrTest: function(input) {
        return this._super.attrTest.call(this, input) &&
            (Math.abs(input.rotation) > this.options.threshold || this.state & STATE_BEGAN);
    }
});

/**
 * Swipe
 * Recognized when the pointer is moving fast (velocity), with enough distance in the allowed direction.
 * @constructor
 * @extends AttrRecognizer
 */
function SwipeRecognizer() {
    AttrRecognizer.apply(this, arguments);
}

inherit(SwipeRecognizer, AttrRecognizer, {
    /**
     * @namespace
     * @memberof SwipeRecognizer
     */
    defaults: {
        event: 'swipe',
        threshold: 10,
        velocity: 0.3,
        direction: DIRECTION_HORIZONTAL | DIRECTION_VERTICAL,
        pointers: 1
    },

    getTouchAction: function() {
        return PanRecognizer.prototype.getTouchAction.call(this);
    },

    attrTest: function(input) {
        var direction = this.options.direction;
        var velocity;

        if (direction & (DIRECTION_HORIZONTAL | DIRECTION_VERTICAL)) {
            velocity = input.overallVelocity;
        } else if (direction & DIRECTION_HORIZONTAL) {
            velocity = input.overallVelocityX;
        } else if (direction & DIRECTION_VERTICAL) {
            velocity = input.overallVelocityY;
        }

        return this._super.attrTest.call(this, input) &&
            direction & input.offsetDirection &&
            input.distance > this.options.threshold &&
            input.maxPointers == this.options.pointers &&
            abs(velocity) > this.options.velocity && input.eventType & INPUT_END;
    },

    emit: function(input) {
        var direction = directionStr(input.offsetDirection);
        if (direction) {
            this.manager.emit(this.options.event + direction, input);
        }

        this.manager.emit(this.options.event, input);
    }
});

/**
 * A tap is ecognized when the pointer is doing a small tap/click. Multiple taps are recognized if they occur
 * between the given interval and position. The delay option can be used to recognize multi-taps without firing
 * a single tap.
 *
 * The eventData from the emitted event contains the property `tapCount`, which contains the amount of
 * multi-taps being recognized.
 * @constructor
 * @extends Recognizer
 */
function TapRecognizer() {
    Recognizer.apply(this, arguments);

    // previous time and center,
    // used for tap counting
    this.pTime = false;
    this.pCenter = false;

    this._timer = null;
    this._input = null;
    this.count = 0;
}

inherit(TapRecognizer, Recognizer, {
    /**
     * @namespace
     * @memberof PinchRecognizer
     */
    defaults: {
        event: 'tap',
        pointers: 1,
        taps: 1,
        interval: 300, // max time between the multi-tap taps
        time: 250, // max time of the pointer to be down (like finger on the screen)
        threshold: 9, // a minimal movement is ok, but keep it low
        posThreshold: 10 // a multi-tap can be a bit off the initial position
    },

    getTouchAction: function() {
        return [TOUCH_ACTION_MANIPULATION];
    },

    process: function(input) {
        var options = this.options;

        var validPointers = input.pointers.length === options.pointers;
        var validMovement = input.distance < options.threshold;
        var validTouchTime = input.deltaTime < options.time;

        this.reset();

        if ((input.eventType & INPUT_START) && (this.count === 0)) {
            return this.failTimeout();
        }

        // we only allow little movement
        // and we've reached an end event, so a tap is possible
        if (validMovement && validTouchTime && validPointers) {
            if (input.eventType != INPUT_END) {
                return this.failTimeout();
            }

            var validInterval = this.pTime ? (input.timeStamp - this.pTime < options.interval) : true;
            var validMultiTap = !this.pCenter || getDistance(this.pCenter, input.center) < options.posThreshold;

            this.pTime = input.timeStamp;
            this.pCenter = input.center;

            if (!validMultiTap || !validInterval) {
                this.count = 1;
            } else {
                this.count += 1;
            }

            this._input = input;

            // if tap count matches we have recognized it,
            // else it has began recognizing...
            var tapCount = this.count % options.taps;
            if (tapCount === 0) {
                // no failing requirements, immediately trigger the tap event
                // or wait as long as the multitap interval to trigger
                if (!this.hasRequireFailures()) {
                    return STATE_RECOGNIZED;
                } else {
                    this._timer = setTimeoutContext(function() {
                        this.state = STATE_RECOGNIZED;
                        this.tryEmit();
                    }, options.interval, this);
                    return STATE_BEGAN;
                }
            }
        }
        return STATE_FAILED;
    },

    failTimeout: function() {
        this._timer = setTimeoutContext(function() {
            this.state = STATE_FAILED;
        }, this.options.interval, this);
        return STATE_FAILED;
    },

    reset: function() {
        clearTimeout(this._timer);
    },

    emit: function() {
        if (this.state == STATE_RECOGNIZED) {
            this._input.tapCount = this.count;
            this.manager.emit(this.options.event, this._input);
        }
    }
});

/**
 * Simple way to create a manager with a default set of recognizers.
 * @param {HTMLElement} element
 * @param {Object} [options]
 * @constructor
 */
function Hammer(element, options) {
    options = options || {};
    options.recognizers = ifUndefined(options.recognizers, Hammer.defaults.preset);
    return new Manager(element, options);
}

/**
 * @const {string}
 */
Hammer.VERSION = '2.0.7';

/**
 * default settings
 * @namespace
 */
Hammer.defaults = {
    /**
     * set if DOM events are being triggered.
     * But this is slower and unused by simple implementations, so disabled by default.
     * @type {Boolean}
     * @default false
     */
    domEvents: false,

    /**
     * The value for the touchAction property/fallback.
     * When set to `compute` it will magically set the correct value based on the added recognizers.
     * @type {String}
     * @default compute
     */
    touchAction: TOUCH_ACTION_COMPUTE,

    /**
     * @type {Boolean}
     * @default true
     */
    enable: true,

    /**
     * EXPERIMENTAL FEATURE -- can be removed/changed
     * Change the parent input target element.
     * If Null, then it is being set the to main element.
     * @type {Null|EventTarget}
     * @default null
     */
    inputTarget: null,

    /**
     * force an input class
     * @type {Null|Function}
     * @default null
     */
    inputClass: null,

    /**
     * Default recognizer setup when calling `Hammer()`
     * When creating a new Manager these will be skipped.
     * @type {Array}
     */
    preset: [
        // RecognizerClass, options, [recognizeWith, ...], [requireFailure, ...]
        [RotateRecognizer, {enable: false}],
        [PinchRecognizer, {enable: false}, ['rotate']],
        [SwipeRecognizer, {direction: DIRECTION_HORIZONTAL}],
        [PanRecognizer, {direction: DIRECTION_HORIZONTAL}, ['swipe']],
        [TapRecognizer],
        [TapRecognizer, {event: 'doubletap', taps: 2}, ['tap']],
        [PressRecognizer]
    ],

    /**
     * Some CSS properties can be used to improve the working of Hammer.
     * Add them to this method and they will be set when creating a new Manager.
     * @namespace
     */
    cssProps: {
        /**
         * Disables text selection to improve the dragging gesture. Mainly for desktop browsers.
         * @type {String}
         * @default 'none'
         */
        userSelect: 'none',

        /**
         * Disable the Windows Phone grippers when pressing an element.
         * @type {String}
         * @default 'none'
         */
        touchSelect: 'none',

        /**
         * Disables the default callout shown when you touch and hold a touch target.
         * On iOS, when you touch and hold a touch target such as a link, Safari displays
         * a callout containing information about the link. This property allows you to disable that callout.
         * @type {String}
         * @default 'none'
         */
        touchCallout: 'none',

        /**
         * Specifies whether zooming is enabled. Used by IE10>
         * @type {String}
         * @default 'none'
         */
        contentZooming: 'none',

        /**
         * Specifies that an entire element should be draggable instead of its contents. Mainly for desktop browsers.
         * @type {String}
         * @default 'none'
         */
        userDrag: 'none',

        /**
         * Overrides the highlight color shown when the user taps a link or a JavaScript
         * clickable element in iOS. This property obeys the alpha value, if specified.
         * @type {String}
         * @default 'rgba(0,0,0,0)'
         */
        tapHighlightColor: 'rgba(0,0,0,0)'
    }
};

var STOP = 1;
var FORCED_STOP = 2;

/**
 * Manager
 * @param {HTMLElement} element
 * @param {Object} [options]
 * @constructor
 */
function Manager(element, options) {
    this.options = assign({}, Hammer.defaults, options || {});

    this.options.inputTarget = this.options.inputTarget || element;

    this.handlers = {};
    this.session = {};
    this.recognizers = [];
    this.oldCssProps = {};

    this.element = element;
    this.input = createInputInstance(this);
    this.touchAction = new TouchAction(this, this.options.touchAction);

    toggleCssProps(this, true);

    each(this.options.recognizers, function(item) {
        var recognizer = this.add(new (item[0])(item[1]));
        item[2] && recognizer.recognizeWith(item[2]);
        item[3] && recognizer.requireFailure(item[3]);
    }, this);
}

Manager.prototype = {
    /**
     * set options
     * @param {Object} options
     * @returns {Manager}
     */
    set: function(options) {
        assign(this.options, options);

        // Options that need a little more setup
        if (options.touchAction) {
            this.touchAction.update();
        }
        if (options.inputTarget) {
            // Clean up existing event listeners and reinitialize
            this.input.destroy();
            this.input.target = options.inputTarget;
            this.input.init();
        }
        return this;
    },

    /**
     * stop recognizing for this session.
     * This session will be discarded, when a new [input]start event is fired.
     * When forced, the recognizer cycle is stopped immediately.
     * @param {Boolean} [force]
     */
    stop: function(force) {
        this.session.stopped = force ? FORCED_STOP : STOP;
    },

    /**
     * run the recognizers!
     * called by the inputHandler function on every movement of the pointers (touches)
     * it walks through all the recognizers and tries to detect the gesture that is being made
     * @param {Object} inputData
     */
    recognize: function(inputData) {
        var session = this.session;
        if (session.stopped) {
            return;
        }

        // run the touch-action polyfill
        this.touchAction.preventDefaults(inputData);

        var recognizer;
        var recognizers = this.recognizers;

        // this holds the recognizer that is being recognized.
        // so the recognizer's state needs to be BEGAN, CHANGED, ENDED or RECOGNIZED
        // if no recognizer is detecting a thing, it is set to `null`
        var curRecognizer = session.curRecognizer;

        // reset when the last recognizer is recognized
        // or when we're in a new session
        if (!curRecognizer || (curRecognizer && curRecognizer.state & STATE_RECOGNIZED)) {
            curRecognizer = session.curRecognizer = null;
        }

        var i = 0;
        while (i < recognizers.length) {
            recognizer = recognizers[i];

            // find out if we are allowed try to recognize the input for this one.
            // 1.   allow if the session is NOT forced stopped (see the .stop() method)
            // 2.   allow if we still haven't recognized a gesture in this session, or the this recognizer is the one
            //      that is being recognized.
            // 3.   allow if the recognizer is allowed to run simultaneous with the current recognized recognizer.
            //      this can be setup with the `recognizeWith()` method on the recognizer.
            if (session.stopped !== FORCED_STOP && ( // 1
                    !curRecognizer || recognizer == curRecognizer || // 2
                    recognizer.canRecognizeWith(curRecognizer))) { // 3
                recognizer.recognize(inputData);
            } else {
                recognizer.reset();
            }

            // if the recognizer has been recognizing the input as a valid gesture, we want to store this one as the
            // current active recognizer. but only if we don't already have an active recognizer
            if (!curRecognizer && recognizer.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED)) {
                curRecognizer = session.curRecognizer = recognizer;
            }
            i++;
        }
    },

    /**
     * get a recognizer by its event name.
     * @param {Recognizer|String} recognizer
     * @returns {Recognizer|Null}
     */
    get: function(recognizer) {
        if (recognizer instanceof Recognizer) {
            return recognizer;
        }

        var recognizers = this.recognizers;
        for (var i = 0; i < recognizers.length; i++) {
            if (recognizers[i].options.event == recognizer) {
                return recognizers[i];
            }
        }
        return null;
    },

    /**
     * add a recognizer to the manager
     * existing recognizers with the same event name will be removed
     * @param {Recognizer} recognizer
     * @returns {Recognizer|Manager}
     */
    add: function(recognizer) {
        if (invokeArrayArg(recognizer, 'add', this)) {
            return this;
        }

        // remove existing
        var existing = this.get(recognizer.options.event);
        if (existing) {
            this.remove(existing);
        }

        this.recognizers.push(recognizer);
        recognizer.manager = this;

        this.touchAction.update();
        return recognizer;
    },

    /**
     * remove a recognizer by name or instance
     * @param {Recognizer|String} recognizer
     * @returns {Manager}
     */
    remove: function(recognizer) {
        if (invokeArrayArg(recognizer, 'remove', this)) {
            return this;
        }

        recognizer = this.get(recognizer);

        // let's make sure this recognizer exists
        if (recognizer) {
            var recognizers = this.recognizers;
            var index = inArray(recognizers, recognizer);

            if (index !== -1) {
                recognizers.splice(index, 1);
                this.touchAction.update();
            }
        }

        return this;
    },

    /**
     * bind event
     * @param {String} events
     * @param {Function} handler
     * @returns {EventEmitter} this
     */
    on: function(events, handler) {
        if (events === undefined) {
            return;
        }
        if (handler === undefined) {
            return;
        }

        var handlers = this.handlers;
        each(splitStr(events), function(event) {
            handlers[event] = handlers[event] || [];
            handlers[event].push(handler);
        });
        return this;
    },

    /**
     * unbind event, leave emit blank to remove all handlers
     * @param {String} events
     * @param {Function} [handler]
     * @returns {EventEmitter} this
     */
    off: function(events, handler) {
        if (events === undefined) {
            return;
        }

        var handlers = this.handlers;
        each(splitStr(events), function(event) {
            if (!handler) {
                delete handlers[event];
            } else {
                handlers[event] && handlers[event].splice(inArray(handlers[event], handler), 1);
            }
        });
        return this;
    },

    /**
     * emit event to the listeners
     * @param {String} event
     * @param {Object} data
     */
    emit: function(event, data) {
        // we also want to trigger dom events
        if (this.options.domEvents) {
            triggerDomEvent(event, data);
        }

        // no handlers, so skip it all
        var handlers = this.handlers[event] && this.handlers[event].slice();
        if (!handlers || !handlers.length) {
            return;
        }

        data.type = event;
        data.preventDefault = function() {
            data.srcEvent.preventDefault();
        };

        var i = 0;
        while (i < handlers.length) {
            handlers[i](data);
            i++;
        }
    },

    /**
     * destroy the manager and unbinds all events
     * it doesn't unbind dom events, that is the user own responsibility
     */
    destroy: function() {
        this.element && toggleCssProps(this, false);

        this.handlers = {};
        this.session = {};
        this.input.destroy();
        this.element = null;
    }
};

/**
 * add/remove the css properties as defined in manager.options.cssProps
 * @param {Manager} manager
 * @param {Boolean} add
 */
function toggleCssProps(manager, add) {
    var element = manager.element;
    if (!element.style) {
        return;
    }
    var prop;
    each(manager.options.cssProps, function(value, name) {
        prop = prefixed(element.style, name);
        if (add) {
            manager.oldCssProps[prop] = element.style[prop];
            element.style[prop] = value;
        } else {
            element.style[prop] = manager.oldCssProps[prop] || '';
        }
    });
    if (!add) {
        manager.oldCssProps = {};
    }
}

/**
 * trigger dom event
 * @param {String} event
 * @param {Object} data
 */
function triggerDomEvent(event, data) {
    var gestureEvent = document.createEvent('Event');
    gestureEvent.initEvent(event, true, true);
    gestureEvent.gesture = data;
    data.target.dispatchEvent(gestureEvent);
}

assign(Hammer, {
    INPUT_START: INPUT_START,
    INPUT_MOVE: INPUT_MOVE,
    INPUT_END: INPUT_END,
    INPUT_CANCEL: INPUT_CANCEL,

    STATE_POSSIBLE: STATE_POSSIBLE,
    STATE_BEGAN: STATE_BEGAN,
    STATE_CHANGED: STATE_CHANGED,
    STATE_ENDED: STATE_ENDED,
    STATE_RECOGNIZED: STATE_RECOGNIZED,
    STATE_CANCELLED: STATE_CANCELLED,
    STATE_FAILED: STATE_FAILED,

    DIRECTION_NONE: DIRECTION_NONE,
    DIRECTION_LEFT: DIRECTION_LEFT,
    DIRECTION_RIGHT: DIRECTION_RIGHT,
    DIRECTION_UP: DIRECTION_UP,
    DIRECTION_DOWN: DIRECTION_DOWN,
    DIRECTION_HORIZONTAL: DIRECTION_HORIZONTAL,
    DIRECTION_VERTICAL: DIRECTION_VERTICAL,
    DIRECTION_ALL: DIRECTION_ALL,

    Manager: Manager,
    Input: Input,
    TouchAction: TouchAction,

    TouchInput: TouchInput,
    MouseInput: MouseInput,
    PointerEventInput: PointerEventInput,
    TouchMouseInput: TouchMouseInput,
    SingleTouchInput: SingleTouchInput,

    Recognizer: Recognizer,
    AttrRecognizer: AttrRecognizer,
    Tap: TapRecognizer,
    Pan: PanRecognizer,
    Swipe: SwipeRecognizer,
    Pinch: PinchRecognizer,
    Rotate: RotateRecognizer,
    Press: PressRecognizer,

    on: addEventListeners,
    off: removeEventListeners,
    each: each,
    merge: merge,
    extend: extend,
    assign: assign,
    inherit: inherit,
    bindFn: bindFn,
    prefixed: prefixed
});

// this prevents errors when Hammer is loaded in the presence of an AMD
//  style loader but by script tag, not by the loader.
var freeGlobal = (typeof window !== 'undefined' ? window : (typeof self !== 'undefined' ? self : {})); // jshint ignore:line
freeGlobal.Hammer = Hammer;

if (true) {
    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {
        return Hammer;
    }).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
} else {}

})(window, document, 'Hammer');


/***/ }),

/***/ "./node_modules/is-buffer/index.js":
/*!*****************************************!*\
  !*** ./node_modules/is-buffer/index.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */

// The _isBuffer check is for Safari 5-7 support, because it's missing
// Object.prototype.constructor. Remove this eventually
module.exports = function (obj) {
  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)
}

function isBuffer (obj) {
  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
}

// For Node v0.10 support. Remove this eventually.
function isSlowBuffer (obj) {
  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))
}


/***/ }),

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),

/***/ "./static/js/Core.ts":
/*!***************************!*\
  !*** ./static/js/Core.ts ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var components_1 = __webpack_require__(/*! ./components */ "./static/js/components/index.ts");
var pages_1 = __webpack_require__(/*! ./pages */ "./static/js/pages/index.ts");
var components_2 = __webpack_require__(/*! ./components */ "./static/js/components/index.ts");
var forms_1 = __webpack_require__(/*! ./forms */ "./static/js/forms/index.ts");
var util_1 = __webpack_require__(/*! ./util */ "./static/js/util/index.ts");
var SELECTORS = {
    MDC_BUTTONS: '.mdc-button',
};
var Core = (function () {
    function Core(page) {
        this.page = page;
        this.phase = document.body.dataset.phase;
        this.header = new components_1.Header(this);
        this.footer = new components_1.Footer(this);
        this.mdcButtons = util_1.nodeListToArray(document.querySelectorAll(SELECTORS.MDC_BUTTONS));
        this.prefersReducedMotion = window.matchMedia('(prefers-reduced-motion)').matches;
    }
    Core.prototype.init = function () {
        this.mdcButtons.forEach(function (button) {
            if (util_1.Ripple) {
                new util_1.Ripple(button);
            }
        });
        if (this.prefersReducedMotion) {
            document.documentElement.classList.add(util_1.ACTION_CLASSES.REDUCE_MOTION);
        }
        this.angularBootstrap();
        if (!this.page) {
            return;
        }
        switch (this.page) {
            case 'competition-info':
                this.cardStack = new components_2.CardStack();
                this.ajaxModal = new components_2.AjaxModal(this);
                if (!this.prefersReducedMotion) {
                    new components_2.AnimateShapes();
                }
                break;
            case 'educator-resources':
                this.cardStack = new components_2.CardStack();
                break;
            case 'student-resources':
                this.cardStack = new components_2.CardStack();
                break;
            case 'faq':
                new components_2.ScrollTo();
                new components_2.Accordion();
                break;
            case 'home':
                if (this.phase === 'open') {
                    this.cardStack = new components_2.CardStack();
                    this.ajaxModal = new components_2.AjaxModal(this);
                    new components_2.CategoryFilter();
                    this.home = new pages_1.Home(this);
                    if (!this.prefersReducedMotion) {
                        this.homeConclusionShapes = new components_2.HomeConclusionShapes();
                    }
                    this.homeNumberAnimations = new components_2.HomeNumberAnimation(this);
                    this.homeThoughtStarter = new components_2.HomeThoughtStarter(this);
                    this.homeVideoPlayer = new components_2.HomeVideoPlayer();
                }
                else if (this.phase === 'judging') {
                    this.home = new pages_1.Home(this);
                    new forms_1.TeaserForm(this);
                    this.forms = new forms_1.Forms(this);
                    this.homeThoughtStarter = new components_2.HomeThoughtStarter();
                    this.homeVideoPlayer = new components_2.HomeVideoPlayer();
                    this.ajaxModal = new components_2.AjaxModal(this);
                }
                else {
                    this.home = new pages_1.Home(this);
                    new forms_1.TeaserForm(this);
                    this.forms = new forms_1.Forms(this);
                    this.ajaxModal = new components_2.AjaxModal(this);
                }
                break;
            case 'competition-past-projects':
                this.ajaxModal = new components_2.AjaxModal(this);
                var listAccordion = new components_2.ListAccordion('.js-past-projects-list', '.js-past-projects-button');
                new components_2.CategoryFilter(listAccordion.expandList);
                break;
            case 'register':
                new components_1.StickyBar(true);
                this.register = new pages_1.Register(this);
                this.forms = new forms_1.Forms(this);
                break;
            case 'styleguide':
                this.styleguide = new pages_1.Styleguide(this);
                this.forms = new forms_1.Forms(this);
                break;
            case 'teaser':
                this.teaser = new pages_1.Teaser(this);
                this.forms = new forms_1.Forms(this);
                break;
            case 'dashboard':
                new pages_1.Dashboard(this);
                new components_1.StickyBar(true);
                new components_2.Alert(this);
                break;
            case 'your-project-about-me':
                this.forms = new forms_1.Forms(this);
                this.stepForm = new forms_1.StepForm(this);
                break;
            case 'your-project-bibliography':
                this.forms = new forms_1.Forms(this);
                this.stepForm = new forms_1.StepForm(this);
                break;
            case 'your-project-health-safety':
                this.forms = new forms_1.Forms(this);
                this.stepForm = new forms_1.StepForm(this);
                break;
            case 'project-preview':
                new components_1.StickyBar(true);
                new components_2.ScrollTo();
                this.projectPreview = new pages_1.ProjectPreview(this);
                break;
            case 'your-project-submit-review':
                new components_2.ScrollTo();
                new components_1.StickyBar(true);
                break;
            case 'your-project-summary':
                this.forms = new forms_1.Forms(this);
                this.stepSummaryForm = new forms_1.StepSummaryForm(this);
                break;
            case 'your-project-question':
                this.forms = new forms_1.Forms(this);
                this.stepForm = new forms_1.StepForm(this);
                break;
            case 'your-project-research':
                this.forms = new forms_1.Forms(this);
                this.stepForm = new forms_1.StepForm(this);
                break;
            case 'your-project-method':
                this.forms = new forms_1.Forms(this);
                this.stepForm = new forms_1.StepForm(this);
                break;
            case 'your-project-results':
                this.forms = new forms_1.Forms(this);
                this.stepForm = new forms_1.StepForm(this);
                break;
            case 'your-project-conclusion':
                this.forms = new forms_1.Forms(this);
                this.stepForm = new forms_1.StepForm(this);
                break;
            case 'your-account':
                new components_2.ScrollTo();
                this.forms = new forms_1.Forms(this);
                this.profile = new forms_1.Profile(this);
                break;
            case 'your-account-team':
                new components_2.ScrollTo();
                this.forms = new forms_1.Forms(this);
                this.teamForm = new forms_1.TeamForm(this);
                break;
            case 'your-account-consent':
                new components_2.ScrollTo();
                this.forms = new forms_1.Forms(this);
                new forms_1.ConsentForm(this);
                break;
            case 'your-project-submit-checklist':
                new forms_1.CheckList(this);
                new components_1.StickyBar(true);
                break;
            case 'parental-consent':
                new forms_1.ParentalConsent(this);
                new components_1.StickyBar(true);
                break;
            case 'your-project-inspiring-educator':
                this.forms = new forms_1.Forms(this);
                new forms_1.InspiringEducator(this);
                break;
        }
        if (this.page.includes('student-resources-') || this.page.includes('educator-resources-')) {
            new components_2.ResourceNav();
            if (!this.prefersReducedMotion) {
                new components_2.AnimateShapes();
            }
        }
    };
    Core.prototype.angularBootstrap = function () {
        angular.module('gsf', [
            glue.lite.module.name,
            glue.ng.carousel.module.name,
            glue.ng.carousel.breakpoints.module.name,
            glue.ng.pagination.module.name,
            glue.ng.zippy.module.name,
            glue.ng.zippy.set.module.name,
            glue.ng.zippy.toggleAll.module.name,
            glue.ng.tabby.module.name,
            hercules.templates.module.name,
            hercules.components.header.module.name,
        ])
            .value('glueZippySmoothExpandFxDuration', 300)
            .value('glueModalServiceStoreRouteDisable', true)
            .config(['$provide', function ($provide) {
                $provide.decorator('$browser', ['$delegate', function ($delegate) {
                        $delegate.onUrlChange = function () { };
                        $delegate.url = function () { return ''; };
                        return $delegate;
                    }]);
            }]);
        glue.app.bootstrap('gsf');
    };
    return Core;
}());
exports.default = Core;


/***/ }),

/***/ "./static/js/app.ts":
/*!**************************!*\
  !*** ./static/js/app.ts ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Core_1 = __webpack_require__(/*! ./Core */ "./static/js/Core.ts");
var core = new Core_1.default(document.body.dataset['page']);
core.init();


/***/ }),

/***/ "./static/js/components/Accordion.ts":
/*!*******************************************!*\
  !*** ./static/js/components/Accordion.ts ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_decorators_1 = __webpack_require__(/*! core-decorators */ "./node_modules/core-decorators/es/core-decorators.js");
var util_1 = __webpack_require__(/*! ../util */ "./static/js/util/index.ts");
var DEFAULT_ANIMATION_TIMING = 0.5;
var LINK_SELECTOR = '.js-accordion-item';
var PANEL_SELECTOR = '.js-accordion-panel';
var Accordion = (function () {
    function Accordion() {
        var linkElements = util_1.nodeListToArray(document.querySelectorAll(LINK_SELECTOR));
        this.items = linkElements.map(function (element) {
            var targetId = element.getAttribute('href');
            var target = targetId ? document.querySelector(targetId) : null;
            return {
                link: element,
                targetId: targetId || '',
                target: target,
                panel: target ? target.querySelector(PANEL_SELECTOR) : null,
                isExpanded: false,
            };
        });
        if (this.items) {
            this.init();
        }
    }
    Accordion.prototype.init = function () {
        this.checkHash();
        this.bindEvents();
    };
    Accordion.prototype.bindEvents = function () {
        var _this = this;
        this.items.forEach(function (item) {
            item.link.addEventListener('click', function (e) {
                e.preventDefault();
                _this.handleAccordionClick(item);
            });
        });
        window.addEventListener('popstate', this.checkHash);
    };
    Accordion.prototype.handleAccordionClick = function (item) {
        if (item.isExpanded) {
            this.collapseItem(item);
        }
        else {
            this.expandItem(item);
        }
    };
    Accordion.prototype.checkHash = function () {
        var _this = this;
        var currentHash = window.location.hash;
        this.items.forEach(function (item) {
            if (currentHash === item.targetId) {
                setTimeout(function () {
                    var currentScroll = window.scrollY || document.documentElement.scrollTop;
                    if (item.panel) {
                        window.scrollTo(0, currentScroll - (item.panel.offsetHeight));
                    }
                }, 10);
                _this.expandItem(item);
            }
        });
    };
    Accordion.prototype.collapseItem = function (item) {
        if (!item.isExpanded) {
            return;
        }
        item.isExpanded = false;
        window.history.replaceState(null, undefined, ' ');
        TweenMax.to(item.target, DEFAULT_ANIMATION_TIMING, {
            height: 0,
            ease: Quad.easeOut,
            onStart: function () {
                item.link.setAttribute('aria-expanded', 'false');
                if (item.target) {
                    item.target.setAttribute('aria-expanded', 'false');
                }
            },
        });
    };
    Accordion.prototype.expandItem = function (item) {
        if (item.isExpanded || !item.panel) {
            return;
        }
        item.isExpanded = true;
        window.history.replaceState(null, undefined, item.targetId);
        TweenMax.to(item.target, DEFAULT_ANIMATION_TIMING, {
            height: item.panel.offsetHeight,
            ease: Quad.easeOut,
            onStart: function () {
                item.link.setAttribute('aria-expanded', 'true');
                if (item.target) {
                    item.target.setAttribute('aria-expanded', 'true');
                }
            },
        });
    };
    __decorate([
        core_decorators_1.autobind
    ], Accordion.prototype, "handleAccordionClick", null);
    __decorate([
        core_decorators_1.autobind
    ], Accordion.prototype, "checkHash", null);
    return Accordion;
}());
exports.Accordion = Accordion;


/***/ }),

/***/ "./static/js/components/AgeRangeRestriction.ts":
/*!*****************************************************!*\
  !*** ./static/js/components/AgeRangeRestriction.ts ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_decorators_1 = __webpack_require__(/*! core-decorators */ "./node_modules/core-decorators/es/core-decorators.js");
var util_1 = __webpack_require__(/*! ../util */ "./static/js/util/index.ts");
var UPPER_AGE_RANGE_COUNTRIES = new Set(['AT', 'BE', 'BG', 'HR', 'CY', 'CZ', 'DK', 'EE',
    'FI', 'FR', 'DE', 'GR', 'HU', 'IE', 'IT', 'LV', 'LT', 'LU', 'MT', 'NL', 'PL', 'PT',
    'RO', 'SK', 'SI', 'ES', 'SE', 'UK', 'GB']);
var MID_AGE_RANGE_COUNTRIES = new Set(['IL', 'KR']);
var AgeRangeRestrictions = (function () {
    function AgeRangeRestrictions(country, ageRangeContainer, registerTerms) {
        this.ageRange = '';
        this.country = country;
        this.registerTerms = registerTerms;
        this.ageRangeContainer = ageRangeContainer;
        this.ageRanges = util_1.nodeListToArray(this.ageRangeContainer
            .querySelectorAll('input'));
        this.ageRangeLabels = util_1.nodeListToArray(this.ageRangeContainer
            .querySelectorAll('label'));
        this.country.addEventListener('change', this.handleCountryChange);
        this.init();
    }
    AgeRangeRestrictions.prototype.init = function () {
        var _this = this;
        this.ageRanges.forEach(function (input) {
            input.addEventListener('change', _this.handleAgeChange);
            if (input.checked) {
                _this.ageRange = input.value;
            }
        });
        this.setAgeVisibility();
    };
    AgeRangeRestrictions.prototype.handleCountryChange = function () {
        this.resetAges();
        this.setAgeVisibility();
    };
    AgeRangeRestrictions.prototype.handleAgeChange = function (event) {
        if (event.target.checked) {
            this.ageRange = event.target.value;
        }
    };
    AgeRangeRestrictions.prototype.resetAges = function () {
        this.ageRanges.forEach(function (range) {
            range.checked = false;
            range.disabled = false;
        });
        this.ageRangeLabels.forEach(function (label) {
            label.classList.remove(util_1.ACTION_CLASSES.HIDDEN);
            label.classList.remove(util_1.ACTION_CLASSES.ACTIVE);
        });
        this.ageRange = '';
    };
    AgeRangeRestrictions.prototype.setAgeVisibility = function () {
        var upperAgeRange = UPPER_AGE_RANGE_COUNTRIES.has(this.country.value);
        var midAgeRange = MID_AGE_RANGE_COUNTRIES.has(this.country.value);
        if (upperAgeRange) {
            this.setAgeInputsHidden(new Set(['13-15', '14-15']));
            this.registerTerms && this.registerTerms.classList.remove(util_1.ACTION_CLASSES.HIDDEN);
        }
        else if (midAgeRange) {
            this.setAgeInputsHidden(new Set(['13-15']));
            this.registerTerms && this.registerTerms.classList.add(util_1.ACTION_CLASSES.HIDDEN);
        }
        else {
            this.setAgeInputsHidden(new Set(['14-15']));
            this.registerTerms && this.registerTerms.classList.add(util_1.ACTION_CLASSES.HIDDEN);
        }
    };
    AgeRangeRestrictions.prototype.setAgeInputsHidden = function (rangeString) {
        var _this = this;
        this.ageRanges.map(function (range) {
            if (rangeString.has(range.value)) {
                return range;
            }
        }).forEach(function (input) {
            if (!input) {
                return;
            }
            input.disabled = true;
            _this.ageRangeContainer.querySelector("label[for=\"" + input.id + "\"]")
                .classList.add(util_1.ACTION_CLASSES.HIDDEN);
        });
    };
    __decorate([
        core_decorators_1.autobind
    ], AgeRangeRestrictions.prototype, "init", null);
    __decorate([
        core_decorators_1.autobind
    ], AgeRangeRestrictions.prototype, "handleCountryChange", null);
    __decorate([
        core_decorators_1.autobind
    ], AgeRangeRestrictions.prototype, "handleAgeChange", null);
    __decorate([
        core_decorators_1.autobind
    ], AgeRangeRestrictions.prototype, "resetAges", null);
    __decorate([
        core_decorators_1.autobind
    ], AgeRangeRestrictions.prototype, "setAgeVisibility", null);
    __decorate([
        core_decorators_1.autobind
    ], AgeRangeRestrictions.prototype, "setAgeInputsHidden", null);
    return AgeRangeRestrictions;
}());
exports.default = AgeRangeRestrictions;


/***/ }),

/***/ "./static/js/components/AjaxModal.ts":
/*!*******************************************!*\
  !*** ./static/js/components/AjaxModal.ts ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = __webpack_require__(/*! ../util */ "./static/js/util/index.ts");
var core_decorators_1 = __webpack_require__(/*! core-decorators */ "./node_modules/core-decorators/es/core-decorators.js");
var SELECTORS = {
    MODAL: '.js-modal-container',
    MODAL_LINK: '.js-modal-link',
    MODAL_CLOSE: '.h-c-modal__close',
    MODAL_OVERLAY: '.glue-c-modal__overlay',
    MODAL_CONTENT: '.glue-c-modal__content',
};
var loaderHtml = "\n<div role=\"progressbar\" class=\"mdc-linear-progress mdc-linear-progress--indeterminate\">\n  <div class=\"mdc-linear-progress__buffering-dots\"></div>\n  <div class=\"mdc-linear-progress__buffer\"></div>\n  <div class=\"mdc-linear-progress__bar mdc-linear-progress__primary-bar\">\n    <span class=\"mdc-linear-progress__bar-inner\"></span>\n  </div>\n  <div class=\"mdc-linear-progress__bar mdc-linear-progress__secondary-bar\">\n    <span class=\"mdc-linear-progress__bar-inner\"></span>\n  </div>\n</div>\n";
var AjaxModal = (function () {
    function AjaxModal(core) {
        this.core = core;
        this.modalLinks = util_1.nodeListToArray(document.querySelectorAll(SELECTORS.MODAL_LINK));
        this.modal = document.querySelector(SELECTORS.MODAL);
        this.modalCloseButton = this.modal.querySelector(SELECTORS.MODAL_CLOSE);
        this.modalOverlay = this.modal.querySelector(SELECTORS.MODAL_OVERLAY);
        this.attachEvents();
    }
    AjaxModal.prototype.attachEvents = function () {
        var _this = this;
        this.modalLinks.forEach(function (link) {
            link.addEventListener('click', _this.handleModalLinkClick);
        });
        if (this.modalCloseButton) {
            this.modalCloseButton.addEventListener('click', this.onModalClose);
        }
        document.addEventListener('keydown', function (e) {
            var keyEvent = e;
            if (keyEvent.code === 'Escape') {
                _this.onModalClose();
            }
        });
        this.modalOverlay.addEventListener('click', function (e) {
            if (e.currentTarget !== e.target) {
                return;
            }
            _this.onModalClose();
        });
    };
    AjaxModal.prototype.handleModalLinkClick = function (e) {
        if (e.currentTarget === null) {
            return;
        }
        var modalContentContainer = this.modal
            .querySelector(SELECTORS.MODAL_CONTENT);
        modalContentContainer.innerHTML = loaderHtml;
        var target = e.currentTarget.href;
        util_1.axiosInstance.get(target).then(function (response) {
            var responseHtml = response.data;
            var wrapper = document.createElement('div');
            wrapper.innerHTML = responseHtml;
            var content = wrapper.querySelector('#content');
            if (content === null) {
                return;
            }
            modalContentContainer.innerHTML = '';
            modalContentContainer.appendChild(content);
        });
    };
    AjaxModal.prototype.onModalClose = function () {
        var modalContentContainer = this.modal
            .querySelector(SELECTORS.MODAL_CONTENT);
        modalContentContainer.innerHTML = '';
    };
    __decorate([
        core_decorators_1.autobind
    ], AjaxModal.prototype, "handleModalLinkClick", null);
    __decorate([
        core_decorators_1.autobind
    ], AjaxModal.prototype, "onModalClose", null);
    return AjaxModal;
}());
exports.default = AjaxModal;


/***/ }),

/***/ "./static/js/components/Alert.ts":
/*!***************************************!*\
  !*** ./static/js/components/Alert.ts ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = __webpack_require__(/*! ../util */ "./static/js/util/index.ts");
var core_decorators_1 = __webpack_require__(/*! core-decorators */ "./node_modules/core-decorators/es/core-decorators.js");
var SELECTORS = {
    ALERTS: '.js-alert',
    DISMISS_BUTTONS: '.js-dismiss-alert',
};
var Alert = (function () {
    function Alert(core) {
        this.core = core;
        this.dismissButtons = util_1.nodeListToArray(document.querySelectorAll(SELECTORS.DISMISS_BUTTONS));
        this.alerts = util_1.nodeListToArray(document.querySelectorAll(SELECTORS.ALERTS));
        this.cookieValue = util_1.readCookie('alert-dismissed') !== null ?
            new Set(util_1.readCookie('alert-dismissed').replace(/"/g, '').split(',')) : new Set();
        this.init();
    }
    Alert.prototype.init = function () {
        var _this = this;
        this.setAlertVisibility();
        this.dismissButtons.forEach(function (button) {
            button.addEventListener('click', _this.handleDismiss);
        });
    };
    Alert.prototype.tearDown = function () {
        var _this = this;
        this.dismissButtons.forEach(function (button) {
            button.removeEventListener('click', _this.handleDismiss);
        });
    };
    Alert.prototype.setAlertVisibility = function () {
        var _this = this;
        this.alerts.forEach(function (alert) {
            if (_this.cookieValue.has(alert.dataset.alert)) {
                alert.classList.add(util_1.ACTION_CLASSES.HIDDEN);
            }
        });
    };
    Alert.prototype.handleDismiss = function (e) {
        e.preventDefault();
        var alertType = e.currentTarget.dataset.alert;
        if (!alertType) {
            return;
        }
        this.cookieValue = this.cookieValue.add(alertType.replace(/"/g, ''));
        util_1.writeCookie('alert-dismissed', Array.from(this.cookieValue).toString());
        this.setAlertVisibility();
    };
    __decorate([
        core_decorators_1.autobind
    ], Alert.prototype, "init", null);
    __decorate([
        core_decorators_1.autobind
    ], Alert.prototype, "tearDown", null);
    __decorate([
        core_decorators_1.autobind
    ], Alert.prototype, "setAlertVisibility", null);
    __decorate([
        core_decorators_1.autobind
    ], Alert.prototype, "handleDismiss", null);
    return Alert;
}());
exports.default = Alert;


/***/ }),

/***/ "./static/js/components/AnimateShapes.ts":
/*!***********************************************!*\
  !*** ./static/js/components/AnimateShapes.ts ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_decorators_1 = __webpack_require__(/*! core-decorators */ "./node_modules/core-decorators/es/core-decorators.js");
var util_1 = __webpack_require__(/*! ../util */ "./static/js/util/index.ts");
var SELECTORS = {
    SHAPES_CONTAINER: '.js-animate-shapes',
};
var AnimateShapes = (function () {
    function AnimateShapes() {
        var _this = this;
        this.shapesContainer = document.querySelector(SELECTORS.SHAPES_CONTAINER);
        this.shapePaths = util_1.nodeListToArray(this.shapesContainer.querySelectorAll('path, polygon'));
        this.shapesToAnimate = this.shapePaths.map(function (path) {
            path.style.opacity = '1';
            return {
                el: path,
                xFactor: _this.getRandomInt(30, 70),
                yFactor: _this.getRandomInt(5, 120),
                direction: path.getBoundingClientRect().left <= (window.innerWidth / 2) ? -1 : 1,
            };
        });
        this.handleScroll();
        this.init();
    }
    AnimateShapes.prototype.init = function () {
        if (!this.shapesContainer) {
            return;
        }
        document.addEventListener('scroll', this.onScroll);
    };
    AnimateShapes.prototype.onScroll = function () {
        if (this.shapesContainer && util_1.isInViewport(this.shapesContainer)) {
            requestAnimationFrame(this.handleScroll);
        }
    };
    AnimateShapes.prototype.handleScroll = function () {
        for (var index = 0; index < this.shapesToAnimate.length; index++) {
            this.animateShape(this.shapesToAnimate[index]);
        }
    };
    AnimateShapes.prototype.animateShape = function (shape) {
        var shapeTop = shape.el.getBoundingClientRect().top;
        shape.el.style.transform =
            "translate3d(" + shapeTop / shape.yFactor + "px,\n        " + shape.direction * (shapeTop / shape.xFactor) + "px, 0)\n        rotate(" + shape.direction * (shapeTop / 90) + "deg)";
    };
    AnimateShapes.prototype.getRandomInt = function (min, max) {
        return Math.floor(Math.random() * (max - min + 1)) + min;
    };
    __decorate([
        core_decorators_1.autobind
    ], AnimateShapes.prototype, "init", null);
    __decorate([
        core_decorators_1.autobind
    ], AnimateShapes.prototype, "onScroll", null);
    __decorate([
        core_decorators_1.autobind
    ], AnimateShapes.prototype, "handleScroll", null);
    __decorate([
        core_decorators_1.autobind
    ], AnimateShapes.prototype, "animateShape", null);
    return AnimateShapes;
}());
exports.default = AnimateShapes;


/***/ }),

/***/ "./static/js/components/AudioPlayer.ts":
/*!*********************************************!*\
  !*** ./static/js/components/AudioPlayer.ts ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var AudioPlayer = (function () {
    function AudioPlayer(filename, onLoaded) {
        this.isLoaded = false;
        this.isConnected = false;
        this.volume = 1;
        if (!filename) {
            throw new Error('No file name was provided to audio player');
        }
        this.filename = filename;
        this.audioCtx = new (window.AudioContext || window.webkitAudioContext)();
        this.onLoaded = onLoaded;
        this.data = null;
    }
    AudioPlayer.prototype.load = function () {
        var _this = this;
        var request = new Request(this.filename);
        return window.fetch(request, {
            credentials: 'same-origin',
        })
            .then(function (response) { return response.arrayBuffer(); })
            .then(function (buffer) {
            _this.audioCtx.decodeAudioData(buffer, function (data) {
                _this.data = data || null;
                _this.isLoaded = true;
                _this.createNodes();
                if (_this.onLoaded) {
                    _this.onLoaded();
                }
            }, function (error) {
                throw new Error("" + error);
            });
        });
    };
    AudioPlayer.prototype.createNodes = function () {
        if (!this.isLoaded || !this.audioCtx) {
            return;
        }
        this.source = this.audioCtx.createBufferSource();
        this.gainNode = this.audioCtx.createGain();
        this.source.connect(this.gainNode);
        this.source.buffer = this.data || null;
        this.gainNode.connect(this.audioCtx.destination);
    };
    AudioPlayer.prototype.setVolume = function (volume) {
        this.volume = volume;
        if (!this.gainNode) {
            return;
        }
        this.gainNode.gain.setTargetAtTime(this.volume, this.audioCtx.currentTime, 0.01);
    };
    AudioPlayer.prototype.start = function (startTime) {
        var _this = this;
        if (startTime === void 0) { startTime = 0; }
        if (this.isConnected || !this.isLoaded) {
            return;
        }
        this.audioCtx.resume().then(function () {
            _this.createNodes();
            _this.connect();
            if (_this.source) {
                _this.source.start(0, startTime);
            }
        });
    };
    AudioPlayer.prototype.stop = function () {
        this.disconnect();
    };
    AudioPlayer.prototype.connect = function () {
        if (this.isConnected || !this.gainNode || !this.isLoaded || !this.audioCtx) {
            return;
        }
        this.gainNode.connect(this.audioCtx.destination);
        this.isConnected = true;
    };
    AudioPlayer.prototype.disconnect = function () {
        if (!this.isConnected || !this.source || !this.isLoaded) {
            return;
        }
        this.source.disconnect();
        this.isConnected = false;
    };
    return AudioPlayer;
}());
exports.AudioPlayer = AudioPlayer;


/***/ }),

/***/ "./static/js/components/CKEdit.ts":
/*!****************************************!*\
  !*** ./static/js/components/CKEdit.ts ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = __webpack_require__(/*! ../util */ "./static/js/util/index.ts");
var core_decorators_1 = __webpack_require__(/*! core-decorators */ "./node_modules/core-decorators/es/core-decorators.js");
var SELECTORS = {
    TEXTAREA: '.js-rich-textarea',
    INLINE_TEXTAREA: '.js-inline-textarea',
    HELP_CONTAINER: '.js-help-container',
};
var REMOVE_BUTTONS_MOBILE = ['About', 'Anchor', 'Copy', 'Cut',
    'Format', 'Iframe', 'JustifyBlock', 'JustifyCenter', 'JustifyLeft',
    'JustifyRight', 'NumberedList', 'Paste', 'Scayt', 'Strike', 'Subscript',
    'Superscript', 'Table', 'Underline', 'Unlink'];
var TEXT_AREA_HEIGHT_TABLET = 400;
var TEXT_AREA_HEIGHT_MOBILE = 242;
var CKEdit = (function () {
    function CKEdit(core, onChangeCallback) {
        this.core = core;
        this.onChangeCallBack = onChangeCallback;
        this.textareas = util_1.nodeListToArray(document.querySelectorAll(SELECTORS.TEXTAREA));
        this.inlineTextareas = util_1.nodeListToArray(document.querySelectorAll(SELECTORS.INLINE_TEXTAREA));
        this.helpContainer = document.querySelector(SELECTORS.HELP_CONTAINER);
        this.isMobileScreenSize = window.innerWidth < 600;
        if (this.helpContainer) {
            this.height = this.helpContainer.getBoundingClientRect().height - 45;
        }
        else {
            this.height = 148;
        }
        this.init();
    }
    CKEdit.prototype.init = function () {
        var _this = this;
        if (this.isMobileScreenSize) {
            this.height = TEXT_AREA_HEIGHT_MOBILE;
        }
        else if (window.innerWidth < 1024) {
            this.height = TEXT_AREA_HEIGHT_TABLET;
        }
        setTimeout(function () { return _this.setTextareas(); }, 600);
        this.setInlineTextareas();
        CKEDITOR.on('instanceReady', function (ev) {
            _this.editor = ev.editor;
        });
    };
    CKEdit.prototype.setTextareas = function () {
        var _this = this;
        this.textareas.forEach(function (textarea) {
            var textareaEditor = CKEDITOR.replace(textarea, __assign({}, util_1.CKEDITOR_SETTINGS, { height: _this.height, wordcount: {
                    showParagraphs: false,
                    maxWordCount: textarea.dataset.wordcount || 250,
                    hardLimit: false,
                }, linkShowTargetTab: false, removeButtons: _this.isMobileScreenSize ?
                    REMOVE_BUTTONS_MOBILE.join(',') : util_1.CKEDITOR_SETTINGS.removeButtons }));
            textareaEditor.on('change', _this.handleTextareaChange);
        });
    };
    CKEdit.prototype.setInlineTextareas = function () {
        var _this = this;
        this.inlineTextareas.forEach(function (textarea) {
            var textareaEditor = CKEDITOR.inline(textarea, __assign({}, util_1.CKEDITOR_SETTINGS, { removePlugins: 'image,table,tabletoolstoolbar,tabletools,googledocs,'
                    + 'tableselection,picker,iframe,document,justify,list,format,link', wordcount: {
                    showParagraphs: false,
                    maxWordCount: textarea.dataset.wordcount || 100,
                    hardLimit: false,
                } }));
            textareaEditor.on('change', _this.handleTextareaChange);
        });
    };
    CKEdit.prototype.handleTextareaChange = function (e) {
        this.onChangeCallBack && this.onChangeCallBack(e);
    };
    __decorate([
        core_decorators_1.autobind
    ], CKEdit.prototype, "setTextareas", null);
    __decorate([
        core_decorators_1.autobind
    ], CKEdit.prototype, "setInlineTextareas", null);
    __decorate([
        core_decorators_1.autobind
    ], CKEdit.prototype, "handleTextareaChange", null);
    return CKEdit;
}());
exports.CKEdit = CKEdit;


/***/ }),

/***/ "./static/js/components/CardStack.ts":
/*!*******************************************!*\
  !*** ./static/js/components/CardStack.ts ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_decorators_1 = __webpack_require__(/*! core-decorators */ "./node_modules/core-decorators/es/core-decorators.js");
var Hammer = __webpack_require__(/*! hammerjs */ "./node_modules/hammerjs/hammer.js");
var util_1 = __webpack_require__(/*! ../util */ "./static/js/util/index.ts");
var SELECTORS = {
    CARD_STACK: '.js-card-stack-carousel',
    CARD: '.js-card-stack-card',
    PREVIOUS: '.js-card-stack-pagination-previous',
    NEXT: '.js-card-stack-pagination-next',
    PAGINATION_CONTAINER: '.js-card-stack-pagination',
    CARDS_UL: '.js-card-stack-list',
};
var OFFSCREEN_AMOUNT = '-220%';
var CardStack = (function () {
    function CardStack(container) {
        this.currentIndex = 0;
        this.isActive = false;
        this.hammer = null;
        this.container = container || document.querySelector(SELECTORS.CARD_STACK);
        this.cards = util_1.nodeListToArray(this.container.querySelectorAll(SELECTORS.CARD));
        this.next = this.container.querySelector(SELECTORS.NEXT);
        this.prev = this.container.querySelector(SELECTORS.PREVIOUS);
        this.paginationContainer =
            this.container.querySelector(SELECTORS.PAGINATION_CONTAINER);
        this.paginationLi = [];
        this.medScreen = window.matchMedia(util_1.MEDIA_QUERIES.SMALL).matches;
        this.init();
    }
    CardStack.prototype.init = function () {
        if (!this.medScreen) {
            this.startup();
            this.next.addEventListener('click', this.goToNext);
            this.prev.addEventListener('click', this.goToPrevious);
        }
        window.addEventListener('resize', this.handleResize);
    };
    CardStack.prototype.handleResize = function () {
        window.requestAnimationFrame(this.setCardStackByScreenSize);
    };
    CardStack.prototype.startup = function () {
        this.isActive = true;
        this.container.classList.add(util_1.ACTION_CLASSES.ACTIVE);
        this.next.addEventListener('click', this.goToNext);
        this.prev.addEventListener('click', this.goToPrevious);
        this.setUpCards();
        this.setVisibleCards();
        this.setVisibleArrows();
        this.setUpTabList();
        this.hammer = new Hammer.Manager(this.container.querySelector(SELECTORS.CARDS_UL));
        this.hammer.add(new Hammer.Swipe({
            direction: Hammer.DIRECTION_HORIZONTAL,
        }));
        this.hammer.on('swipe', this.handleSwipe);
    };
    CardStack.prototype.tearDown = function () {
        this.isActive = false;
        this.container.classList.remove(util_1.ACTION_CLASSES.ACTIVE);
        this.cards.forEach(function (card, i) {
            card.removeAttribute('style');
            card.removeAttribute('tab-index');
            card.removeAttribute('aria-hidden');
        });
        this.paginationLi = [];
        this.paginationContainer.innerHTML = '';
        this.next.removeEventListener('click', this.goToNext);
        this.prev.removeEventListener('click', this.goToPrevious);
        if (this.hammer) {
            this.hammer.destroy();
        }
    };
    CardStack.prototype.setCardStackByScreenSize = function () {
        this.medScreen = window.matchMedia(util_1.MEDIA_QUERIES.SMALL).matches;
        if (this.medScreen && this.isActive) {
            this.tearDown();
        }
        else if (!this.medScreen && !this.isActive) {
            this.startup();
        }
    };
    CardStack.prototype.generateRandomSkew = function () {
        var num = Math.floor(Math.random() * 4) + 1;
        return num *= Math.floor(Math.random() * 2) === 1 ? 1 : -1;
    };
    CardStack.prototype.setUpCards = function () {
        var _this = this;
        this.cards.forEach(function (card, i) {
            card.style.zIndex = "" + (_this.cards.length - i);
            if (i === 0) {
                card.style.transform = 'rotate(0)deg';
                card.setAttribute('tab-index', '-1');
            }
            else {
                card.style.transform =
                    "rotate(" + _this.generateRandomSkew() + "deg)\n            translate3d(" + _this.generateRandomSkew() + "px, " + _this.generateRandomSkew() + "px, 0)";
                card.setAttribute('aria-hidden', 'true');
            }
        });
    };
    CardStack.prototype.setUpTabList = function () {
        var _this = this;
        var ul = document.createElement('ul');
        ul.setAttribute('role', 'tablist');
        ul.classList.add('glue-pagination-page-list', 'glue-o-pagination__page-list');
        this.cards.forEach(function (_card, i) {
            var li = document.createElement('li');
            li.setAttribute('data-page', "" + i);
            li.classList.add('glue-o-pagination__button-container', 'glue-o-pagination__page-list-button-container');
            _this.paginationLi.push(li);
            var button = document.createElement('button');
            button.setAttribute('type', 'button');
            button.setAttribute('role', 'tab');
            button.setAttribute('aria-selected', 'false');
            button.setAttribute('data-page', "" + i);
            button.classList.add('glue-o-pagination__button', 'glue-o-pagination__page-list-button');
            button.addEventListener('click', _this.handleTabClick);
            if (i === 0) {
                li.classList.add('active');
                button.setAttribute('aria-selected', 'true');
            }
            li.appendChild(button);
            ul.appendChild(li);
        });
        this.paginationContainer.appendChild(ul);
    };
    CardStack.prototype.setVisibleCards = function () {
        var _this = this;
        this.cards.forEach(function (card, i) {
            card.style.opacity = '0';
            if (i >= _this.currentIndex - 1 && i <= _this.currentIndex + 2) {
                card.style.opacity = '1';
            }
        });
    };
    CardStack.prototype.setVisibleArrows = function () {
        if (this.currentIndex === 0) {
            this.prev.style.visibility = 'hidden';
            this.prev.setAttribute('aria-hidden', 'true');
        }
        else if (this.currentIndex === this.cards.length - 1) {
            this.next.style.visibility = 'hidden';
            this.next.setAttribute('aria-hidden', 'true');
        }
        else {
            this.prev.style.visibility = 'visible';
            this.next.style.visibility = 'visible';
            this.prev.setAttribute('aria-hidden', 'false');
            this.next.setAttribute('aria-hidden', 'false');
        }
    };
    CardStack.prototype.animateOut = function () {
        var _this = this;
        var indexes = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            indexes[_i] = arguments[_i];
        }
        indexes.forEach(function (index) {
            _this.cards[index].style.transform = "rotate(" + _this.generateRandomSkew() + "deg)\n          translateX(" + OFFSCREEN_AMOUNT + ") rotate(" + _this.generateRandomSkew() + "deg)";
        });
    };
    CardStack.prototype.animateIn = function () {
        var _this = this;
        var indexes = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            indexes[_i] = arguments[_i];
        }
        indexes.forEach(function (index) {
            _this.cards[index].style.transform = "rotate(" + _this.generateRandomSkew() + "deg)\n          translateX(0) rotate(" + _this.generateRandomSkew() + "deg)";
        });
    };
    CardStack.prototype.handleTabClick = function (e) {
        e.preventDefault();
        var target = e.target;
        var index = parseInt(target.dataset.page || '0', 10);
        this.updatePagination(index);
        this.goToCard(index);
        this.currentIndex = index;
        this.setVisibleCards();
        this.setVisibleArrows();
    };
    CardStack.prototype.updatePagination = function (index) {
        this.paginationLi.forEach(function (li) {
            if (parseInt(li.dataset.page || '0', 10) === index) {
                li.classList.add('active');
                li.querySelector('button').setAttribute('aria-selected', 'true');
            }
            else {
                li.classList.remove('active');
                li.querySelector('button').setAttribute('aria-selected', 'false');
            }
        });
    };
    CardStack.prototype.goToCard = function (index) {
        this.cards.forEach(function (card, i) {
            card.setAttribute('aria-hidden', 'true');
            card.removeAttribute('tab-index');
        });
        if (index > this.currentIndex) {
            this.animateOut.apply(this, Array.from(Array(index).slice().keys()));
        }
        else {
            var difference = this.currentIndex - index;
            if (difference === 1) {
                var amount = this.cards.length - index < 3 ? this.cards.length - index : 3;
                this.animateIn.apply(this, Array.from(new Array(amount), function (x, i) { return i + index; }));
            }
            else {
                this.animateIn.apply(this, Array.from(new Array(difference), function (x, i) { return i + index; }));
            }
        }
        this.cards[index].setAttribute('aria-hidden', 'false');
        this.cards[index].setAttribute('tab-index', '-1');
        this.cards[index].style.transform = 'rotate(0)';
    };
    CardStack.prototype.goToNext = function () {
        if (this.currentIndex + 1 >= this.cards.length) {
            return;
        }
        this.goToCard(this.currentIndex + 1);
        this.updatePagination(this.currentIndex + 1);
        this.currentIndex += 1;
        this.setVisibleCards();
        this.setVisibleArrows();
    };
    CardStack.prototype.goToPrevious = function () {
        if (this.currentIndex <= 0) {
            return;
        }
        this.goToCard(this.currentIndex - 1);
        this.updatePagination(this.currentIndex - 1);
        this.currentIndex -= 1;
        this.setVisibleCards();
        this.setVisibleArrows();
    };
    CardStack.prototype.handleSwipe = function (e) {
        var direction = e.offsetDirection;
        if (direction === 4) {
            this.goToPrevious();
        }
        if (direction === 2) {
            this.goToNext();
        }
    };
    __decorate([
        core_decorators_1.autobind
    ], CardStack.prototype, "init", null);
    __decorate([
        core_decorators_1.autobind
    ], CardStack.prototype, "handleResize", null);
    __decorate([
        core_decorators_1.autobind
    ], CardStack.prototype, "startup", null);
    __decorate([
        core_decorators_1.autobind
    ], CardStack.prototype, "tearDown", null);
    __decorate([
        core_decorators_1.autobind
    ], CardStack.prototype, "setCardStackByScreenSize", null);
    __decorate([
        core_decorators_1.autobind
    ], CardStack.prototype, "setUpCards", null);
    __decorate([
        core_decorators_1.autobind
    ], CardStack.prototype, "setUpTabList", null);
    __decorate([
        core_decorators_1.autobind
    ], CardStack.prototype, "setVisibleCards", null);
    __decorate([
        core_decorators_1.autobind
    ], CardStack.prototype, "setVisibleArrows", null);
    __decorate([
        core_decorators_1.autobind
    ], CardStack.prototype, "animateOut", null);
    __decorate([
        core_decorators_1.autobind
    ], CardStack.prototype, "animateIn", null);
    __decorate([
        core_decorators_1.autobind
    ], CardStack.prototype, "handleTabClick", null);
    __decorate([
        core_decorators_1.autobind
    ], CardStack.prototype, "updatePagination", null);
    __decorate([
        core_decorators_1.autobind
    ], CardStack.prototype, "goToCard", null);
    __decorate([
        core_decorators_1.autobind
    ], CardStack.prototype, "goToNext", null);
    __decorate([
        core_decorators_1.autobind
    ], CardStack.prototype, "goToPrevious", null);
    __decorate([
        core_decorators_1.autobind
    ], CardStack.prototype, "handleSwipe", null);
    return CardStack;
}());
exports.default = CardStack;


/***/ }),

/***/ "./static/js/components/CategoryFilter.ts":
/*!************************************************!*\
  !*** ./static/js/components/CategoryFilter.ts ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_decorators_1 = __webpack_require__(/*! core-decorators */ "./node_modules/core-decorators/es/core-decorators.js");
var util_1 = __webpack_require__(/*! ../util */ "./static/js/util/index.ts");
var PARENT_SELECTOR = '.js-category-filter';
var ITEM_SELECTOR = '.js-filter-item';
var BUTTON_SELECTOR = '.js-filter-button';
var CategoryFilter = (function () {
    function CategoryFilter(callback) {
        this.parent = document.querySelector(PARENT_SELECTOR);
        this.allowMultipleCategories =
            this.parent.dataset.allowMultipleCategories !== undefined ? true : false;
        var itemElements = util_1.nodeListToArray(this.parent.querySelectorAll(ITEM_SELECTOR));
        this.items = itemElements.map(function (element) {
            var categoryKey = element.dataset.categories || '';
            return {
                categories: categoryKey.split(','),
                element: element,
            };
        });
        var buttonElements = util_1.nodeListToArray(this.parent.querySelectorAll(BUTTON_SELECTOR));
        this.buttons = buttonElements.map(function (element) {
            var category = element.dataset.category || '';
            return {
                category: category,
                element: element,
                isSelected: false,
            };
        });
        this.activeCategories = new Set();
        if (callback) {
            this.optionalCallback = callback;
        }
        if (this.items.length > 0 && this.buttons.length > 0) {
            this.init();
        }
    }
    CategoryFilter.prototype.init = function () {
        var _this = this;
        this.buttons.forEach(function (button) {
            button.element.addEventListener('click', _this.handleButtonClick.bind(_this, button));
        });
    };
    CategoryFilter.prototype.handleButtonClick = function (button) {
        if (!this.allowMultipleCategories) {
            this.activeCategories.clear();
            this.buttons.forEach(function (currentButton) {
                if (currentButton !== button) {
                    currentButton.isSelected = false;
                    currentButton.element.classList.remove(util_1.ACTION_CLASSES.ACTIVE);
                }
            });
        }
        if (!button.isSelected) {
            button.element.classList.add(util_1.ACTION_CLASSES.ACTIVE);
            button.isSelected = true;
            this.activeCategories.add(button.category);
        }
        else {
            button.element.classList.remove(util_1.ACTION_CLASSES.ACTIVE);
            button.isSelected = false;
            this.activeCategories.delete(button.category);
        }
        this.updateVisibleItems();
    };
    CategoryFilter.prototype.updateVisibleItems = function () {
        var _this = this;
        var showAll = this.activeCategories.size === 0;
        if (!showAll) {
            this.parent.classList.add(util_1.ACTION_CLASSES.ACTIVE);
        }
        else {
            this.parent.classList.remove(util_1.ACTION_CLASSES.ACTIVE);
        }
        this.items.forEach(function (item) {
            if (showAll) {
                _this.enableItem(item);
                _this.deactivateItem(item);
            }
            else if (!showAll) {
                var shouldShow_1 = false;
                item.categories.forEach(function (cat) {
                    if (_this.activeCategories.has(cat)) {
                        shouldShow_1 = true;
                    }
                    if (!shouldShow_1) {
                        _this.disableItem(item);
                    }
                    else if (shouldShow_1) {
                        _this.enableItem(item);
                        _this.activateItem(item);
                    }
                });
            }
        });
        if (this.optionalCallback) {
            this.optionalCallback();
        }
    };
    CategoryFilter.prototype.disableItem = function (item) {
        item.element.classList.add(util_1.ACTION_CLASSES.INACTIVE);
        item.element.classList.remove(util_1.ACTION_CLASSES.ACTIVE);
        item.element.setAttribute('aria-hidden', 'true');
        item.element.setAttribute('tabindex', '-1');
    };
    CategoryFilter.prototype.enableItem = function (item) {
        item.element.classList.remove(util_1.ACTION_CLASSES.INACTIVE);
        item.element.setAttribute('aria-hidden', 'false');
        item.element.removeAttribute('tabindex');
    };
    CategoryFilter.prototype.activateItem = function (item) {
        item.element.classList.add(util_1.ACTION_CLASSES.ACTIVE);
    };
    CategoryFilter.prototype.deactivateItem = function (item) {
        item.element.classList.remove(util_1.ACTION_CLASSES.ACTIVE);
    };
    __decorate([
        core_decorators_1.autobind
    ], CategoryFilter.prototype, "handleButtonClick", null);
    return CategoryFilter;
}());
exports.CategoryFilter = CategoryFilter;


/***/ }),

/***/ "./static/js/components/Footer.ts":
/*!****************************************!*\
  !*** ./static/js/components/Footer.ts ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = __webpack_require__(/*! ../util */ "./static/js/util/index.ts");
var core_decorators_1 = __webpack_require__(/*! core-decorators */ "./node_modules/core-decorators/es/core-decorators.js");
var SELECTORS = {
    LANGUAGE_SELECT: '.js-language-select',
    BACK_TO_TOP: '.js-back-to-top',
    COOKIE_CONTAINER: '.js-cookie-bar',
    COOKIE_DISMISS: '.js-cookie-bar-dismiss',
};
var Footer = (function () {
    function Footer(core) {
        this.core = core;
        this.languageSelect = document.querySelector(SELECTORS.LANGUAGE_SELECT);
        this.backToTop = document.querySelector(SELECTORS.BACK_TO_TOP);
        this.cookieContainer = document.querySelector(SELECTORS.COOKIE_CONTAINER);
        this.cookieButton = document.querySelector(SELECTORS.COOKIE_DISMISS);
        this.cookieValue = util_1.readCookie('alert-dismissed') !== null ?
            new Set(util_1.readCookie('alert-dismissed').replace(/"/g, '').split(',')) : new Set();
        this.init();
    }
    Footer.prototype.init = function () {
        this.attachEvents();
        this.setCookieVisibility();
    };
    Footer.prototype.attachEvents = function () {
        this.languageSelect && this.languageSelect.addEventListener('change', this.updateLanguage);
        this.backToTop && this.backToTop.addEventListener('click', this.handleBackToTop);
        this.cookieButton && this.cookieButton.addEventListener('click', this.handleCookieButton);
    };
    Footer.prototype.updateLanguage = function (event) {
        event.preventDefault();
        var target = event.target;
        var option = target.options[target.selectedIndex];
        util_1.writeCookie('locale', target.value);
        if (option.dataset.location) {
            window.location.href = option.dataset.location;
        }
    };
    Footer.prototype.handleBackToTop = function (event) {
        event.preventDefault();
        event.stopImmediatePropagation();
        TweenMax.to(window, 1, {
            scrollTo: {
                y: 0,
                autoKill: false,
            },
        });
        document.querySelector('.js-has-subnav').focus();
    };
    Footer.prototype.handleCookieButton = function (event) {
        event.preventDefault();
        this.cookieValue = this.cookieValue.add('cookie');
        util_1.writeCookie('alert-dismissed', Array.from(this.cookieValue).toString());
        this.setCookieVisibility();
    };
    Footer.prototype.setCookieVisibility = function () {
        if (this.cookieValue.has('cookie') && this.cookieContainer) {
            this.cookieContainer.classList.add(util_1.ACTION_CLASSES.HIDDEN);
        }
    };
    __decorate([
        core_decorators_1.autobind
    ], Footer.prototype, "handleCookieButton", null);
    __decorate([
        core_decorators_1.autobind
    ], Footer.prototype, "setCookieVisibility", null);
    return Footer;
}());
exports.default = Footer;


/***/ }),

/***/ "./static/js/components/Header.ts":
/*!****************************************!*\
  !*** ./static/js/components/Header.ts ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var menu_1 = __webpack_require__(/*! @material/menu */ "./node_modules/@material/menu/index.js");
var util_1 = __webpack_require__(/*! ../util */ "./static/js/util/index.ts");
var core_decorators_1 = __webpack_require__(/*! core-decorators */ "./node_modules/core-decorators/es/core-decorators.js");
var SELECTORS = {
    HEADER: '.js-header',
    SUB_NAV_TRIGGERS: '.js-has-subnav',
    PROFILE_WIDGET: '.js-profile-widget',
    PROFILE_TRIGGER: '.js-profile-trigger',
    PROFILE_WIDGET_MOBILE: '.js-profile-widget-mobile',
    PROFILE_TRIGGER_MOBILE: '.js-profile-trigger-mobile',
    SUB_NAV: '.js-subnav',
};
var SCROLL_DISTANCE_TILL_SHADOW = 160;
var Header = (function () {
    function Header(core) {
        this.core = core;
        this.header = document.querySelector(SELECTORS.HEADER);
        this.subNavTriggers = util_1.nodeListToArray(document.querySelectorAll(SELECTORS.SUB_NAV_TRIGGERS));
        this.profileTrigger = document.querySelector(SELECTORS.PROFILE_TRIGGER);
        this.profileWidget = document.querySelector(SELECTORS.PROFILE_WIDGET);
        if (this.profileWidget) {
            this.profileMenu = new menu_1.MDCMenu(this.profileWidget);
        }
        this.subNav = document.querySelector(SELECTORS.SUB_NAV);
        if (this.subNav) {
            this.subNavMenu = new menu_1.MDCMenu(this.subNav);
        }
        this.hasShadow = window.scrollY < SCROLL_DISTANCE_TILL_SHADOW;
        this.init();
    }
    Header.prototype.init = function () {
        var _this = this;
        if (!this.header) {
            return;
        }
        window.addEventListener('scroll', this.onScroll);
        this.onScroll();
        this.subNavTriggers.forEach(function (link) { return link.addEventListener('click', _this.handleSubNavTrigger.bind(_this, link)); });
        if (this.profileTrigger === null) {
            return;
        }
        this.profileTrigger.addEventListener('click', this.handleProfileClick);
    };
    Header.prototype.handleSubNavTrigger = function (_link, e) {
        if (window.innerWidth >= 900) {
            e.preventDefault();
            this.subNavMenu.open = !this.subNavMenu.open;
        }
    };
    Header.prototype.handleProfileClick = function (e) {
        e.preventDefault();
        this.profileMenu.open = !this.profileMenu.open;
    };
    Header.prototype.onScroll = function () {
        requestAnimationFrame(this.handleScroll);
    };
    Header.prototype.handleScroll = function () {
        if (this.hasShadow && window.scrollY < SCROLL_DISTANCE_TILL_SHADOW) {
            this.header.classList.remove(util_1.ACTION_CLASSES.HAS_SHADOW);
            this.hasShadow = false;
        }
        else if (!this.hasShadow && window.scrollY >= SCROLL_DISTANCE_TILL_SHADOW) {
            this.header.classList.add(util_1.ACTION_CLASSES.HAS_SHADOW);
            this.hasShadow = true;
        }
    };
    __decorate([
        core_decorators_1.autobind
    ], Header.prototype, "handleProfileClick", null);
    __decorate([
        core_decorators_1.autobind
    ], Header.prototype, "onScroll", null);
    __decorate([
        core_decorators_1.autobind
    ], Header.prototype, "handleScroll", null);
    return Header;
}());
exports.default = Header;


/***/ }),

/***/ "./static/js/components/HomeConclusionShapes.ts":
/*!******************************************************!*\
  !*** ./static/js/components/HomeConclusionShapes.ts ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_decorators_1 = __webpack_require__(/*! core-decorators */ "./node_modules/core-decorators/es/core-decorators.js");
var SELECTORS = {
    CONCLUSION_CONTAINER: '.js-conclusion',
    CONCLUSION_SHAPE_1: '#conclusion-shape-1',
    CONCLUSION_SHAPE_2: '#conclusion-shape-2',
    CONCLUSION_SHAPE_3: '#conclusion-shape-3',
    CONCLUSION_SHAPE_4: '#conclusion-shape-4',
};
var HomeConclusionShapes = (function () {
    function HomeConclusionShapes() {
        this.conclusionContainer = document
            .querySelector(SELECTORS.CONCLUSION_CONTAINER);
        this.conclusionShape1 = this.conclusionContainer
            .querySelector(SELECTORS.CONCLUSION_SHAPE_1);
        this.conclusionShape2 = this.conclusionContainer
            .querySelector(SELECTORS.CONCLUSION_SHAPE_2);
        this.conclusionShape3 = this.conclusionContainer
            .querySelector(SELECTORS.CONCLUSION_SHAPE_3);
        this.conclusionShape4 = this.conclusionContainer
            .querySelector(SELECTORS.CONCLUSION_SHAPE_4);
        this.init();
    }
    HomeConclusionShapes.prototype.init = function () {
        window.addEventListener('scroll', this.onScroll);
        this.onScroll();
    };
    HomeConclusionShapes.prototype.onScroll = function () {
        requestAnimationFrame(this.handleScroll);
    };
    HomeConclusionShapes.prototype.handleScroll = function () {
        if (this.conclusionContainer &&
            this.conclusionContainer.getBoundingClientRect().top <
                window.innerHeight * 1.1) {
            this.animateConclusionShapes();
        }
    };
    HomeConclusionShapes.prototype.animateConclusionShapes = function () {
        if (this.conclusionContainer) {
            var shape1Top = this.conclusionShape1.getBoundingClientRect().top;
            this.conclusionShape1.style.transform =
                "translate3d(" + shape1Top / 10 + "px, -" + shape1Top / 40 + "px, 0) rotate(" + shape1Top / 100 + "deg)";
            var shape2Top = this.conclusionShape2.getBoundingClientRect().top;
            this.conclusionShape2.style.transform =
                "translate3d(" + shape2Top / 30 + "px, -" + shape2Top / 20 + "px, 0)";
            var shape3Top = this.conclusionShape3.getBoundingClientRect().top;
            this.conclusionShape3.style.transform =
                "translate3d(-" + shape3Top / 10 + "px, -" + shape3Top / 60 + "px, 0)\n          rotate(-" + shape3Top / 150 + "deg)";
            var shape4Top = this.conclusionShape4.getBoundingClientRect().top;
            this.conclusionShape4.style.transform =
                "translate3d(" + (20 - (shape4Top / 15)) + "px, " + ((shape4Top / 100) + 60) + "px, 0)";
        }
    };
    __decorate([
        core_decorators_1.autobind
    ], HomeConclusionShapes.prototype, "init", null);
    __decorate([
        core_decorators_1.autobind
    ], HomeConclusionShapes.prototype, "onScroll", null);
    __decorate([
        core_decorators_1.autobind
    ], HomeConclusionShapes.prototype, "handleScroll", null);
    __decorate([
        core_decorators_1.autobind
    ], HomeConclusionShapes.prototype, "animateConclusionShapes", null);
    return HomeConclusionShapes;
}());
exports.default = HomeConclusionShapes;


/***/ }),

/***/ "./static/js/components/HomeNumberAnimation.ts":
/*!*****************************************************!*\
  !*** ./static/js/components/HomeNumberAnimation.ts ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_decorators_1 = __webpack_require__(/*! core-decorators */ "./node_modules/core-decorators/es/core-decorators.js");
var SELECTORS = {
    NUMBER_ONE_CONTAINER: '.js-animate-n1',
    NUMBER_TWO_CONTAINER: '.js-animate-n2',
    NUMBER_THREE_CONTAINER: '.js-animate-n4',
    NUMBER_FOUR_CONTAINER: '.js-animate-n3',
};
var HomeNumberAnimation = (function () {
    function HomeNumberAnimation(core) {
        this.num1HasPlayed = false;
        this.num2HasPlayed = false;
        this.num3HasPlayed = false;
        this.num4HasPlayed = false;
        this.core = core;
        this.num1AnimationContainer = document.querySelector(SELECTORS.NUMBER_ONE_CONTAINER);
        this.num2AnimationContainer = document.querySelector(SELECTORS.NUMBER_TWO_CONTAINER);
        this.num3AnimationContainer = document.querySelector(SELECTORS.NUMBER_THREE_CONTAINER);
        this.num4AnimationContainer = document.querySelector(SELECTORS.NUMBER_FOUR_CONTAINER);
        this.num1AnimationData = {
            container: this.num1AnimationContainer,
            renderer: 'svg',
            loop: false,
            autoplay: false,
            path: '/static/data/number_01.json',
        };
        this.num2AnimationData = {
            container: this.num2AnimationContainer,
            renderer: 'svg',
            loop: false,
            autoplay: false,
            path: '/static/data/number_02.json',
        };
        this.num3AnimationData = {
            container: this.num3AnimationContainer,
            renderer: 'svg',
            loop: false,
            autoplay: false,
            path: '/static/data/number_03.json',
        };
        this.num4AnimationData = {
            container: this.num4AnimationContainer,
            renderer: 'svg',
            loop: false,
            autoplay: false,
            path: '/static/data/number_04.json',
        };
        this.init();
    }
    HomeNumberAnimation.prototype.init = function () {
        var _this = this;
        this.num1AnimationObject = bodymovin.loadAnimation(this.num1AnimationData);
        this.num2AnimationObject = bodymovin.loadAnimation(this.num2AnimationData);
        this.num3AnimationObject = bodymovin.loadAnimation(this.num3AnimationData);
        this.num4AnimationObject = bodymovin.loadAnimation(this.num4AnimationData);
        if (this.core && this.core.prefersReducedMotion) {
            this.num4AnimationObject.addEventListener('DOMLoaded', function () {
                _this.num1AnimationObject.goToAndStop(_this.num1AnimationObject.totalFrames, true);
                _this.num2AnimationObject.goToAndStop(_this.num2AnimationObject.totalFrames, true);
                _this.num3AnimationObject.goToAndStop(_this.num3AnimationObject.totalFrames, true);
                _this.num4AnimationObject.goToAndStop(_this.num4AnimationObject.totalFrames, true);
            });
            return;
        }
        window.addEventListener('scroll', this.onScroll);
        this.onScroll();
    };
    HomeNumberAnimation.prototype.onScroll = function () {
        requestAnimationFrame(this.handleScroll);
    };
    HomeNumberAnimation.prototype.handleScroll = function () {
        if (this.num1AnimationContainer && !this.num1HasPlayed) {
            var numTop = this.num1AnimationContainer.getBoundingClientRect().top;
            if (numTop < window.innerHeight) {
                this.num1AnimationObject.play();
                this.num1HasPlayed = true;
            }
        }
        if (this.num2AnimationContainer && !this.num2HasPlayed) {
            var numTop = this.num2AnimationContainer.getBoundingClientRect().top;
            if (numTop < window.innerHeight) {
                this.num2AnimationObject.play();
                this.num2HasPlayed = true;
            }
        }
        if (this.num3AnimationContainer && !this.num3HasPlayed) {
            var numTop = this.num3AnimationContainer.getBoundingClientRect().top;
            if (numTop < window.innerHeight) {
                this.num3AnimationObject.play();
                this.num3HasPlayed = true;
            }
        }
        if (this.num4AnimationContainer && !this.num4HasPlayed) {
            var numTop = this.num4AnimationContainer.getBoundingClientRect().top;
            if (numTop < window.innerHeight) {
                this.num4AnimationObject.play();
                this.num4HasPlayed = true;
            }
        }
    };
    __decorate([
        core_decorators_1.autobind
    ], HomeNumberAnimation.prototype, "init", null);
    __decorate([
        core_decorators_1.autobind
    ], HomeNumberAnimation.prototype, "onScroll", null);
    __decorate([
        core_decorators_1.autobind
    ], HomeNumberAnimation.prototype, "handleScroll", null);
    return HomeNumberAnimation;
}());
exports.default = HomeNumberAnimation;


/***/ }),

/***/ "./static/js/components/HomeThoughtStarter.ts":
/*!****************************************************!*\
  !*** ./static/js/components/HomeThoughtStarter.ts ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_decorators_1 = __webpack_require__(/*! core-decorators */ "./node_modules/core-decorators/es/core-decorators.js");
var _1 = __webpack_require__(/*! . */ "./static/js/components/index.ts");
var HomeThoughtStarter = (function () {
    function HomeThoughtStarter(core) {
        this.thoughtStarter = new _1.ThoughtStarter(core);
        this.init();
    }
    HomeThoughtStarter.prototype.init = function () {
        window.addEventListener('scroll', this.onScroll);
        this.onScroll();
    };
    HomeThoughtStarter.prototype.onScroll = function () {
        requestAnimationFrame(this.handleScroll);
    };
    HomeThoughtStarter.prototype.handleScroll = function () {
        if (this.thoughtStarter && !this.thoughtStarter.hasActivated) {
            if (this.thoughtStarter.getIsInView()) {
                this.thoughtStarter.activate();
            }
        }
    };
    __decorate([
        core_decorators_1.autobind
    ], HomeThoughtStarter.prototype, "init", null);
    __decorate([
        core_decorators_1.autobind
    ], HomeThoughtStarter.prototype, "onScroll", null);
    __decorate([
        core_decorators_1.autobind
    ], HomeThoughtStarter.prototype, "handleScroll", null);
    return HomeThoughtStarter;
}());
exports.default = HomeThoughtStarter;


/***/ }),

/***/ "./static/js/components/HomeVideoPlayer.ts":
/*!*************************************************!*\
  !*** ./static/js/components/HomeVideoPlayer.ts ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_decorators_1 = __webpack_require__(/*! core-decorators */ "./node_modules/core-decorators/es/core-decorators.js");
var _1 = __webpack_require__(/*! . */ "./static/js/components/index.ts");
var SELECTORS = {
    HOME_VIDEO_BUTTON_SELECTOR: '.js-home-video-button',
    FEATURE_VIDEO: '#feature-video',
};
var HomeVideoPlayer = (function () {
    function HomeVideoPlayer() {
        this.featureVideo = document.querySelector(SELECTORS.FEATURE_VIDEO);
        this.videoPlayer = new _1.VideoPlayer(true);
        this.homeVideoButton =
            document.querySelector(SELECTORS.HOME_VIDEO_BUTTON_SELECTOR);
        this.init();
    }
    HomeVideoPlayer.prototype.init = function () {
        var _this = this;
        this.setVideoHeight();
        this.videoPlayer.loadAPI().then(function () {
            _this.videoPlayer.initializeVideo();
            _this.videoPlayer.player.addEventListener('onReady', function () {
                _this.onScroll();
            });
            _this.featureVideo = document.querySelector(SELECTORS.FEATURE_VIDEO);
        });
        if (this.homeVideoButton) {
            this.homeVideoButton.addEventListener('click', this.handleVideoButtonClick);
        }
        window.addEventListener('scroll', this.onScroll);
        this.onScroll();
        window.addEventListener('resize', this.onResize);
        this.onResize();
    };
    HomeVideoPlayer.prototype.onScroll = function () {
        requestAnimationFrame(this.handleScroll);
    };
    HomeVideoPlayer.prototype.handleScroll = function () {
        if (this.videoPlayer && this.videoPlayer.player &&
            !this.videoPlayer.hasBeenPlayed && this.videoPlayer.isReady) {
            var videoTop = this.videoPlayer.videoDiv.getBoundingClientRect().top;
            if (videoTop < window.innerHeight * 1.25) {
                this.videoPlayer.player.playVideo();
                this.videoPlayer.player.mute();
            }
        }
    };
    HomeVideoPlayer.prototype.onResize = function () {
        requestAnimationFrame(this.handleResize);
    };
    HomeVideoPlayer.prototype.handleResize = function () {
        this.setVideoHeight();
    };
    HomeVideoPlayer.prototype.setVideoHeight = function () {
        if (this.featureVideo) {
            this.featureVideo.style.height = document.body.clientWidth * .5625 + "px";
        }
    };
    HomeVideoPlayer.prototype.handleVideoButtonClick = function () {
        var _this = this;
        if (!this.videoPlayer.isReady) {
            return;
        }
        this.videoPlayer.player.unMute();
        this.videoPlayer.shouldLoop = false;
        this.videoPlayer.hasBeenPlayed = true;
        this.videoPlayer.player.seekTo(0);
        this.videoPlayer.player.stopVideo();
        this.videoPlayer.player.playVideo();
        TweenMax.to(this.homeVideoButton, 0.25, {
            autoAlpha: 0,
            onComplete: function () {
                _this.homeVideoButton.style.display = 'none';
            },
        });
    };
    __decorate([
        core_decorators_1.autobind
    ], HomeVideoPlayer.prototype, "init", null);
    __decorate([
        core_decorators_1.autobind
    ], HomeVideoPlayer.prototype, "onScroll", null);
    __decorate([
        core_decorators_1.autobind
    ], HomeVideoPlayer.prototype, "handleScroll", null);
    __decorate([
        core_decorators_1.autobind
    ], HomeVideoPlayer.prototype, "onResize", null);
    __decorate([
        core_decorators_1.autobind
    ], HomeVideoPlayer.prototype, "handleResize", null);
    __decorate([
        core_decorators_1.autobind
    ], HomeVideoPlayer.prototype, "setVideoHeight", null);
    __decorate([
        core_decorators_1.autobind
    ], HomeVideoPlayer.prototype, "handleVideoButtonClick", null);
    return HomeVideoPlayer;
}());
exports.default = HomeVideoPlayer;


/***/ }),

/***/ "./static/js/components/InteractiveLogo.ts":
/*!*************************************************!*\
  !*** ./static/js/components/InteractiveLogo.ts ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var components_1 = __webpack_require__(/*! ../components */ "./static/js/components/index.ts");
var util_1 = __webpack_require__(/*! ../util */ "./static/js/util/index.ts");
var core_decorators_1 = __webpack_require__(/*! core-decorators */ "./node_modules/core-decorators/es/core-decorators.js");
var SELECTORS = {
    TRIGGER: '.js-logo-trigger',
};
var InteractiveLogo = (function () {
    function InteractiveLogo(container, animationObject) {
        this.keyboardIsInUse = false;
        this.container = container;
        this.animation = animationObject;
        this.isPlaying = false;
        this.isHovering = false;
        this.audioHasLoaded = false;
        this.touchWasUsed = false;
    }
    InteractiveLogo.prototype.init = function () {
        this.createLetters();
        this.container.classList.add(util_1.ACTION_CLASSES.ACTIVE);
        this.slingshot = new components_1.Slingshot(this.container);
        this.slingshot.init();
        this.initAllAudio();
        this.bindEvents();
    };
    InteractiveLogo.prototype.createLetters = function () {
        var triggerElements = util_1.nodeListToArray(this.container.querySelectorAll(SELECTORS.TRIGGER));
        this.triggers = triggerElements.map(function (element) {
            var startFrame = 0;
            var stopFrame = 0;
            var hoverStartFrame = 0;
            var hoverStopFrame = 0;
            var audioFile;
            switch (element.dataset.animation) {
                case 'satellite':
                    startFrame = 0;
                    stopFrame = 299;
                    audioFile = '/static/audio/gsf-bloops-SR.mp3';
                    break;
                case 'f':
                    startFrame = 1071;
                    stopFrame = 1090;
                    break;
                case 'planets':
                    startFrame = 300;
                    stopFrame = 600;
                    audioFile = '/static/audio/gsf-bloops-CC.mp3';
                    break;
                case 'balloon1':
                    startFrame = 1031;
                    stopFrame = 1050;
                    break;
                case 'balloon2':
                    startFrame = 601;
                    stopFrame = 841;
                    audioFile = '/static/audio/gsf-bloops-I.mp3';
                    break;
                case 'volcano':
                    startFrame = 841;
                    stopFrame = 990;
                    audioFile = '/static/audio/gsf-bloops-A.mp3';
                    break;
            }
            switch (element.dataset.letter) {
                case 's':
                    hoverStartFrame = 992;
                    hoverStopFrame = 1010;
                    break;
                case 'c1':
                    hoverStartFrame = 1011;
                    hoverStopFrame = 1030;
                    break;
                case 'i1':
                    hoverStartFrame = 1031;
                    hoverStopFrame = 1050;
                    break;
                case 'c2':
                    hoverStartFrame = 1051;
                    hoverStopFrame = 1070;
                    break;
                case 'f':
                    hoverStartFrame = 1071;
                    hoverStopFrame = 1090;
                    break;
                case 'a':
                    hoverStartFrame = 1091;
                    hoverStopFrame = 1110;
                    break;
                case 'i2':
                    hoverStartFrame = 1111;
                    hoverStopFrame = 1130;
                    break;
                case 'r':
                    hoverStartFrame = 1131;
                    hoverStopFrame = 1151;
                    break;
            }
            return {
                button: element,
                startFrame: startFrame,
                stopFrame: stopFrame,
                hoverStartFrame: hoverStartFrame,
                hoverStopFrame: hoverStopFrame,
                audioPlayer: audioFile ? new components_1.AudioPlayer(audioFile) : null,
            };
        });
    };
    InteractiveLogo.prototype.bindEvents = function () {
        var _this = this;
        if (!this.triggers) {
            return;
        }
        window.addEventListener('touchstart', this.setTouchWasUsed);
        window.addEventListener('keydown', this.checkIfNeedsFocus);
        this.triggers.forEach(function (trigger) {
            trigger.button.addEventListener('click', function (e) {
                e.preventDefault();
                if (!_this.touchWasUsed) {
                    _this.playAnimation(trigger);
                }
            });
            trigger.button.addEventListener('touchend', _this.playAnimation.bind(_this, trigger));
            trigger.button.addEventListener('mouseenter', _this.playHoverAnimation.bind(_this, trigger));
            trigger.button.addEventListener('mouseleave', _this.stopHoverAnimation.bind(_this, trigger));
        });
        this.animation.addEventListener('complete', this.stopAnimation);
    };
    InteractiveLogo.prototype.tearDown = function () {
        if (!this.triggers) {
            return;
        }
        window.removeEventListener('touchstart', this.setTouchWasUsed);
        window.removeEventListener('keydown', this.checkIfNeedsFocus);
        this.triggers.forEach(function (trigger) {
            if (trigger.button && trigger.button.parentElement) {
                var newButton = trigger.button.cloneNode();
                trigger.button.parentElement.replaceChild(newButton, trigger.button);
                trigger.button = newButton;
            }
            if (trigger.audioPlayer) {
                trigger.audioPlayer.stop();
            }
        });
        this.animation.removeEventListener('complete', this.stopAnimation);
        if (this.slingshot) {
            this.slingshot.tearDown();
        }
    };
    InteractiveLogo.prototype.setTouchWasUsed = function () {
        this.touchWasUsed = true;
        window.removeEventListener('touchstart', this.setTouchWasUsed);
    };
    InteractiveLogo.prototype.initAllAudio = function () {
        if (!this.triggers) {
            return;
        }
        this.triggers.forEach(function (trigger) {
            if (trigger.audioPlayer) {
                trigger.audioPlayer.load();
            }
        });
    };
    InteractiveLogo.prototype.checkIfNeedsFocus = function (e) {
        if (e.key === 'Tab') {
            this.container.classList.add(util_1.ACTION_CLASSES.NEEDS_FOCUS_RING);
            window.removeEventListener('keydown', this.checkIfNeedsFocus);
        }
    };
    InteractiveLogo.prototype.playAnimation = function (trigger) {
        this.isPlaying = true;
        if (this.currentPlayingTrigger && this.currentPlayingTrigger.audioPlayer) {
            this.currentPlayingTrigger.audioPlayer.stop();
        }
        this.currentPlayingTrigger = trigger;
        this.animation.playSegments([trigger.startFrame, trigger.stopFrame], true);
        var level = util_1.DEFAULT_AUDIO_LEVEL;
        if (trigger.audioPlayer) {
            trigger.audioPlayer.start();
            switch (trigger.button.dataset.animation) {
                case 'satellite':
                    level = 0.4;
                    break;
                case 'volcano':
                    level = 0.2;
                    break;
            }
            trigger.audioPlayer.setVolume(level);
        }
    };
    InteractiveLogo.prototype.stopAnimation = function () {
        this.isPlaying = false;
        if (this.currentPlayingTrigger) {
            if (this.currentPlayingTrigger.audioPlayer) {
                this.currentPlayingTrigger.audioPlayer.stop();
            }
            this.currentPlayingTrigger = null;
        }
    };
    InteractiveLogo.prototype.playHoverAnimation = function (trigger) {
        if (this.isHovering || this.isPlaying) {
            return;
        }
        this.isHovering = true;
        this.animation.playSegments([trigger.hoverStartFrame, trigger.hoverStopFrame], true);
    };
    InteractiveLogo.prototype.stopHoverAnimation = function () {
        if (!this.isHovering) {
            return;
        }
        this.isHovering = false;
    };
    __decorate([
        core_decorators_1.autobind
    ], InteractiveLogo.prototype, "setTouchWasUsed", null);
    __decorate([
        core_decorators_1.autobind
    ], InteractiveLogo.prototype, "checkIfNeedsFocus", null);
    __decorate([
        core_decorators_1.autobind
    ], InteractiveLogo.prototype, "stopAnimation", null);
    return InteractiveLogo;
}());
exports.InteractiveLogo = InteractiveLogo;


/***/ }),

/***/ "./static/js/components/ListAccordion.ts":
/*!***********************************************!*\
  !*** ./static/js/components/ListAccordion.ts ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_decorators_1 = __webpack_require__(/*! core-decorators */ "./node_modules/core-decorators/es/core-decorators.js");
var util_1 = __webpack_require__(/*! ../util */ "./static/js/util/index.ts");
var INITIAL_SHOW_COUNT = 10;
var DEFAULT_ANIMATION_TIMING = 0.5;
var ListAccordion = (function () {
    function ListAccordion(parentSelector, buttonSelector) {
        this.parent = document.querySelector(parentSelector);
        this.items = util_1.nodeListToArray(this.parent.querySelectorAll('li'));
        this.button = document.querySelector(buttonSelector);
        this.isExpanded = false;
        this.hasBeenExpanded = false;
        if (this.parent && this.items && this.button) {
            this.init();
        }
    }
    ListAccordion.prototype.init = function () {
        this.button.addEventListener('click', this.handleButtonClick);
        window.addEventListener('resize', this.onResize);
        this.parent.addEventListener('scroll', this.onScroll);
        this.collapseList();
    };
    ListAccordion.prototype.handleButtonClick = function () {
        if (this.isExpanded) {
            this.collapseList();
        }
        else {
            this.expandList();
            this.hasBeenExpanded = true;
        }
    };
    ListAccordion.prototype.onResize = function () {
        if (this.isExpanded) {
            this.parent.style.removeProperty('height');
            return;
        }
        requestAnimationFrame(this.handleResize);
    };
    ListAccordion.prototype.handleResize = function () {
        this.collapseList();
    };
    ListAccordion.prototype.onScroll = function () {
        if (this.hasBeenExpanded) {
            return;
        }
        if (!this.isExpanded) {
            this.expandList();
            this.hasBeenExpanded = true;
        }
    };
    ListAccordion.prototype.findTargetItem = function () {
        var count = 0;
        var targetItem;
        var lastVisibleItem;
        this.items.forEach(function (item) {
            if (item.getBoundingClientRect().height > 0) {
                lastVisibleItem = item;
                count++;
                if (count === INITIAL_SHOW_COUNT) {
                    targetItem = item;
                }
            }
        });
        if (count < INITIAL_SHOW_COUNT) {
            targetItem = lastVisibleItem;
        }
        return targetItem || this.items[INITIAL_SHOW_COUNT - 1];
    };
    ListAccordion.prototype.collapseList = function () {
        this.isExpanded = false;
        var targetItem = this.findTargetItem();
        var targetHeight = targetItem.offsetTop - this.parent.offsetTop - 1;
        TweenMax.to(this.parent, DEFAULT_ANIMATION_TIMING, {
            height: targetHeight,
            ease: Quad.easeOut,
        });
    };
    ListAccordion.prototype.expandList = function () {
        var _this = this;
        if (this.hasBeenExpanded) {
            return;
        }
        this.isExpanded = true;
        this.button.classList.add(util_1.ACTION_CLASSES.INACTIVE);
        var targetHeight;
        TweenMax.set(this.parent, {
            autoAlpha: 0,
            onComplete: function () {
                _this.parent.style.position = 'absolute';
                _this.parent.style.removeProperty('height');
                _this.parent.style.removeProperty('position');
                targetHeight = _this.parent.offsetHeight;
                TweenMax.to(_this.parent, DEFAULT_ANIMATION_TIMING, {
                    height: targetHeight,
                    autoAlpha: 1,
                    ease: Quad.easeOut,
                    onComplete: function () {
                        _this.parent.style.removeProperty('height');
                    },
                });
            },
        });
    };
    __decorate([
        core_decorators_1.autobind
    ], ListAccordion.prototype, "handleButtonClick", null);
    __decorate([
        core_decorators_1.autobind
    ], ListAccordion.prototype, "onResize", null);
    __decorate([
        core_decorators_1.autobind
    ], ListAccordion.prototype, "handleResize", null);
    __decorate([
        core_decorators_1.autobind
    ], ListAccordion.prototype, "onScroll", null);
    __decorate([
        core_decorators_1.autobind
    ], ListAccordion.prototype, "expandList", null);
    return ListAccordion;
}());
exports.ListAccordion = ListAccordion;


/***/ }),

/***/ "./static/js/components/NavInPage.ts":
/*!*******************************************!*\
  !*** ./static/js/components/NavInPage.ts ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = __webpack_require__(/*! ../util */ "./static/js/util/index.ts");
var core_decorators_1 = __webpack_require__(/*! core-decorators */ "./node_modules/core-decorators/es/core-decorators.js");
var SELECTORS = {
    HERCULES_HEADER: '.hercules-header',
    NAV_LINKS: '.js-nav-link',
    NAV_BACKDROP: '#h-js-header__drawer-backdrop',
};
var CLASS_NAMES = {
    ACTIVE: '-active',
    HERCULES_ACTIVE_CLASS: 'h-is-active',
};
var NavInPage = (function () {
    function NavInPage(core) {
        this.core = core;
        this.windowHeight = window.innerHeight;
        this.navLinks = util_1.nodeListToArray(document.querySelectorAll(SELECTORS.NAV_LINKS));
        this.navBackdrop = document.querySelector(SELECTORS.NAV_BACKDROP);
        this.sectionEls = this.navLinks.map(function (link) {
            var linkEl = document.getElementById(link.dataset.link || '');
            return linkEl.querySelector('.h-c-headline');
        });
        this.currentSectionIndex = 0;
        this.sectionTops = this.sectionEls.map(function (el) { return el ? el.offsetTop : 0; });
        this.herculesHeader = document.querySelector(SELECTORS.HERCULES_HEADER);
        this.init();
    }
    NavInPage.prototype.init = function () {
        this.attachEvents();
        this.checkAndSetCurrentSections(this.getDocumentScroll());
    };
    NavInPage.prototype.attachEvents = function () {
        var _this = this;
        window.addEventListener('scroll', this.onScroll);
        this.navLinks.forEach(function (link, index) {
            link.addEventListener('click', _this.scrollToSection.bind(_this, index));
        });
    };
    NavInPage.prototype.getDocumentScroll = function () {
        return window.scrollY || document.documentElement.scrollTop;
    };
    NavInPage.prototype.onScroll = function () {
        requestAnimationFrame(this.handledScroll);
    };
    NavInPage.prototype.handledScroll = function () {
        var currentScroll = this.getDocumentScroll();
        this.checkAndSetCurrentSections(currentScroll);
    };
    NavInPage.prototype.checkAndSetCurrentSections = function (currentScroll) {
        var closest = 0;
        if (currentScroll < this.sectionTops[1] - this.windowHeight) {
            closest = 0;
        }
        else if ((currentScroll > this.sectionTops[1] - this.windowHeight) &&
            (currentScroll < this.sectionTops[2] - this.windowHeight - this.herculesHeader.offsetHeight)) {
            closest = 1;
        }
        else {
            closest = 2;
        }
        if (this.currentSectionIndex !== closest) {
            this.currentSectionIndex = closest;
        }
        else {
            return;
        }
        this.activateSection();
    };
    NavInPage.prototype.activateSection = function () {
        this.deactivateSections();
        this.navLinks[this.currentSectionIndex].classList.add(CLASS_NAMES.HERCULES_ACTIVE_CLASS);
    };
    NavInPage.prototype.deactivateSections = function () {
        var _this = this;
        this.navLinks.forEach(function (link, index) {
            if (_this.currentSectionIndex !== index) {
                link.classList.remove(CLASS_NAMES.HERCULES_ACTIVE_CLASS);
                link.blur();
            }
        });
    };
    NavInPage.prototype.scrollToSection = function (sectionIndex, e) {
        e.preventDefault();
        this.navBackdrop.click();
        if (!this.sectionEls) {
            return;
        }
        var target = this.sectionEls[sectionIndex].offsetTop;
        var destination = this.getDocumentScroll() > target
            ? target - this.herculesHeader.offsetHeight
            : target;
        TweenMax.to(window, 1, {
            scrollTo: {
                y: destination - 60,
                autoKill: false,
            },
        });
    };
    __decorate([
        core_decorators_1.autobind
    ], NavInPage.prototype, "init", null);
    __decorate([
        core_decorators_1.autobind
    ], NavInPage.prototype, "onScroll", null);
    __decorate([
        core_decorators_1.autobind
    ], NavInPage.prototype, "handledScroll", null);
    return NavInPage;
}());
exports.default = NavInPage;


/***/ }),

/***/ "./static/js/components/ResourceNav.ts":
/*!*********************************************!*\
  !*** ./static/js/components/ResourceNav.ts ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = __webpack_require__(/*! ../util */ "./static/js/util/index.ts");
var core_decorators_1 = __webpack_require__(/*! core-decorators */ "./node_modules/core-decorators/es/core-decorators.js");
var SELECTORS = {
    NAV_CONTAINER: '.js-resource-nav',
};
var ResourceNav = (function () {
    function ResourceNav() {
        this.navContainer = document.querySelector(SELECTORS.NAV_CONTAINER);
        if (this.navContainer) {
            this.navListItems = util_1.nodeListToArray(this.navContainer.querySelectorAll('li a'));
            this.activeListItem = this.navListItems.find(function (item) {
                return item.classList.contains(util_1.ACTION_CLASSES.ACTIVE);
            });
            this.init();
        }
    }
    ResourceNav.prototype.init = function () {
        var destination = this.activeListItem
            && this.activeListItem.getBoundingClientRect().left || 0;
        TweenMax.to(this.navContainer, 1, {
            scrollTo: {
                x: destination - 16,
                autoKill: false,
            },
        });
    };
    __decorate([
        core_decorators_1.autobind
    ], ResourceNav.prototype, "init", null);
    return ResourceNav;
}());
exports.default = ResourceNav;


/***/ }),

/***/ "./static/js/components/ScrollTo.ts":
/*!******************************************!*\
  !*** ./static/js/components/ScrollTo.ts ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_decorators_1 = __webpack_require__(/*! core-decorators */ "./node_modules/core-decorators/es/core-decorators.js");
var util_1 = __webpack_require__(/*! ../util */ "./static/js/util/index.ts");
var LINK_SELECTOR = '.js-scrollto-link';
var TRACKER_SELECTOR = '.js-scrollto-tracker';
var SELECT_MENU_SELECTOR = '.js-scrollto-select';
var SCROLL_TIMING = 0.75;
var WINDOW_OFFSET = window.innerHeight * 0.5;
var ScrollTo = (function () {
    function ScrollTo() {
        var allLinks = util_1.nodeListToArray(document.querySelectorAll(LINK_SELECTOR));
        this.allSections = allLinks.map(function (link) {
            var linkhref = link.getAttribute('href') || 'body';
            var target = document.querySelector(linkhref);
            return {
                link: link,
                element: target,
                hash: linkhref,
                shouldTrack: link.dataset.navTrack === 'true',
            };
        });
        this.selectMenu = document.querySelector(SELECT_MENU_SELECTOR);
        var options = this.selectMenu &&
            util_1.nodeListToArray(this.selectMenu.querySelectorAll('option'));
        this.allOptions = options && options.map(function (option) {
            var isUrl = option.dataset.url === 'true';
            var linkhref = option.getAttribute('value') || 'body';
            var target = !isUrl ? document.querySelector(linkhref) : null;
            return {
                element: target,
                hash: linkhref,
                shouldTrack: false,
                isUrl: isUrl,
            };
        });
        this.tracker = document.querySelector(TRACKER_SELECTOR);
        this.lastScroll = this.getScroll();
        this.isTweening = false;
        this.isSmallScreen = !window.matchMedia(util_1.MEDIA_QUERIES.SMALL).matches;
        this.activeSection = this.allSections[0];
        if (!this.allSections) {
            return;
        }
        this.activateSection(this.allSections[0]);
        this.bindEvents();
        this.onScroll();
    }
    ScrollTo.prototype.bindEvents = function () {
        var _this = this;
        this.allSections.forEach(function (section) {
            if (section.link) {
                section.link.addEventListener('click', function (e) {
                    e.preventDefault();
                    _this.handleNavClick(section);
                });
            }
        });
        if (this.selectMenu) {
            this.selectMenu.addEventListener('change', this.handleSelectChange);
        }
        window.addEventListener('scroll', this.onScroll);
        window.addEventListener('resize', this.onResize);
    };
    ScrollTo.prototype.handleNavClick = function (section) {
        if (!section.element) {
            return;
        }
        this.scrollToSection(section.element);
        this.activateSection(section);
        this.moveTracker(section);
    };
    ScrollTo.prototype.handleSelectChange = function (e) {
        var _this = this;
        var menu = e.target;
        var isUrl = menu.selectedOptions[0].dataset.url === 'true';
        var hash = menu.selectedOptions[0].value;
        if (isUrl) {
            window.location.href = hash;
        }
        else {
            this.allOptions.forEach(function (section) {
                if (hash === section.hash && section.element) {
                    _this.scrollToSection(section.element);
                    _this.activateSection(section);
                }
            });
        }
    };
    ScrollTo.prototype.scrollToSection = function (target) {
        var _this = this;
        TweenMax.to(window, SCROLL_TIMING, {
            scrollTo: {
                y: target.offsetTop - (window.innerHeight * 0.1),
                autoKill: false,
            },
            onStart: function () {
                _this.isTweening = true;
            },
            onComplete: function () {
                setTimeout(function () {
                    _this.isTweening = false;
                }, 100);
            },
            ease: Expo.easeOut,
        });
    };
    ScrollTo.prototype.getScroll = function () {
        return window.scrollY || document.documentElement.scrollTop;
    };
    ScrollTo.prototype.onScroll = function () {
        if (this.isSmallScreen) {
            return;
        }
        requestAnimationFrame(this.handleScroll);
    };
    ScrollTo.prototype.handleScroll = function () {
        if (this.isTweening) {
            return;
        }
        var currentScroll = this.getScroll();
        var direction = currentScroll > this.lastScroll ? 1 : -1;
        var section;
        var isActiveSectionInView = this.checkIfSectionIsInView(this.activeSection, direction);
        if (isActiveSectionInView) {
            return;
        }
        for (var i = 0; i < this.allSections.length; i++) {
            section = this.allSections[i];
            if (this.checkIfSectionIsInView(section, direction)) {
                this.activateSection(section);
                return;
            }
        }
        this.lastScroll = currentScroll;
    };
    ScrollTo.prototype.onResize = function () {
        requestAnimationFrame(this.handleResize);
    };
    ScrollTo.prototype.handleResize = function () {
        this.isSmallScreen = !window.matchMedia(util_1.MEDIA_QUERIES.SMALL).matches;
    };
    ScrollTo.prototype.checkIfSectionIsInView = function (section, direction) {
        if (direction === void 0) { direction = 1; }
        if (!section || !section.element) {
            return false;
        }
        var bounds = section.element.getBoundingClientRect();
        var isInView = false;
        if (direction > 0) {
            isInView = bounds.top <= WINDOW_OFFSET && bounds.bottom > WINDOW_OFFSET * 0.5;
        }
        else if (direction < 0) {
            isInView = bounds.bottom > WINDOW_OFFSET * 0.5 && bounds.top <= WINDOW_OFFSET;
        }
        return isInView;
    };
    ScrollTo.prototype.moveTracker = function (section) {
        var _this = this;
        if (!this.tracker || !section.link) {
            return;
        }
        if (section.shouldTrack) {
            if (this.trackerTween) {
                this.trackerTween.kill();
            }
            this.trackerTween = TweenMax.to(this.tracker, SCROLL_TIMING, {
                y: section.link.offsetTop,
                height: section.link.offsetHeight,
                onStart: function () {
                    _this.tracker.classList.add(util_1.ACTION_CLASSES.ACTIVE);
                },
                ease: Expo.easeOut,
            });
        }
        else {
            this.tracker.classList.remove(util_1.ACTION_CLASSES.ACTIVE);
        }
    };
    ScrollTo.prototype.activateSection = function (section) {
        if (!section || !section.element) {
            return;
        }
        if (this.activeSection) {
            this.deactivateSection(this.activeSection);
        }
        this.activeSection = section;
        section.element.classList.add(util_1.ACTION_CLASSES.ACTIVE);
        if (section.link) {
            section.link.classList.add(util_1.ACTION_CLASSES.ACTIVE);
        }
        this.moveTracker(section);
    };
    ScrollTo.prototype.deactivateSection = function (section) {
        if (!section || !section.element) {
            return;
        }
        section.element.classList.remove(util_1.ACTION_CLASSES.ACTIVE);
        if (section.link) {
            section.link.classList.remove(util_1.ACTION_CLASSES.ACTIVE);
        }
    };
    __decorate([
        core_decorators_1.autobind
    ], ScrollTo.prototype, "handleNavClick", null);
    __decorate([
        core_decorators_1.autobind
    ], ScrollTo.prototype, "handleSelectChange", null);
    __decorate([
        core_decorators_1.autobind
    ], ScrollTo.prototype, "onScroll", null);
    __decorate([
        core_decorators_1.autobind
    ], ScrollTo.prototype, "handleScroll", null);
    __decorate([
        core_decorators_1.autobind
    ], ScrollTo.prototype, "onResize", null);
    __decorate([
        core_decorators_1.autobind
    ], ScrollTo.prototype, "handleResize", null);
    return ScrollTo;
}());
exports.ScrollTo = ScrollTo;


/***/ }),

/***/ "./static/js/components/Slingshot.ts":
/*!*******************************************!*\
  !*** ./static/js/components/Slingshot.ts ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_decorators_1 = __webpack_require__(/*! core-decorators */ "./node_modules/core-decorators/es/core-decorators.js");
var util_1 = __webpack_require__(/*! ../util */ "./static/js/util/index.ts");
var components_1 = __webpack_require__(/*! ../components */ "./static/js/components/index.ts");
var ITEM_SELECTOR = '.js-slingshot-item';
var CANVAS_SELECTOR = '.js-slingshot-canvas';
var PIXEL_DENSITY = window.devicePixelRatio > 1 ? window.devicePixelRatio : 1;
var ANIMATION_TIME = 1;
var RETURN_TO_ORIGIN_TIMEOUT = 1500;
var THROTTLE_TIMEOUT = 250;
var DIAGRAM_LINE_COLOR = '#dadce0';
var DIAGRAM_LINE_WIDTH = 1 * PIXEL_DENSITY;
var DIAGRAM_DASH_PATTERN = [6 * PIXEL_DENSITY, 6 * PIXEL_DENSITY];
var DIAGRAM_CIRCLE_RADIUS = 34;
var DIAGRAM_TEXT_COLOR = '#bdc1c6';
var DIAGRAM_FONT = 12 * PIXEL_DENSITY + "px Google Sans";
var INITIAL_MASS = 100;
var MASS_MULTIPLIER = 10000;
var GRAVITY_CONSTANT = 10;
var TIMESTEP = 1;
var VELOCITY_DEGRADATION_RATE = 0.99;
var VELOCITY_INTERACTION_MODIFIER = 10;
var AUTOTHROW_MULTIPLIER = 2;
var Slingshot = (function () {
    function Slingshot(container) {
        var _this = this;
        this.mouseIsDown = false;
        this.lastMouseX = 0;
        this.lastMouseY = 0;
        this.mouseX = 0;
        this.mouseY = 0;
        this.mouseOffsetX = 0;
        this.mouseOffsetY = 0;
        this.canvasIsVisible = false;
        if (!container) {
            throw new Error('A container element must be provided');
        }
        this.container = container;
        this.containerIsInView = this.getIsContainerInView();
        this.canvas = this.container.querySelector(CANVAS_SELECTOR);
        if (!this.canvas) {
            throw new Error('No canvas element found');
        }
        this.updateCanvasDimensions();
        this.ctx = this.canvas.getContext('2d');
        var buttons = util_1.nodeListToArray(this.container.querySelectorAll(ITEM_SELECTOR));
        this.allShapes = buttons.map(function (item) {
            var body = _this.createPhysicsBody({
                x: item.getBoundingClientRect().left,
                y: item.getBoundingClientRect().top,
                mass: INITIAL_MASS,
                radius: item.offsetWidth / 2,
            });
            var anchor = _this.createPhysicsBody({
                x: item.getBoundingClientRect().left,
                y: item.getBoundingClientRect().top,
                mass: INITIAL_MASS * MASS_MULTIPLIER,
            });
            var audioFile;
            switch (item.dataset.audio) {
                case 'e':
                    audioFile = '/static/audio/gsf-bloops-EE.mp3';
                    break;
                case 'n':
                    audioFile = '/static/audio/gsf-bloops-N.mp3';
                    break;
            }
            return {
                button: item,
                origin: {
                    x: item.getBoundingClientRect().left,
                    y: item.getBoundingClientRect().top,
                },
                body: body,
                anchor: anchor,
                isTweening: false,
                isLocked: true,
                needsDiagram: item.dataset.diagram === 'true',
                audioPlayer: audioFile ? new components_1.AudioPlayer(audioFile) : null,
            };
        });
    }
    Slingshot.prototype.init = function () {
        var _this = this;
        if (!this.container) {
            return;
        }
        this.bindEvents();
        this.render();
        this.allShapes.forEach(function (shape) {
            if (shape.button.dataset.attract === 'true') {
                _this.autoDragAndThrowItem(shape);
            }
            if (shape.audioPlayer) {
                shape.audioPlayer.load();
            }
        });
    };
    Slingshot.prototype.bindEvents = function () {
        var _this = this;
        this.allShapes.forEach(function (shape) {
            shape.button.addEventListener('mousedown', function (e) {
                e.preventDefault();
                _this.handleMouseDown(e, shape);
            });
            shape.button.addEventListener('touchstart', function (e) {
                e.preventDefault();
                _this.handleTouchStart(e, shape);
            });
            shape.button.addEventListener('keydown', function (e) {
                var keyEvent = e;
                if (keyEvent.code === 'Enter' || keyEvent.code === 'Space') {
                    if (shape.audioPlayer) {
                        shape.audioPlayer.start();
                        shape.audioPlayer.setVolume(util_1.DEFAULT_AUDIO_LEVEL);
                    }
                    _this.autoDragAndThrowItem(shape);
                }
            });
        });
        window.addEventListener('mousemove', this.handleMouseMove);
        window.addEventListener('mouseup', this.handleMouseUp);
        window.addEventListener('touchmove', this.handleTouchMove);
        window.addEventListener('touchend', this.handleTouchEnd);
        window.addEventListener('resize', this.onResize);
        window.addEventListener('scroll', this.onScroll);
    };
    Slingshot.prototype.tearDown = function () {
        this.allShapes.forEach(function (shape) {
            if (shape.button && shape.button.parentElement) {
                var newElement = shape.button.cloneNode();
                shape.button.parentElement.replaceChild(newElement, shape.button);
                shape.button = newElement;
            }
            if (shape.audioPlayer) {
                shape.audioPlayer.stop();
            }
        });
        window.removeEventListener('mousemove', this.handleMouseMove);
        window.removeEventListener('mouseup', this.handleMouseUp);
        window.removeEventListener('touchmove', this.handleTouchMove);
        window.removeEventListener('touchend', this.handleTouchEnd);
        window.removeEventListener('resize', this.onResize);
        window.removeEventListener('scroll', this.onScroll);
        this.containerIsInView = false;
    };
    Slingshot.prototype.handleMouseDown = function (e, shape) {
        if (e.button !== 0) {
            return;
        }
        this.handlePointerDown(e.clientX, e.clientY, shape);
    };
    Slingshot.prototype.handleTouchStart = function (e, shape) {
        this.handlePointerDown(e.touches[0].clientX, e.touches[0].clientY, shape);
    };
    Slingshot.prototype.handlePointerDown = function (pointX, pointY, shape) {
        if (shape.isTweening) {
            return;
        }
        this.cachePointerCoords(pointX, pointY);
        this.mouseIsDown = true;
        this.mouseOffsetX = pointX - shape.body.pointX;
        this.mouseOffsetY = pointY - shape.body.pointY;
        shape.isLocked = true;
        this.activeShape = shape;
        this.activeShape.button.classList.add(util_1.ACTION_CLASSES.ACTIVE);
        this.updatePointerCoords(pointX, pointY);
        if (this.shapeTweenTimeout) {
            clearTimeout(this.shapeTweenTimeout);
        }
    };
    Slingshot.prototype.handleMouseUp = function (e) {
        this.handlePointerUp(e.clientX, e.clientY);
    };
    Slingshot.prototype.handleTouchEnd = function (e) {
        var touchEvent = e;
        this.handlePointerUp(touchEvent.changedTouches[0].clientX, touchEvent.changedTouches[0].clientY);
    };
    Slingshot.prototype.handlePointerUp = function (pointerX, pointerY) {
        if (!this.mouseIsDown) {
            return;
        }
        var pointDist = this.getDistanceAsTwoPoints(this.lastMouseX, this.lastMouseY, pointerX, pointerY);
        if (this.activeShape) {
            if (this.activeShape.audioPlayer) {
                this.activeShape.audioPlayer.start();
                this.activeShape.audioPlayer.setVolume(util_1.DEFAULT_AUDIO_LEVEL);
            }
            this.activeShape.body.velocityX = pointDist.x / VELOCITY_INTERACTION_MODIFIER;
            this.activeShape.body.velocityY = pointDist.y / VELOCITY_INTERACTION_MODIFIER;
            this.activeShape.isLocked = this.activeShape.isTweening === true;
            this.activeShape.button.classList.remove(util_1.ACTION_CLASSES.ACTIVE);
            this.activeShape = null;
        }
        this.shapeTweenTimeout = setTimeout(this.returnAllBodiesToOrigin, RETURN_TO_ORIGIN_TIMEOUT);
        this.hideCanvas();
        this.mouseIsDown = false;
    };
    Slingshot.prototype.onResize = function () {
        requestAnimationFrame(this.handleResize);
    };
    Slingshot.prototype.handleResize = function () {
        var _this = this;
        if (this.throttleTimeout) {
            clearTimeout(this.throttleTimeout);
        }
        this.throttleTimeout = setTimeout(function () {
            _this.updateShapeCoords();
            _this.updateCanvasDimensions();
        }, THROTTLE_TIMEOUT);
    };
    Slingshot.prototype.onScroll = function () {
        requestAnimationFrame(this.handleScroll);
    };
    Slingshot.prototype.handleScroll = function () {
        var _this = this;
        if (this.throttleTimeout) {
            clearTimeout(this.throttleTimeout);
        }
        this.throttleTimeout = setTimeout(function () {
            _this.updateShapeCoords();
            var wasInView = _this.containerIsInView;
            _this.containerIsInView = _this.getIsContainerInView();
            if (!wasInView && _this.containerIsInView) {
                _this.render();
            }
        }, THROTTLE_TIMEOUT);
    };
    Slingshot.prototype.getIsContainerInView = function () {
        return this.container.getBoundingClientRect().top < window.innerHeight &&
            this.container.getBoundingClientRect().bottom > 0;
    };
    Slingshot.prototype.cachePointerCoords = function (pointX, pointY) {
        this.lastMouseX = pointX;
        this.lastMouseY = pointY;
    };
    Slingshot.prototype.handleMouseMove = function (e) {
        this.updatePointerCoords(e.clientX, e.clientY);
    };
    Slingshot.prototype.handleTouchMove = function (e) {
        var touchEvent = e;
        this.updatePointerCoords(touchEvent.touches[0].clientX, touchEvent.touches[0].clientY);
    };
    Slingshot.prototype.updatePointerCoords = function (pointX, pointY) {
        if (!this.mouseIsDown) {
            return;
        }
        this.mouseX = pointX;
        this.mouseY = pointY;
    };
    Slingshot.prototype.updateShapeCoords = function () {
        this.allShapes.forEach(function (shape) {
            var x = shape.button.getBoundingClientRect().left;
            var y = shape.button.getBoundingClientRect().top;
            shape.body.pointX = x;
            shape.body.pointY = y;
            shape.anchor.pointX = x;
            shape.anchor.pointY = y;
            shape.origin.x = x;
            shape.origin.y = y;
        });
    };
    Slingshot.prototype.updateCanvasDimensions = function () {
        this.canvas.width = this.container.offsetWidth * PIXEL_DENSITY;
        this.canvas.height = this.container.offsetHeight * PIXEL_DENSITY;
    };
    Slingshot.prototype.returnAllBodiesToOrigin = function () {
        var _this = this;
        this.allShapes.forEach(function (shape) {
            _this.returnBodyToOrigin(shape);
        });
    };
    Slingshot.prototype.returnBodyToOrigin = function (shape) {
        if (shape.isTweening || shape.isLocked) {
            return;
        }
        shape.isLocked = true;
        TweenMax.to(shape.body, ANIMATION_TIME, {
            pointX: shape.anchor.pointX,
            pointY: shape.anchor.pointY,
            onStart: function () {
                shape.isTweening = true;
                shape.button.setAttribute('disabled', 'true');
            },
            onComplete: function () {
                shape.isTweening = false;
                shape.body.pointX = shape.anchor.pointX;
                shape.body.pointY = shape.anchor.pointY;
                shape.button.removeAttribute('disabled');
                if (shape.audioPlayer) {
                    shape.audioPlayer.stop();
                }
            },
            ease: Expo.easeOut,
        });
    };
    Slingshot.prototype.autoDragAndThrowItem = function (shape) {
        var _this = this;
        if (shape.isTweening) {
            return;
        }
        shape.isLocked = true;
        var targetX = shape.anchor.pointX - shape.button.offsetWidth * AUTOTHROW_MULTIPLIER;
        var targetY = shape.anchor.pointY + shape.button.offsetHeight;
        TweenMax.to(shape.body, ANIMATION_TIME, {
            pointX: targetX,
            pointY: targetY,
            onStart: function () {
                _this.mouseOffsetX = 0;
                _this.mouseOffsetY = 0;
                _this.lastMouseX = shape.body.pointX;
                _this.lastMouseY = shape.body.pointY;
                _this.activeShape = shape;
                _this.activeShape.button.classList.add(util_1.ACTION_CLASSES.ACTIVE);
                shape.isTweening = true;
                _this.mouseIsDown = true;
            },
            onUpdate: function () {
                _this.mouseX = shape.body.pointX;
                _this.mouseY = shape.body.pointY;
            },
            onComplete: function () {
                _this.shapeTweenTimeout = setTimeout(_this.returnAllBodiesToOrigin, RETURN_TO_ORIGIN_TIMEOUT);
                if (_this.activeShape) {
                    _this.activeShape.button.classList.remove(util_1.ACTION_CLASSES.ACTIVE);
                    _this.activeShape = null;
                }
                var pointDist = _this.getDistanceAsTwoPoints(shape.anchor.pointX, shape.anchor.pointY, targetX, targetY);
                shape.isTweening = false;
                shape.isLocked = false;
                _this.mouseIsDown = false;
                shape.body.pointX = targetX;
                shape.body.pointY = targetY;
                shape.body.velocityX = pointDist.x / VELOCITY_INTERACTION_MODIFIER;
                shape.body.velocityY = pointDist.y / VELOCITY_INTERACTION_MODIFIER;
            },
            ease: Expo.easeOut,
        });
    };
    Slingshot.prototype.createPhysicsBody = function (options) {
        return {
            forceX: 0,
            forceY: 0,
            pointX: options.x,
            pointY: options.y,
            velocityX: 1,
            velocityY: 1,
            mass: options.mass,
            radius: options.radius || 1,
        };
    };
    Slingshot.prototype.getDistanceAsTwoPoints = function (x1, y1, x2, y2) {
        return {
            x: x1 - x2,
            y: y1 - y2,
        };
    };
    Slingshot.prototype.getPointDistance = function (x1, y1, x2, y2) {
        return Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2));
    };
    Slingshot.prototype.getAngle = function (x1, y1, x2, y2) {
        return Math.atan2(x2 - x1, y2 - y1);
    };
    Slingshot.prototype.pairwisePhysics = function (a, b) {
        var pointDist = this.getDistanceAsTwoPoints(a.pointX, a.pointY, b.pointX, b.pointY);
        var distX = pointDist.x;
        var distY = pointDist.y;
        var dotProduct = distX * distX + distY * distY;
        if (dotProduct === 0) {
            return;
        }
        var r = Math.sqrt(dotProduct);
        distX /= r;
        distY /= r;
        var forceMagnitude = Math.min(GRAVITY_CONSTANT * a.mass * b.mass / dotProduct, 100);
        var forceX = distX * forceMagnitude;
        var forceY = distY * forceMagnitude;
        a.forceX -= forceX;
        a.forceY -= forceY;
        b.forceX += forceX;
        b.forceY += forceY;
    };
    Slingshot.prototype.resetForce = function (body) {
        body.forceX = 0;
        body.forceY = 0;
    };
    Slingshot.prototype.moveBody = function (body) {
        body.velocityX += body.forceX * TIMESTEP / body.mass;
        body.velocityY += body.forceY * TIMESTEP / body.mass;
        body.pointX += body.velocityX * TIMESTEP;
        body.pointY += body.velocityY * TIMESTEP;
    };
    Slingshot.prototype.degradeVelocity = function (body) {
        body.velocityX *= VELOCITY_DEGRADATION_RATE;
        body.velocityY *= VELOCITY_DEGRADATION_RATE;
    };
    Slingshot.prototype.lockActiveShapeToMouse = function () {
        if (!this.activeShape) {
            return;
        }
        if (!this.activeShape.isTweening) {
            var containerLeft = this.container.getBoundingClientRect().left;
            var containerTop = this.container.getBoundingClientRect().top;
            var inBoundsX = this.mouseX > containerLeft &&
                this.mouseX < this.container.offsetWidth + containerLeft;
            var inBoundsY = this.mouseY > containerTop &&
                this.mouseY < this.container.offsetHeight + containerTop;
            var offsetX = this.mouseX - this.mouseOffsetX;
            var offsetY = this.mouseY - this.mouseOffsetY;
            if (inBoundsX) {
                this.activeShape.body.pointX = offsetX;
            }
            else if (this.mouseX + this.mouseOffsetX < containerLeft) {
                this.activeShape.body.pointX = containerLeft - this.mouseOffsetX;
            }
            else if (this.mouseX - this.mouseOffsetX > this.container.offsetWidth + containerLeft) {
                this.activeShape.body.pointX =
                    this.container.offsetWidth + containerLeft - this.mouseOffsetX;
            }
            if (inBoundsY) {
                this.activeShape.body.pointY = offsetY;
            }
            else if (this.mouseY + this.mouseOffsetY < containerTop) {
                this.mouseY = containerTop - this.mouseOffsetY;
            }
            else if (this.mouseY + this.mouseOffsetY > this.container.offsetHeight + containerTop) {
                this.mouseY = this.container.offsetHeight + containerTop + this.mouseOffsetY;
            }
        }
        if (!this.activeShape.needsDiagram) {
            return;
        }
        var pointDist = this.getPointDistance(this.activeShape.body.pointX, this.activeShape.body.pointY, this.activeShape.anchor.pointX, this.activeShape.anchor.pointY);
        var isAbove = Math.abs(pointDist) > this.activeShape.body.radius / 2 &&
            this.activeShape.body.pointY < this.activeShape.anchor.pointY;
        var isBelow = Math.abs(pointDist) > this.activeShape.body.radius * 2 &&
            this.activeShape.body.pointY > this.activeShape.anchor.pointY;
        var isFar = Math.abs(pointDist) > this.activeShape.body.radius * 4;
        if (isAbove || isBelow || isFar) {
            this.drawDiagram();
            this.showCanvas();
        }
        else {
            this.hideCanvas();
        }
    };
    Slingshot.prototype.showCanvas = function () {
        if (this.canvasIsVisible) {
            return;
        }
        this.canvasIsVisible = true;
        this.canvas.classList.add(util_1.ACTION_CLASSES.ACTIVE);
    };
    Slingshot.prototype.hideCanvas = function () {
        if (!this.canvasIsVisible) {
            return;
        }
        this.canvasIsVisible = false;
        this.canvas.classList.remove(util_1.ACTION_CLASSES.ACTIVE);
    };
    Slingshot.prototype.drawDiagram = function () {
        if (!this.ctx || !this.activeShape) {
            return;
        }
        var containerLeft = this.container.getBoundingClientRect().left;
        var containerTop = this.container.getBoundingClientRect().top;
        this.ctx.fillStyle = DIAGRAM_TEXT_COLOR;
        this.ctx.strokeStyle = DIAGRAM_LINE_COLOR;
        this.ctx.setLineDash(DIAGRAM_DASH_PATTERN);
        this.ctx.lineWidth = DIAGRAM_LINE_WIDTH;
        this.ctx.beginPath();
        this.ctx.moveTo(this.activeShape.button.offsetLeft * PIXEL_DENSITY, (this.activeShape.button.offsetTop + this.activeShape.button.offsetHeight) * PIXEL_DENSITY);
        this.ctx.lineTo((this.activeShape.body.pointX - containerLeft + (this.activeShape.button.offsetWidth / 2)) *
            PIXEL_DENSITY, (this.activeShape.body.pointY - containerTop + (this.activeShape.button.offsetHeight / 2)) *
            PIXEL_DENSITY);
        this.ctx.stroke();
        this.ctx.closePath();
        this.ctx.beginPath();
        this.ctx.moveTo(this.activeShape.button.offsetLeft * PIXEL_DENSITY, (this.activeShape.button.offsetTop + this.activeShape.button.offsetHeight) * PIXEL_DENSITY);
        this.ctx.lineTo((this.activeShape.button.offsetLeft + this.activeShape.button.offsetWidth) * PIXEL_DENSITY, (this.activeShape.button.offsetTop + this.activeShape.button.offsetHeight) * PIXEL_DENSITY);
        this.ctx.stroke();
        this.ctx.closePath();
        var angle = this.getAngle(this.activeShape.anchor.pointX - (this.activeShape.button.offsetWidth / 2), this.activeShape.anchor.pointY + (this.activeShape.button.offsetHeight / 2), this.activeShape.body.pointX, this.activeShape.body.pointY);
        var angleInDeg = Math.round(-angle * (180 / Math.PI)) + 90;
        if (angleInDeg < 0) {
            angleInDeg = 360 + angleInDeg;
        }
        this.ctx.setLineDash([0]);
        this.ctx.beginPath();
        this.ctx.arc(this.activeShape.button.offsetLeft * PIXEL_DENSITY, (this.activeShape.button.offsetTop + this.activeShape.button.offsetHeight) * PIXEL_DENSITY, DIAGRAM_CIRCLE_RADIUS * PIXEL_DENSITY, angleInDeg < 340 ? -10 * (Math.PI / 180) : 0, angleInDeg < 340 ? -angle + (100 * (Math.PI / 180)) : -angle + (90 * (Math.PI / 180)));
        this.ctx.stroke();
        this.ctx.closePath();
        var angleText = angleInDeg + "\u00B0";
        this.ctx.textAlign = 'right';
        this.ctx.font = DIAGRAM_FONT;
        this.ctx.fillText(angleText, (this.activeShape.button.offsetLeft + 22) * PIXEL_DENSITY, (this.activeShape.button.offsetTop + this.activeShape.button.offsetHeight + 18) *
            PIXEL_DENSITY);
        var pointDist = this.getDistanceAsTwoPoints(this.lastMouseX - this.mouseOffsetX - containerLeft, this.lastMouseY - this.mouseOffsetY - containerTop, this.activeShape.body.pointX - containerLeft, this.activeShape.body.pointY - containerTop);
        var velocity = Math.abs(pointDist.x / VELOCITY_INTERACTION_MODIFIER) +
            Math.abs(pointDist.y / VELOCITY_INTERACTION_MODIFIER);
        var lengthText = Math.round(velocity) + "v";
        this.ctx.fillText(lengthText, (this.activeShape.button.offsetLeft + 25) * PIXEL_DENSITY, (this.activeShape.button.offsetTop + this.activeShape.button.offsetHeight - 10) *
            PIXEL_DENSITY);
    };
    Slingshot.prototype.render = function () {
        if (!this.containerIsInView) {
            return;
        }
        if (this.ctx) {
            this.ctx.clearRect(0, 0, window.innerWidth, window.innerHeight);
        }
        for (var i = 0; i < this.allShapes.length; i++) {
            var shape = this.allShapes[i];
            this.resetForce(shape.body);
            this.resetForce(shape.anchor);
            var pointDist = this.getPointDistance(shape.body.pointX, shape.body.pointY, shape.anchor.pointX, shape.anchor.pointY);
            var bodiesAreClose = Math.abs(pointDist) < shape.anchor.radius;
            if (!bodiesAreClose && !shape.isTweening) {
                for (var ii = i + 1; ii < this.allShapes.length; ii++) {
                    var shape2 = this.allShapes[ii];
                    if (shape2 && !shape2.isLocked) {
                        this.pairwisePhysics(shape.body, shape2.body);
                    }
                }
                this.pairwisePhysics(shape.body, shape.anchor);
            }
        }
        for (var i = 0; i < this.allShapes.length; i++) {
            var shape = this.allShapes[i];
            var pointDist = this.getPointDistance(shape.body.pointX, shape.body.pointY, shape.anchor.pointX, shape.anchor.pointY);
            var bodiesAreClose = Math.abs(pointDist) < shape.anchor.radius;
            if (!bodiesAreClose && !shape.isTweening && shape !== this.activeShape) {
                this.moveBody(shape.body);
                this.degradeVelocity(shape.body);
            }
            else if (bodiesAreClose && !shape.isTweening) {
                this.returnBodyToOrigin(shape);
            }
            if (this.mouseIsDown) {
                this.lockActiveShapeToMouse();
            }
            var shapeLeft = shape.body.pointX - shape.origin.x + "px";
            var shapeTop = shape.body.pointY - shape.origin.y + "px";
            shape.button.style.transform = "translate3d(" + shapeLeft + ", " + shapeTop + ", 0)";
        }
        requestAnimationFrame(this.render);
    };
    __decorate([
        core_decorators_1.autobind
    ], Slingshot.prototype, "handleMouseDown", null);
    __decorate([
        core_decorators_1.autobind
    ], Slingshot.prototype, "handleTouchStart", null);
    __decorate([
        core_decorators_1.autobind
    ], Slingshot.prototype, "handlePointerDown", null);
    __decorate([
        core_decorators_1.autobind
    ], Slingshot.prototype, "handleMouseUp", null);
    __decorate([
        core_decorators_1.autobind
    ], Slingshot.prototype, "handleTouchEnd", null);
    __decorate([
        core_decorators_1.autobind
    ], Slingshot.prototype, "handlePointerUp", null);
    __decorate([
        core_decorators_1.autobind
    ], Slingshot.prototype, "onResize", null);
    __decorate([
        core_decorators_1.autobind
    ], Slingshot.prototype, "handleResize", null);
    __decorate([
        core_decorators_1.autobind
    ], Slingshot.prototype, "onScroll", null);
    __decorate([
        core_decorators_1.autobind
    ], Slingshot.prototype, "handleScroll", null);
    __decorate([
        core_decorators_1.autobind
    ], Slingshot.prototype, "cachePointerCoords", null);
    __decorate([
        core_decorators_1.autobind
    ], Slingshot.prototype, "handleMouseMove", null);
    __decorate([
        core_decorators_1.autobind
    ], Slingshot.prototype, "handleTouchMove", null);
    __decorate([
        core_decorators_1.autobind
    ], Slingshot.prototype, "updatePointerCoords", null);
    __decorate([
        core_decorators_1.autobind
    ], Slingshot.prototype, "updateShapeCoords", null);
    __decorate([
        core_decorators_1.autobind
    ], Slingshot.prototype, "returnAllBodiesToOrigin", null);
    __decorate([
        core_decorators_1.autobind
    ], Slingshot.prototype, "returnBodyToOrigin", null);
    __decorate([
        core_decorators_1.autobind
    ], Slingshot.prototype, "autoDragAndThrowItem", null);
    __decorate([
        core_decorators_1.autobind
    ], Slingshot.prototype, "render", null);
    return Slingshot;
}());
exports.Slingshot = Slingshot;


/***/ }),

/***/ "./static/js/components/SnackBar.ts":
/*!******************************************!*\
  !*** ./static/js/components/SnackBar.ts ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var snackbar_1 = __webpack_require__(/*! @material/snackbar */ "./node_modules/@material/snackbar/index.js");
var core_decorators_1 = __webpack_require__(/*! core-decorators */ "./node_modules/core-decorators/es/core-decorators.js");
var SELECTORS = {
    SNACKBAR_EL: '.mdc-snackbar',
};
var SnackBar = (function () {
    function SnackBar(core, snackBarEl) {
        this.core = core;
        this.snackBarEl = snackBarEl || document.querySelector(SELECTORS.SNACKBAR_EL);
        this.snackBar = new snackbar_1.MDCSnackbar(this.snackBarEl);
        this.message = this.snackBarEl.querySelector('.mdc-snackbar__text').innerHTML;
        this.actionText = this.snackBarEl
            .querySelector('.mdc-snackbar__action-button').innerHTML;
    }
    SnackBar.prototype.defaultHandler = function () {
        return false;
    };
    SnackBar.prototype.snackBarTrigger = function (message, actionText, callback, timeout) {
        this.snackBar.show({
            message: message || this.message,
            actionText: actionText || this.actionText,
            actionHandler: callback || this.defaultHandler,
            timeout: timeout,
        });
    };
    __decorate([
        core_decorators_1.autobind
    ], SnackBar.prototype, "defaultHandler", null);
    __decorate([
        core_decorators_1.autobind
    ], SnackBar.prototype, "snackBarTrigger", null);
    return SnackBar;
}());
exports.default = SnackBar;


/***/ }),

/***/ "./static/js/components/StepNav.ts":
/*!*****************************************!*\
  !*** ./static/js/components/StepNav.ts ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_decorators_1 = __webpack_require__(/*! core-decorators */ "./node_modules/core-decorators/es/core-decorators.js");
var menu_1 = __webpack_require__(/*! @material/menu */ "./node_modules/@material/menu/index.js");
var SELECTORS = {
    MDC_NAV: '.js-mdc-select-nav',
    MDC_NAV_TOGGLE: '.js-mdc-nav-toggle',
};
var StepNav = (function () {
    function StepNav(core, snackBarEl) {
        this.core = core;
        this.mdcSelect = document.querySelector(SELECTORS.MDC_NAV);
        if (this.mdcSelect) {
            this.menu = new menu_1.MDCMenu(this.mdcSelect);
            this.menuToggle = document.querySelector(SELECTORS.MDC_NAV_TOGGLE);
        }
        this.init();
    }
    StepNav.prototype.init = function () {
        if (!this.menu || !this.menuToggle) {
            return;
        }
        this.menuToggle.addEventListener('click', this.handleMenuToggle);
    };
    StepNav.prototype.handleMenuToggle = function (e) {
        e.preventDefault();
        this.menu.open = !this.menu.open;
    };
    __decorate([
        core_decorators_1.autobind
    ], StepNav.prototype, "handleMenuToggle", null);
    return StepNav;
}());
exports.default = StepNav;


/***/ }),

/***/ "./static/js/components/StickyBar.ts":
/*!*******************************************!*\
  !*** ./static/js/components/StickyBar.ts ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_decorators_1 = __webpack_require__(/*! core-decorators */ "./node_modules/core-decorators/es/core-decorators.js");
var util_1 = __webpack_require__(/*! ../util */ "./static/js/util/index.ts");
var STICKY_BAR_SELECTOR = '.js-sticky-bar';
var STICKY_BAR_CHILD_SELECTOR = '.js-sticky-bar-child';
var StickyBar = (function () {
    function StickyBar(stickToBottom, selector) {
        if (stickToBottom === void 0) { stickToBottom = false; }
        if (selector === void 0) { selector = STICKY_BAR_SELECTOR; }
        this.stickToBottom = false;
        var elements = util_1.nodeListToArray(document.querySelectorAll(selector));
        this.stickies = elements.map(function (element) {
            var child = element.querySelector(STICKY_BAR_CHILD_SELECTOR);
            element.style.position = 'relative';
            element.style.height = child.offsetHeight + "px";
            return {
                element: element,
                child: child,
                isStuck: false,
            };
        });
        this.stickToBottom = stickToBottom;
        if (this.stickies.length > 0) {
            this.init();
        }
    }
    StickyBar.prototype.init = function () {
        window.addEventListener('scroll', this.onScroll);
        this.onScroll();
    };
    StickyBar.prototype.onScroll = function () {
        requestAnimationFrame(this.handleScroll);
    };
    StickyBar.prototype.handleScroll = function () {
        for (var i = 0; i < this.stickies.length; i++) {
            var target = this.stickies[i];
            if (!target.child) {
                return;
            }
            var bounds = target.element.getBoundingClientRect();
            var isInView = this.stickToBottom ? bounds.bottom < window.innerHeight : bounds.top > 0;
            if (!target.isStuck && !isInView) {
                target.child.classList.add(util_1.ACTION_CLASSES.ACTIVE);
                target.isStuck = true;
            }
            else if (target.isStuck && isInView) {
                target.child.classList.remove(util_1.ACTION_CLASSES.ACTIVE);
                target.isStuck = false;
            }
        }
    };
    __decorate([
        core_decorators_1.autobind
    ], StickyBar.prototype, "onScroll", null);
    __decorate([
        core_decorators_1.autobind
    ], StickyBar.prototype, "handleScroll", null);
    return StickyBar;
}());
exports.StickyBar = StickyBar;


/***/ }),

/***/ "./static/js/components/ThoughtStarter.ts":
/*!************************************************!*\
  !*** ./static/js/components/ThoughtStarter.ts ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_decorators_1 = __webpack_require__(/*! core-decorators */ "./node_modules/core-decorators/es/core-decorators.js");
var util_1 = __webpack_require__(/*! ../util */ "./static/js/util/index.ts");
var THOUGHT_STARTER_SELECTOR = '.js-thought-starter';
var THOUGHT_STARTER_ITEM_SELECTOR = '.js-thought-starter-item';
var THOUGHT_STARTER_TOOLTIP_SELECTOR = '.js-thought-starter-tooltip';
var THOUGHT_STARTER_ICON_DELAY = 500;
var THOUGHT_STARTER_ICON_OFFSET_DELAY = 20;
var ACTIVATION_DELAY = 360;
var ThoughtStarter = (function () {
    function ThoughtStarter(core) {
        this.hasActivated = false;
        this.readyForTouchInteraction = true;
        this.core = core;
        this.activationDelay = this.core && this.core.prefersReducedMotion ? 0 : ACTIVATION_DELAY;
        this.parent =
            document.querySelector(THOUGHT_STARTER_SELECTOR);
        var thoughtStarterItemElements = util_1.nodeListToArray(this.parent.querySelectorAll(THOUGHT_STARTER_ITEM_SELECTOR));
        this.items = thoughtStarterItemElements.map(function (item) {
            return {
                element: item,
                tooltip: item.querySelector(THOUGHT_STARTER_TOOLTIP_SELECTOR),
                isActive: false,
                hoverTimeout: null,
                activateTimeout: null,
            };
        });
    }
    ThoughtStarter.prototype.getIsInView = function () {
        var bounds = this.parent.getBoundingClientRect();
        return bounds.top < (window.innerHeight * 0.25);
    };
    ThoughtStarter.prototype.activate = function () {
        if (this.hasActivated) {
            return;
        }
        this.hasActivated = true;
        this.bindEvents();
        if (this.core && this.core.prefersReducedMotion) {
            return;
        }
        var _loop_1 = function (i) {
            var item = this_1.items[i];
            setTimeout(function () {
                item.element.classList.add(util_1.ACTION_CLASSES.ACTIVE);
            }, (i * THOUGHT_STARTER_ICON_OFFSET_DELAY));
            setTimeout(function () {
                item.element.classList.remove(util_1.ACTION_CLASSES.ACTIVE);
            }, THOUGHT_STARTER_ICON_DELAY + (i * THOUGHT_STARTER_ICON_OFFSET_DELAY));
        };
        var this_1 = this;
        for (var i = 0; i < this.items.length; i++) {
            _loop_1(i);
        }
    };
    ThoughtStarter.prototype.bindEvents = function () {
        var _this = this;
        window.addEventListener('touchmove', this.onTouchMove);
        this.items.forEach(function (item) {
            item.element.addEventListener('mouseover', function (e) {
                e.preventDefault();
                _this.activateItem(item);
            });
            item.element.addEventListener('mouseleave', function () {
                _this.deactivateItem(item);
            });
            item.element.addEventListener('touchend', function (e) {
                _this.handleItemTouch(e, item);
            });
        });
    };
    ThoughtStarter.prototype.onTouchMove = function () {
        if (this.touchmoveTimeout) {
            clearTimeout(this.touchmoveTimeout);
        }
        this.readyForTouchInteraction = false;
        this.touchmoveTimeout = setTimeout(this.setReadyForTouchInteraction, this.activationDelay);
    };
    ThoughtStarter.prototype.setReadyForTouchInteraction = function () {
        this.readyForTouchInteraction = true;
        this.deactivateAllItems();
    };
    ThoughtStarter.prototype.handleItemTouch = function (e, item) {
        if (!this.readyForTouchInteraction || !item.isActive) {
            e.preventDefault();
        }
        if (!item.isActive && this.readyForTouchInteraction) {
            this.deactivateAllItems();
            this.activateItem(item);
        }
        else if (item.isActive) {
            this.deactivateItem(item);
        }
    };
    ThoughtStarter.prototype.activateItem = function (item) {
        if (item.isActive) {
            return;
        }
        item.isActive = true;
        if (item.hoverTimeout) {
            clearTimeout(item.hoverTimeout);
            item.hoverTimeout = null;
        }
        this.addHoveredState(item);
        item.activateTimeout = setTimeout(this.addActivatedState.bind(this, item), this.activationDelay);
    };
    ThoughtStarter.prototype.deactivateItem = function (item) {
        if (!item.isActive) {
            return;
        }
        item.isActive = false;
        if (item.activateTimeout) {
            clearTimeout(item.activateTimeout);
            item.activateTimeout = null;
        }
        this.removeActivatedState(item);
        item.element.blur();
        item.hoverTimeout =
            setTimeout(this.removeHoveredState.bind(this, item), this.activationDelay * 0.75);
    };
    ThoughtStarter.prototype.deactivateAllItems = function () {
        var _this = this;
        this.items.forEach(function (item) { return _this.deactivateItem(item); });
    };
    ThoughtStarter.prototype.addHoveredState = function (item) {
        item.element.classList.add(util_1.ACTION_CLASSES.HOVERED);
        item.element.style.zIndex = '99';
        item.hoverTimeout = null;
    };
    ThoughtStarter.prototype.removeHoveredState = function (item) {
        item.element.classList.remove(util_1.ACTION_CLASSES.HOVERED);
        item.element.style.removeProperty('z-index');
        item.hoverTimeout = null;
    };
    ThoughtStarter.prototype.addActivatedState = function (item) {
        item.element.classList.add(util_1.ACTION_CLASSES.ENABLED);
        item.activateTimeout = null;
    };
    ThoughtStarter.prototype.removeActivatedState = function (item) {
        item.element.classList.remove(util_1.ACTION_CLASSES.ENABLED);
        item.activateTimeout = null;
    };
    __decorate([
        core_decorators_1.autobind
    ], ThoughtStarter.prototype, "onTouchMove", null);
    __decorate([
        core_decorators_1.autobind
    ], ThoughtStarter.prototype, "setReadyForTouchInteraction", null);
    return ThoughtStarter;
}());
exports.ThoughtStarter = ThoughtStarter;


/***/ }),

/***/ "./static/js/components/ToolTip.ts":
/*!*****************************************!*\
  !*** ./static/js/components/ToolTip.ts ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_decorators_1 = __webpack_require__(/*! core-decorators */ "./node_modules/core-decorators/es/core-decorators.js");
var util_1 = __webpack_require__(/*! ../util */ "./static/js/util/index.ts");
var TOOL_TIP_SELECTOR = '.js-tool-tip';
var TOOL_TIP_OFF_CLASS = 'tool-tip-off';
var GUTTER_WIDTH = 48;
var CoreToolTip = (function () {
    function CoreToolTip(core, rootElem) {
        this.coords = { x: 0, y: 0 };
        this.isOpen = false;
        this.core = core;
        this.text = '';
        this.containerElem = rootElem.querySelector(TOOL_TIP_SELECTOR);
    }
    CoreToolTip.prototype.setPosition = function (x, y) {
        this.coords.x = x;
        this.coords.y = y;
        this.containerElem.style.left = this.coords.x + 'px';
        this.containerElem.style.top = this.coords.y + 'px';
    };
    CoreToolTip.prototype.show = function () {
        if (this.isOpen) {
            return;
        }
        this.containerElem.classList.remove(TOOL_TIP_OFF_CLASS);
        this.isOpen = true;
    };
    CoreToolTip.prototype.hide = function () {
        if (!this.isOpen) {
            return;
        }
        this.containerElem.classList.add(TOOL_TIP_OFF_CLASS);
        this.isOpen = false;
    };
    __decorate([
        core_decorators_1.autobind
    ], CoreToolTip.prototype, "show", null);
    __decorate([
        core_decorators_1.autobind
    ], CoreToolTip.prototype, "hide", null);
    return CoreToolTip;
}());
exports.CoreToolTip = CoreToolTip;
var ToolTip = (function (_super) {
    __extends(ToolTip, _super);
    function ToolTip(core, rootElem) {
        var _this = _super.call(this, core, rootElem) || this;
        _this.rootElem = rootElem;
        return _this;
    }
    ToolTip.prototype.domShow = function () {
        if (this.isOpen) {
            return;
        }
        var coords = this.getPosition(this.rootElem);
        this.setPosition(coords.x, coords.y);
        this.containerElem.classList.remove(TOOL_TIP_OFF_CLASS);
        this.containerElem.style.visibility = 'visible';
        this.containerElem.setAttribute('aria-hidden', 'false');
        this.rootElem.setAttribute('aria-pressed', 'true');
        this.isOpen = true;
    };
    ToolTip.prototype.domHide = function () {
        if (!this.isOpen) {
            return;
        }
        this.containerElem.classList.add(TOOL_TIP_OFF_CLASS);
        this.containerElem.style.visibility = 'hidden';
        this.containerElem.setAttribute('aria-hidden', 'true');
        this.rootElem.setAttribute('aria-pressed', 'false');
        this.isOpen = false;
    };
    ToolTip.prototype.getPosition = function (button) {
        var windowW = window.innerWidth;
        var windowH = window.innerHeight;
        var toolTipButtonRect = button.getBoundingClientRect();
        var containerRect = this.containerElem.getBoundingClientRect();
        var smallScreen = window.innerWidth < containerRect.width * 2;
        var top = (toolTipButtonRect.top < windowH / 2) ?
            toolTipButtonRect.top + 40 : toolTipButtonRect.top - 40;
        var left = toolTipButtonRect.left + toolTipButtonRect.width / 2;
        var containerOffsetHeight = containerRect.height;
        if (toolTipButtonRect.top < containerOffsetHeight) {
            top = toolTipButtonRect.bottom;
            left = toolTipButtonRect.left + toolTipButtonRect.width / 2 - containerRect.width / 2;
        }
        else if (toolTipButtonRect.left < windowW / 2) {
            top = toolTipButtonRect.top - containerOffsetHeight;
            left = toolTipButtonRect.left;
        }
        else if (toolTipButtonRect.left > windowW / 2) {
            top = toolTipButtonRect.top - containerOffsetHeight;
            left = toolTipButtonRect.left;
        }
        if ((left) < GUTTER_WIDTH) {
            left = toolTipButtonRect.left;
        }
        if ((left + containerRect.width) > (windowW - GUTTER_WIDTH)) {
            left = windowW - containerRect.width - GUTTER_WIDTH;
        }
        if (smallScreen) {
            left = (windowW - containerRect.width) / 2;
        }
        return new util_1.Point(left, top);
    };
    __decorate([
        core_decorators_1.autobind
    ], ToolTip.prototype, "domShow", null);
    __decorate([
        core_decorators_1.autobind
    ], ToolTip.prototype, "domHide", null);
    __decorate([
        core_decorators_1.autobind
    ], ToolTip.prototype, "getPosition", null);
    return ToolTip;
}(CoreToolTip));
exports.ToolTip = ToolTip;


/***/ }),

/***/ "./static/js/components/VideoPlayer.ts":
/*!*********************************************!*\
  !*** ./static/js/components/VideoPlayer.ts ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_decorators_1 = __webpack_require__(/*! core-decorators */ "./node_modules/core-decorators/es/core-decorators.js");
var VIDEO_SELECTOR = '.js-video-player';
var VideoPlayer = (function () {
    function VideoPlayer(shouldLoop) {
        this.isReady = false;
        this.player = null;
        this.hasBeenPlayed = false;
        this.shouldLoop = shouldLoop || true;
        this.videoDiv = document.querySelector(VIDEO_SELECTOR);
    }
    VideoPlayer.prototype.loadAPI = function () {
        return new Promise(function (resolve) {
            window.onYouTubeIframeAPIReady = resolve;
            var tag = document.createElement('script');
            tag.src = 'https://web.archive.org/web/20181015183524/https://www.youtube.com/iframe_api';
            var firstScriptTag = document.getElementsByTagName('script')[0];
            if (firstScriptTag && firstScriptTag.parentNode) {
                firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
            }
        });
    };
    VideoPlayer.prototype.initializeVideo = function () {
        if (this.isReady || !this.videoDiv) {
            return;
        }
        this.player = new window.YT.Player(this.videoDiv, {
            height: '100%',
            width: '100%',
            videoId: this.videoDiv.dataset.src,
            playerVars: {
                rel: 0,
                showinfo: 0,
                modestbranding: 1,
                playsinline: 1,
                end: 7,
                cc_lang_pref: document.documentElement.lang,
            },
        });
        this.bindEvents();
    };
    VideoPlayer.prototype.bindEvents = function () {
        this.player.addEventListener('onReady', this.onPlayerReady);
        this.player.addEventListener('onStateChange', this.onPlayerStateChange);
    };
    VideoPlayer.prototype.onPlayerReady = function () {
        this.isReady = true;
    };
    VideoPlayer.prototype.onPlayerStateChange = function (e) {
        if (e.data === 0 && this.shouldLoop) {
            this.player.playVideo();
        }
    };
    __decorate([
        core_decorators_1.autobind
    ], VideoPlayer.prototype, "initializeVideo", null);
    __decorate([
        core_decorators_1.autobind
    ], VideoPlayer.prototype, "onPlayerReady", null);
    __decorate([
        core_decorators_1.autobind
    ], VideoPlayer.prototype, "onPlayerStateChange", null);
    return VideoPlayer;
}());
exports.VideoPlayer = VideoPlayer;


/***/ }),

/***/ "./static/js/components/index.ts":
/*!***************************************!*\
  !*** ./static/js/components/index.ts ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Accordion_1 = __webpack_require__(/*! ./Accordion */ "./static/js/components/Accordion.ts");
exports.Accordion = Accordion_1.Accordion;
var AudioPlayer_1 = __webpack_require__(/*! ./AudioPlayer */ "./static/js/components/AudioPlayer.ts");
exports.AudioPlayer = AudioPlayer_1.AudioPlayer;
var CardStack_1 = __webpack_require__(/*! ./CardStack */ "./static/js/components/CardStack.ts");
exports.CardStack = CardStack_1.default;
var CategoryFilter_1 = __webpack_require__(/*! ./CategoryFilter */ "./static/js/components/CategoryFilter.ts");
exports.CategoryFilter = CategoryFilter_1.CategoryFilter;
var Footer_1 = __webpack_require__(/*! ./Footer */ "./static/js/components/Footer.ts");
exports.Footer = Footer_1.default;
var Header_1 = __webpack_require__(/*! ./Header */ "./static/js/components/Header.ts");
exports.Header = Header_1.default;
var InteractiveLogo_1 = __webpack_require__(/*! ./InteractiveLogo */ "./static/js/components/InteractiveLogo.ts");
exports.InteractiveLogo = InteractiveLogo_1.InteractiveLogo;
var NavInPage_1 = __webpack_require__(/*! ./NavInPage */ "./static/js/components/NavInPage.ts");
exports.NavInPage = NavInPage_1.default;
var ScrollTo_1 = __webpack_require__(/*! ./ScrollTo */ "./static/js/components/ScrollTo.ts");
exports.ScrollTo = ScrollTo_1.ScrollTo;
var Slingshot_1 = __webpack_require__(/*! ./Slingshot */ "./static/js/components/Slingshot.ts");
exports.Slingshot = Slingshot_1.Slingshot;
var SnackBar_1 = __webpack_require__(/*! ./SnackBar */ "./static/js/components/SnackBar.ts");
exports.SnackBar = SnackBar_1.default;
var AjaxModal_1 = __webpack_require__(/*! ./AjaxModal */ "./static/js/components/AjaxModal.ts");
exports.AjaxModal = AjaxModal_1.default;
var ListAccordion_1 = __webpack_require__(/*! ./ListAccordion */ "./static/js/components/ListAccordion.ts");
exports.ListAccordion = ListAccordion_1.ListAccordion;
var Alert_1 = __webpack_require__(/*! ./Alert */ "./static/js/components/Alert.ts");
exports.Alert = Alert_1.default;
var VideoPlayer_1 = __webpack_require__(/*! ./VideoPlayer */ "./static/js/components/VideoPlayer.ts");
exports.VideoPlayer = VideoPlayer_1.VideoPlayer;
var CKEdit_1 = __webpack_require__(/*! ./CKEdit */ "./static/js/components/CKEdit.ts");
exports.CKEdit = CKEdit_1.CKEdit;
var ThoughtStarter_1 = __webpack_require__(/*! ./ThoughtStarter */ "./static/js/components/ThoughtStarter.ts");
exports.ThoughtStarter = ThoughtStarter_1.ThoughtStarter;
var ToolTip_1 = __webpack_require__(/*! ./ToolTip */ "./static/js/components/ToolTip.ts");
exports.ToolTip = ToolTip_1.ToolTip;
var StepNav_1 = __webpack_require__(/*! ./StepNav */ "./static/js/components/StepNav.ts");
exports.StepNav = StepNav_1.default;
var StickyBar_1 = __webpack_require__(/*! ./StickyBar */ "./static/js/components/StickyBar.ts");
exports.StickyBar = StickyBar_1.StickyBar;
var ResourceNav_1 = __webpack_require__(/*! ./ResourceNav */ "./static/js/components/ResourceNav.ts");
exports.ResourceNav = ResourceNav_1.default;
var AnimateShapes_1 = __webpack_require__(/*! ./AnimateShapes */ "./static/js/components/AnimateShapes.ts");
exports.AnimateShapes = AnimateShapes_1.default;
var HomeConclusionShapes_1 = __webpack_require__(/*! ./HomeConclusionShapes */ "./static/js/components/HomeConclusionShapes.ts");
exports.HomeConclusionShapes = HomeConclusionShapes_1.default;
var HomeNumberAnimation_1 = __webpack_require__(/*! ./HomeNumberAnimation */ "./static/js/components/HomeNumberAnimation.ts");
exports.HomeNumberAnimation = HomeNumberAnimation_1.default;
var HomeThoughtStarter_1 = __webpack_require__(/*! ./HomeThoughtStarter */ "./static/js/components/HomeThoughtStarter.ts");
exports.HomeThoughtStarter = HomeThoughtStarter_1.default;
var HomeVideoPlayer_1 = __webpack_require__(/*! ./HomeVideoPlayer */ "./static/js/components/HomeVideoPlayer.ts");
exports.HomeVideoPlayer = HomeVideoPlayer_1.default;


/***/ }),

/***/ "./static/js/forms/CheckList.ts":
/*!**************************************!*\
  !*** ./static/js/forms/CheckList.ts ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_decorators_1 = __webpack_require__(/*! core-decorators */ "./node_modules/core-decorators/es/core-decorators.js");
var util_1 = __webpack_require__(/*! ../util */ "./static/js/util/index.ts");
var SELECTORS = {
    FORM: '.js-form',
    SUBMIT: '.js-submit',
};
var SUBMIT_URL = '/api/projects/submit';
var COMPLETE_URL = '/your-project/submit/complete';
var CheckList = (function () {
    function CheckList(core) {
        this.core = core;
        this.form = document.querySelector(SELECTORS.FORM);
        if (this.form) {
            this.submit = document.querySelector(SELECTORS.SUBMIT);
            this.inputs = util_1.nodeListToArray(this.form.querySelectorAll('input'));
        }
        this.init();
    }
    CheckList.prototype.init = function () {
        var _this = this;
        if (!this.submit || !this.inputs) {
            return;
        }
        this.submit.disabled = true;
        this.submit.addEventListener('click', this.handleSubmit);
        this.inputs.forEach(function (input) {
            input.addEventListener('change', _this.handleInput);
        });
    };
    CheckList.prototype.handleInput = function () {
        if (!this.submit || !this.inputs) {
            return;
        }
        if (this.inputs.find(function (input) { return (!input.checked); })) {
            this.submit.disabled = true;
            this.submit.classList.add(util_1.ACTION_CLASSES.DISABLED);
        }
        else {
            this.submit.disabled = false;
            this.submit.classList.remove(util_1.ACTION_CLASSES.DISABLED);
        }
    };
    CheckList.prototype.handleSubmit = function (e) {
        var _this = this;
        e.preventDefault();
        util_1.axiosInstance.post(SUBMIT_URL)
            .then(function (response) {
            if (response.data.errors) {
                _this.form.classList.add(util_1.ACTION_CLASSES.ERROR);
            }
            else {
                _this.form.classList.add(util_1.ACTION_CLASSES.SUBMITTED);
                window.location.href = COMPLETE_URL;
            }
        })
            .catch(function (_error) {
            _this.form.classList.add(util_1.ACTION_CLASSES.ERROR);
        });
    };
    __decorate([
        core_decorators_1.autobind
    ], CheckList.prototype, "init", null);
    __decorate([
        core_decorators_1.autobind
    ], CheckList.prototype, "handleInput", null);
    __decorate([
        core_decorators_1.autobind
    ], CheckList.prototype, "handleSubmit", null);
    return CheckList;
}());
exports.CheckList = CheckList;


/***/ }),

/***/ "./static/js/forms/ConsentForm.ts":
/*!****************************************!*\
  !*** ./static/js/forms/ConsentForm.ts ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_decorators_1 = __webpack_require__(/*! core-decorators */ "./node_modules/core-decorators/es/core-decorators.js");
var components_1 = __webpack_require__(/*! ../components */ "./static/js/components/index.ts");
var util_1 = __webpack_require__(/*! ../util */ "./static/js/util/index.ts");
var SELECTORS = {
    FORM: '.js-form',
    PROJECT_ID_INPUT: '.js-project-id',
    INPUT: '.js-input',
    SUBMIT: '.js-submit--parental-consent-form',
    EMAIL_CONTAINER: '.js-email-container',
};
var FORM_URL = '/api/members/save_consent';
var ConsentForm = (function () {
    function ConsentForm(core) {
        this.core = core;
        this.form = document.querySelector(SELECTORS.FORM);
        if (this.form) {
            this.submit = this.form.querySelector(SELECTORS.SUBMIT);
            this.emailContainer = this.form.querySelector(SELECTORS.EMAIL_CONTAINER);
            this.input = this.form.querySelector(SELECTORS.INPUT);
        }
        this.snackBar = new components_1.SnackBar(this.core);
        this.init();
    }
    ConsentForm.prototype.init = function () {
        document.addEventListener('keydown', this.handleKeyDown);
        if (!this.submit || !this.input) {
            return;
        }
        this.submit.addEventListener('click', this.handleSubmit);
        this.input.addEventListener('input', this.handleInput);
        if (this.input.value === '') {
            this.submit.disabled = true;
        }
    };
    ConsentForm.prototype.handleKeyDown = function (e) {
        var keyName = e.key;
        if (keyName === 'Enter' && this.submit && !this.submit.disabled) {
            this.handleSubmit();
        }
    };
    ConsentForm.prototype.handleInput = function () {
        if (!this.submit || !this.input) {
            return;
        }
        if (this.input.checkValidity()) {
            this.submit.disabled = false;
        }
        else {
            this.submit.disabled = true;
        }
    };
    ConsentForm.prototype.handleSubmit = function () {
        var _this = this;
        if (!this.form || !this.submit) {
            return;
        }
        this.submit.classList.add(util_1.ACTION_CLASSES.SAVING);
        this.form.reportValidity();
        var params = {
            consent_email: this.input && this.input.value,
        };
        util_1.axiosInstance.post(FORM_URL, JSON.stringify(params))
            .then(function (response) {
            if (!_this.form || !_this.emailContainer) {
                return;
            }
            if (response.data.errors) {
                _this.form.classList.add(util_1.ACTION_CLASSES.ERROR);
                _this.emailContainer.classList.add(util_1.ACTION_CLASSES.ERROR);
            }
            else {
                _this.snackBar.snackBarTrigger();
                _this.form.classList.add(util_1.ACTION_CLASSES.SUBMITTED);
                _this.form.classList.remove(util_1.ACTION_CLASSES.ERROR);
                _this.emailContainer.classList.remove(util_1.ACTION_CLASSES.ERROR);
            }
            _this.submit && _this.submit.classList.remove(util_1.ACTION_CLASSES.SAVING);
        })
            .catch(function (_error) {
            if (_error.response && _error.response.data &&
                _error.response.data.errors === 'Consent has already been granted') {
                window.location.reload();
                return;
            }
            if (!_this.form || !_this.emailContainer) {
                return;
            }
            _this.form.classList.add(util_1.ACTION_CLASSES.ERROR);
            _this.emailContainer.classList.add(util_1.ACTION_CLASSES.ERROR);
            _this.submit && _this.submit.classList.remove(util_1.ACTION_CLASSES.SAVING);
        });
    };
    __decorate([
        core_decorators_1.autobind
    ], ConsentForm.prototype, "init", null);
    __decorate([
        core_decorators_1.autobind
    ], ConsentForm.prototype, "handleKeyDown", null);
    __decorate([
        core_decorators_1.autobind
    ], ConsentForm.prototype, "handleInput", null);
    __decorate([
        core_decorators_1.autobind
    ], ConsentForm.prototype, "handleSubmit", null);
    return ConsentForm;
}());
exports.ConsentForm = ConsentForm;


/***/ }),

/***/ "./static/js/forms/Forms.ts":
/*!**********************************!*\
  !*** ./static/js/forms/Forms.ts ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = __webpack_require__(/*! ../util */ "./static/js/util/index.ts");
var core_decorators_1 = __webpack_require__(/*! core-decorators */ "./node_modules/core-decorators/es/core-decorators.js");
var SELECTORS = {
    INPUT_SELECTOR: '.form--text-input-wrap',
    RADIO_GROUP: '.js-radio-group',
};
var Forms = (function () {
    function Forms(core) {
        this.core = core;
        var inputs = util_1.nodeListToArray(document.querySelectorAll(SELECTORS.INPUT_SELECTOR));
        this.textInputs = inputs.map(function (item) {
            return {
                wrapper: item,
                input: item.querySelector('input'),
            };
        });
        var radioGroupWrapper = document.querySelector(SELECTORS.RADIO_GROUP);
        if (radioGroupWrapper) {
            var radioGroupLabels = util_1.nodeListToArray(radioGroupWrapper
                .querySelectorAll('label'));
            this.radioGroup = {
                wrapper: radioGroupWrapper,
                inputs: radioGroupLabels.map(function (label) {
                    return {
                        input: document.getElementById(label.htmlFor),
                        label: label,
                    };
                }),
            };
        }
        this.init();
    }
    Forms.prototype.init = function () {
        var _this = this;
        this.textInputs.forEach(function (input) {
            if (!input.input) {
                return;
            }
            input.input.addEventListener('focus', _this.onFocus);
            input.input.addEventListener('blur', _this.onBlur);
            if (input.input.value !== '') {
                input.wrapper.classList.add(util_1.ACTION_CLASSES.FOCUSED);
            }
        });
        if (this.radioGroup) {
            this.radioGroup.inputs.forEach(function (group) {
                group.input.addEventListener('change', _this.handleRadioChange
                    .bind(group.input, group.label, _this));
                group.input.addEventListener('focus', _this.handleRadioFocus
                    .bind(group.input, group.label, _this));
                group.input.addEventListener('blur', _this.handleRadioBlur
                    .bind(group.input, group.label, _this));
                group.input.blur();
            });
        }
    };
    Forms.prototype.onBlur = function (e) {
        this.inputBlur(e.target);
    };
    Forms.prototype.inputBlur = function (el) {
        this.textInputs.forEach(function (input) {
            if (input.input === el && el.value === '') {
                input.wrapper.classList.remove(util_1.ACTION_CLASSES.FOCUSED);
            }
        });
    };
    Forms.prototype.onFocus = function (e) {
        this.textInputs.forEach(function (input) {
            if (input.input === e.target) {
                input.wrapper.classList.add(util_1.ACTION_CLASSES.FOCUSED);
            }
        });
    };
    Forms.prototype.handleRadioChange = function (label, input, e) {
        if (!this.radioGroup) {
            return;
        }
        this.radioGroup.inputs.forEach(function (group) {
            group.label.classList.remove(util_1.ACTION_CLASSES.ACTIVE);
        });
        if (e.target.checked) {
            label.classList.add(util_1.ACTION_CLASSES.ACTIVE);
        }
    };
    Forms.prototype.handleRadioFocus = function (label, input, e) {
        label.classList.add(util_1.ACTION_CLASSES.FOCUSED);
    };
    Forms.prototype.handleRadioBlur = function (label, input, e) {
        if (!this.radioGroup) {
            return;
        }
        this.radioGroup.inputs.forEach(function (group) {
            group.label.classList.remove(util_1.ACTION_CLASSES.FOCUSED);
        });
    };
    __decorate([
        core_decorators_1.autobind
    ], Forms.prototype, "init", null);
    __decorate([
        core_decorators_1.autobind
    ], Forms.prototype, "onBlur", null);
    __decorate([
        core_decorators_1.autobind
    ], Forms.prototype, "inputBlur", null);
    __decorate([
        core_decorators_1.autobind
    ], Forms.prototype, "onFocus", null);
    __decorate([
        core_decorators_1.autobind
    ], Forms.prototype, "handleRadioChange", null);
    __decorate([
        core_decorators_1.autobind
    ], Forms.prototype, "handleRadioFocus", null);
    __decorate([
        core_decorators_1.autobind
    ], Forms.prototype, "handleRadioBlur", null);
    return Forms;
}());
exports.Forms = Forms;


/***/ }),

/***/ "./static/js/forms/InspiringEducator.ts":
/*!**********************************************!*\
  !*** ./static/js/forms/InspiringEducator.ts ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = __webpack_require__(/*! ../util */ "./static/js/util/index.ts");
var core_decorators_1 = __webpack_require__(/*! core-decorators */ "./node_modules/core-decorators/es/core-decorators.js");
var components_1 = __webpack_require__(/*! ../components */ "./static/js/components/index.ts");
var SELECTORS = {
    FORM: '.js-form',
    PROJECT_ID_INPUT: '.js-project-id',
    PROJECT_SITE_ID_INPUT: '.js-project-site-id',
    MAIN_TEXTAREA: '.js-main-textarea',
    SAVE_BUTTONS: '.js-submit',
    SAVE_BUTTON: '.js-save-button',
    UPDATE_BUTTON: '.js-update-button',
};
var FORM_URL = '/api/members/update';
var InspiringEducator = (function () {
    function InspiringEducator(core) {
        this.name = '';
        this.mainTextArea = '';
        this.hasEdited = false;
        this.core = core;
        this.ckEdit = new components_1.CKEdit(core, this.handleCKEditChange);
        this.form = document.querySelector(SELECTORS.FORM);
        this.saveButtons = util_1.nodeListToArray(this.form.querySelectorAll(SELECTORS.SAVE_BUTTONS));
        this.snackBar = new components_1.SnackBar(this.core);
        this.init();
    }
    InspiringEducator.prototype.init = function () {
        var _this = this;
        this.mainTextArea = CKEDITOR.instances[this.name] && CKEDITOR.instances[this.name].getData();
        this.saveButtons.forEach(function (button) {
            button.addEventListener('click', _this.handleSubmit);
        });
    };
    InspiringEducator.prototype.handleCKEditChange = function (e) {
        this.name = e.editor.name;
        this.mainTextArea = e.editor.getData();
        if (!this.hasEdited) {
            this.saveButtons.forEach(function (button) {
                button.disabled = false;
            });
        }
        this.hasEdited = true;
    };
    InspiringEducator.prototype.handleSubmit = function (e) {
        var _this = this;
        this.form.reportValidity();
        var submitButton = e.currentTarget;
        submitButton.classList.add(util_1.ACTION_CLASSES.SAVING);
        var params = {
            inspiring_educator: this.mainTextArea,
        };
        util_1.axiosInstance.post(FORM_URL, JSON.stringify(params))
            .then(function (response) {
            if (response.data.errors) {
                _this.form.classList.add('-error');
            }
            else {
                _this.snackBar.snackBarTrigger();
            }
            submitButton.classList.remove(util_1.ACTION_CLASSES.SAVING);
            document.querySelector(SELECTORS.SAVE_BUTTON)
                .classList.add(util_1.ACTION_CLASSES.HIDDEN);
            document.querySelector(SELECTORS.UPDATE_BUTTON)
                .classList.remove(util_1.ACTION_CLASSES.HIDDEN);
        })
            .catch(function (error) {
            _this.form.classList.add('-error');
            submitButton.classList.remove(util_1.ACTION_CLASSES.SAVING);
            document.querySelector(SELECTORS.SAVE_BUTTON)
                .classList.add(util_1.ACTION_CLASSES.HIDDEN);
            document.querySelector(SELECTORS.UPDATE_BUTTON)
                .classList.remove(util_1.ACTION_CLASSES.HIDDEN);
        });
        return;
    };
    __decorate([
        core_decorators_1.autobind
    ], InspiringEducator.prototype, "init", null);
    __decorate([
        core_decorators_1.autobind
    ], InspiringEducator.prototype, "handleCKEditChange", null);
    __decorate([
        core_decorators_1.autobind
    ], InspiringEducator.prototype, "handleSubmit", null);
    return InspiringEducator;
}());
exports.InspiringEducator = InspiringEducator;


/***/ }),

/***/ "./static/js/forms/ParentalConsent.ts":
/*!********************************************!*\
  !*** ./static/js/forms/ParentalConsent.ts ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_decorators_1 = __webpack_require__(/*! core-decorators */ "./node_modules/core-decorators/es/core-decorators.js");
var util_1 = __webpack_require__(/*! ../util */ "./static/js/util/index.ts");
var SELECTORS = {
    FORM: '.js-form',
    SUBMIT: '.js-submit--parental-consent-form',
    CODE_INPUT: '.js-code-input',
    STUDENT_INPUT: '.js-student-input',
};
var CONSENT_URL = '/gsfapi/members/grant_consent';
var ParentalConsent = (function () {
    function ParentalConsent(core) {
        this.core = core;
        this.form = document.querySelector(SELECTORS.FORM);
        if (this.form) {
            this.submit = this.form.querySelector(SELECTORS.SUBMIT);
            this.code = this.form.querySelector(SELECTORS.CODE_INPUT);
            this.student = this.form.querySelector(SELECTORS.STUDENT_INPUT);
        }
        this.init();
    }
    ParentalConsent.prototype.init = function () {
        if (!this.submit) {
            return;
        }
        this.submit.addEventListener('click', this.handleSubmit);
    };
    ParentalConsent.prototype.handleSubmit = function (e) {
        var _this = this;
        if (!this.form) {
            return;
        }
        e.preventDefault();
        var params = {
            code: this.code && this.code.value,
            student: this.student && this.student.value,
        };
        util_1.axiosInstance.post(CONSENT_URL, JSON.stringify(params))
            .then(function (response) {
            if (!_this.form) {
                return;
            }
            if (response.data.errors) {
                _this.form.classList.add(util_1.ACTION_CLASSES.ERROR);
            }
            else {
                _this.form.classList.add(util_1.ACTION_CLASSES.SUBMITTED);
                window.location.href = '/parental-consent/approve';
            }
        })
            .catch(function (_error) {
            if (!_this.form) {
                return;
            }
            _this.form.classList.add(util_1.ACTION_CLASSES.ERROR);
        });
    };
    __decorate([
        core_decorators_1.autobind
    ], ParentalConsent.prototype, "init", null);
    __decorate([
        core_decorators_1.autobind
    ], ParentalConsent.prototype, "handleSubmit", null);
    return ParentalConsent;
}());
exports.ParentalConsent = ParentalConsent;


/***/ }),

/***/ "./static/js/forms/Profile.ts":
/*!************************************!*\
  !*** ./static/js/forms/Profile.ts ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_decorators_1 = __webpack_require__(/*! core-decorators */ "./node_modules/core-decorators/es/core-decorators.js");
var util_1 = __webpack_require__(/*! ../util */ "./static/js/util/index.ts");
var AgeRangeRestriction_1 = __webpack_require__(/*! ../components/AgeRangeRestriction */ "./static/js/components/AgeRangeRestriction.ts");
var components_1 = __webpack_require__(/*! ../components */ "./static/js/components/index.ts");
var SELECTORS = {
    FORM: '.js-profile-form',
    FORM_SUBMIT: '.js-form-submit',
    FORM_TEXT_INPUT: '.form--text-input',
    FORM_RADIO: '.js-radio-group',
    FORM_LEGAL: '.js-terms-container',
    FORM_FIRST_NAME: '.js-first-name-container',
    FORM_LAST_NAME: '.js-last-name-container',
    FORM_AGE_RANGE: '#age-range',
    FORM_AGE_CONTAINER: '.js-age-range-container',
    FORM_SUCCESS: '.js-form-success',
    FORM_COUNTRY: '.js-country-input',
    FORM_STATE: '.js-state-input',
    FORM_LANGUAGE: '.js-language-input',
    FORM_TEAM_CODE: '.js-team-input',
    FORM_PHONE_NUMBER: '.js-phone-number',
    FORM_SCHOOL: '.js-school-container',
    FORM_HOME_SCHOOLED: '.js-home-schooled',
    FORM_SCHOOL_CONTAINER: '.js-school-info',
    FORM_SCHOOL_NAME: '.js-school-name',
    FORM_SCHOOL_ADDRESS: '.js-school-address',
    FORM_SCHOOL_ZIP: '.js-school-zip',
    FORM_SCHOOL_CITY: '.js-school-city',
    FORM_SCHOOL_STATE: '.js-school-state',
    FORM_SCHOOL_COUNTRY: '.js-school-country',
    DELETE_BUTTON: '.js-delete-account',
    PROFILE_WIDGETS: '.js-profile-widget',
    STATUS_COMPLETE_INDICATOR: '.js-account-status-complete-indicator',
    STATUS_INCOMPLETE_INDICATOR: '.js-account-status-incomplete-indicator',
};
var PROFILE_FORM_URL = '/api/members/update';
var DELETE_ACTION_URL = '/api/members/delete_me';
var LOGOUT_URL = '';
var Profile = (function () {
    function Profile(core) {
        this.errorsCleared = true;
        this.core = core;
        this.form = document.querySelector(SELECTORS.FORM);
        this.formSubmit = document
            .querySelector(SELECTORS.FORM_SUBMIT);
        this.formSuccess = document.querySelector(SELECTORS.FORM_SUCCESS);
        this.country = this.form.querySelector(SELECTORS.FORM_COUNTRY + " select");
        this.stateContainer = this.form.querySelector(SELECTORS.FORM_STATE);
        this.state = this.stateContainer
            .querySelector(SELECTORS.FORM_STATE + " select");
        this.firstName = this.form
            .querySelector(SELECTORS.FORM_FIRST_NAME + " input");
        this.surname = this.form.querySelector(SELECTORS.FORM_LAST_NAME + " input");
        this.phoneNumber = this.form
            .querySelector(SELECTORS.FORM_PHONE_NUMBER + " input");
        this.schoolForm = document.querySelector(SELECTORS.FORM_SCHOOL);
        this.homeSchooled = this.form
            .querySelector(SELECTORS.FORM_HOME_SCHOOLED + " input");
        this.schoolVisible = !this.homeSchooled.checked;
        this.schoolInfoContainer = this.form
            .querySelector(SELECTORS.FORM_SCHOOL_CONTAINER);
        this.schoolInfoInputs = util_1.nodeListToArray(this.schoolInfoContainer.querySelectorAll('input'));
        this.schoolName = this.form
            .querySelector(SELECTORS.FORM_SCHOOL_NAME + " input");
        this.schoolAddr1 = this.form
            .querySelector(SELECTORS.FORM_SCHOOL_ADDRESS + " input");
        this.schoolPostalCode = this.form
            .querySelector(SELECTORS.FORM_SCHOOL_ZIP + " input");
        this.schoolCity = this.form
            .querySelector(SELECTORS.FORM_SCHOOL_CITY + " input");
        this.schoolState = this.form
            .querySelector(SELECTORS.FORM_SCHOOL_STATE + " select");
        this.schoolCountry = this.form
            .querySelector(SELECTORS.FORM_SCHOOL_COUNTRY + " select");
        this.deleteTrigger = document.querySelector(SELECTORS.DELETE_BUTTON);
        this.profileWidgets = util_1.nodeListToArray(document.querySelectorAll(SELECTORS.PROFILE_WIDGETS));
        this.ageRangeContainer = this.form.querySelector(SELECTORS.FORM_RADIO);
        this.ageRangeRestrictions = new AgeRangeRestriction_1.default(this.country, this.ageRangeContainer);
        this.snackBar = new components_1.SnackBar(this.core);
        this.init();
    }
    Profile.prototype.init = function () {
        var _this = this;
        this.formSubmit.addEventListener('click', this.handleSubmit);
        LOGOUT_URL = this.deleteTrigger.dataset.logoutUrl;
        this.deleteTrigger.addEventListener('click', this.handleDelete);
        this.handleHomeSchoolChange();
        this.homeSchooled.addEventListener('change', this.handleHomeSchoolChange);
        this.country.addEventListener('change', this.handleCountryChange);
        document.querySelectorAll('input').forEach(function (input) {
            return input.addEventListener('input', _this.handleOnInput);
        });
        this.handleCountryChange();
    };
    Profile.prototype.handleOnInput = function () {
        if (!this.errorsCleared) {
            document.querySelectorAll('.-error')
                .forEach(function (errorEl) { return errorEl.classList.remove(util_1.ACTION_CLASSES.ERROR); });
            this.errorsCleared = true;
        }
    };
    Profile.prototype.handleCountryChange = function () {
        if (this.country.value === 'US') {
            this.schoolVisible = true;
            this.stateContainer.classList.remove(util_1.ACTION_CLASSES.HIDDEN);
        }
        else {
            this.schoolVisible = false;
            this.stateContainer.classList.add(util_1.ACTION_CLASSES.HIDDEN);
        }
        this.setSchoolVisibility();
    };
    Profile.prototype.setSchoolVisibility = function () {
        if (this.schoolVisible) {
            this.schoolForm.classList.remove(util_1.ACTION_CLASSES.HIDDEN);
            this.handleHomeSchoolChange();
        }
        else {
            this.schoolForm.classList.add(util_1.ACTION_CLASSES.HIDDEN);
            this.handleHomeSchoolChange();
        }
    };
    Profile.prototype.handleHomeSchoolChange = function () {
        if (this.homeSchooled.checked) {
            this.schoolInfoContainer.classList.add(util_1.ACTION_CLASSES.HIDDEN);
        }
        else {
            this.schoolInfoContainer.classList.remove(util_1.ACTION_CLASSES.HIDDEN);
        }
    };
    Profile.prototype.handleSubmit = function (e) {
        var _this = this;
        e && e.preventDefault();
        this.form.reportValidity();
        this.formSubmit.classList.add(util_1.ACTION_CLASSES.SAVING);
        if (this.form.checkValidity()) {
            var sendSchool = !this.homeSchooled.checked && this.schoolVisible;
            var profileParams = {
                firstname: this.firstName.value,
                surname: this.surname.value,
                locale: document.documentElement.lang,
                age_range: this.ageRangeRestrictions.ageRange !== '' ?
                    this.ageRangeRestrictions.ageRange : null,
                country: this.country.value,
                home_state: this.country.value === 'US' ? this.state.value : null,
                phone_number: this.phoneNumber.value,
                home_schooled: this.schoolVisible ? this.homeSchooled.checked : null,
                school_name: sendSchool ? this.schoolName.value : null,
                school_addr1: sendSchool ? this.schoolAddr1.value : null,
                school_postal_code: sendSchool ? this.schoolPostalCode.value : null,
                school_city: sendSchool ? this.schoolCity.value : null,
                school_state: sendSchool ? this.schoolState.value : null,
                school_country: sendSchool ? this.schoolCountry.value : null,
            };
            util_1.axiosInstance.post(PROFILE_FORM_URL, JSON.stringify(profileParams))
                .then(function (response) {
                _this.formSubmit.classList.remove(util_1.ACTION_CLASSES.SAVING);
                if (response.data.errors) {
                    _this.form.classList.add(util_1.ACTION_CLASSES.ERROR);
                }
                else {
                    if (response.data.is_profile_complete === true) {
                        _this.setProfileComplete();
                    }
                    else {
                        _this.setProfileIncomplete();
                    }
                    _this.snackBar.snackBarTrigger();
                }
            })
                .catch(function (error) {
                _this.errorsCleared = false;
                if (error.response.data.errors === 'Invalid age range for EU') {
                    document.querySelector(SELECTORS.FORM_AGE_CONTAINER)
                        .classList.add(util_1.ACTION_CLASSES.ERROR);
                }
                _this.form.classList.add(util_1.ACTION_CLASSES.ERROR);
                _this.formSubmit.classList.remove(util_1.ACTION_CLASSES.SAVING);
            });
            return;
        }
    };
    Profile.prototype.setProfileComplete = function () {
        this.profileWidgets.forEach(function (widget) {
            widget.querySelector(SELECTORS.STATUS_INCOMPLETE_INDICATOR)
                .classList.add(util_1.ACTION_CLASSES.HIDDEN);
            widget.querySelector(SELECTORS.STATUS_COMPLETE_INDICATOR)
                .classList.remove(util_1.ACTION_CLASSES.HIDDEN);
        });
    };
    Profile.prototype.setProfileIncomplete = function () {
        this.profileWidgets.forEach(function (widget) {
            widget.querySelector(SELECTORS.STATUS_INCOMPLETE_INDICATOR)
                .classList.remove(util_1.ACTION_CLASSES.HIDDEN);
            widget.querySelector(SELECTORS.STATUS_COMPLETE_INDICATOR)
                .classList.add(util_1.ACTION_CLASSES.HIDDEN);
        });
    };
    Profile.prototype.handleDelete = function (e) {
        e.preventDefault();
        util_1.axiosInstance.post(DELETE_ACTION_URL)
            .then(function (response) {
            if (response.data.errors) {
            }
            else {
                window.location.href = LOGOUT_URL;
            }
        });
    };
    __decorate([
        core_decorators_1.autobind
    ], Profile.prototype, "handleOnInput", null);
    __decorate([
        core_decorators_1.autobind
    ], Profile.prototype, "handleCountryChange", null);
    __decorate([
        core_decorators_1.autobind
    ], Profile.prototype, "setSchoolVisibility", null);
    __decorate([
        core_decorators_1.autobind
    ], Profile.prototype, "handleHomeSchoolChange", null);
    __decorate([
        core_decorators_1.autobind
    ], Profile.prototype, "handleSubmit", null);
    __decorate([
        core_decorators_1.autobind
    ], Profile.prototype, "setProfileComplete", null);
    __decorate([
        core_decorators_1.autobind
    ], Profile.prototype, "setProfileIncomplete", null);
    return Profile;
}());
exports.Profile = Profile;


/***/ }),

/***/ "./static/js/forms/StepForm.ts":
/*!*************************************!*\
  !*** ./static/js/forms/StepForm.ts ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = __webpack_require__(/*! ../util */ "./static/js/util/index.ts");
var core_decorators_1 = __webpack_require__(/*! core-decorators */ "./node_modules/core-decorators/es/core-decorators.js");
var components_1 = __webpack_require__(/*! ../components */ "./static/js/components/index.ts");
var SELECTORS = {
    FORM: '.js-form',
    PROJECT_ID_INPUT: '.js-project-id',
    PROJECT_SITE_ID_INPUT: '.js-project-site-id',
    MAIN_TEXTAREA: '.js-rich-textarea',
    SAVED: '.js-status-bar-saved',
    SAVING: '.js-status-bar-saving',
    EMPTY: '.js-status-bar-empty',
    EDITED_HASH: '.js-last-edited',
    BAD_HASH: '.js-bad-hash',
    RELOAD_CTA: '.js-reload-cta',
};
var FORM_URL = '/api/sites/update';
var AUTOSAVE_TIMEOUT = 2000;
var SNACKBAR_TIMEOUT = 8000;
var StepForm = (function () {
    function StepForm(core) {
        this.name = '';
        this.mainTextArea = '';
        this.core = core;
        this.name = document.querySelector(SELECTORS.MAIN_TEXTAREA).id;
        this.ckEdit = new components_1.CKEdit(core, this.handleCKEditChange);
        this.form = document.querySelector(SELECTORS.FORM);
        this.inputs = util_1.nodeListToArray(this.form.querySelectorAll('input, textarea, select'));
        this.projectSiteId = document
            .querySelector(SELECTORS.PROJECT_SITE_ID_INPUT).value;
        this.stepNav = new components_1.StepNav(this.core);
        this.savedStatus = document.querySelector(SELECTORS.SAVED);
        this.savingStatus = document.querySelector(SELECTORS.SAVING);
        this.emptyStatus = document.querySelector(SELECTORS.EMPTY);
        var editHashInput = document.querySelector(SELECTORS.EDITED_HASH);
        this.badHashWarningEl = document.querySelector(SELECTORS.BAD_HASH);
        this.reloadCTA = document.querySelector(SELECTORS.RELOAD_CTA);
        if (editHashInput && editHashInput.value === '') {
            this.currentEditHash = null;
        }
        else if (editHashInput) {
            this.currentEditHash = editHashInput.value;
        }
        this.isFormSaved = true;
        this.snackBar = new components_1.SnackBar(this.core);
        this.stickyBar = new components_1.StickyBar(true);
        this.init();
    }
    StepForm.prototype.init = function () {
        var _this = this;
        this.mainTextArea = CKEDITOR.instances[this.name] && CKEDITOR.instances[this.name].getData();
        this.reloadCTA.addEventListener('click', this.handleReloadCTA);
        CKEDITOR.on('instanceReady', function (ev) {
            ev.editor.on('focus', _this.checkLastEdited);
        });
        window.addEventListener('beforeunload', this.handleBeforeUnload);
    };
    StepForm.prototype.checkLastEdited = function () {
        var _this = this;
        var projectUrl = "/api/sites/get?hashonly=" + this.name;
        util_1.axiosInstance.get(projectUrl).then(function (response) {
            var sanitizedData = response.data.replace(/^\)]}',/, '');
            var jsonResponse = JSON.parse(sanitizedData);
            var hash = jsonResponse[_this.name + "_hash"];
            if (hash === null) {
                return;
            }
            if (hash !== _this.currentEditHash) {
                _this.ckEdit.editor && _this.ckEdit.editor.setReadOnly();
                _this.badHashWarningEl.classList.remove(util_1.ACTION_CLASSES.HIDDEN);
                TweenMax.to(window, 1, {
                    scrollTo: {
                        y: window.scrollY + _this.badHashWarningEl.getBoundingClientRect().top - 85,
                        autoKill: false,
                    },
                });
            }
        });
    };
    StepForm.prototype.handleCKEditChange = function (e) {
        this.name = e.editor.name;
        this.mainTextArea = e.editor.getData();
        this.checkAutoSave();
        this.emptyStatus.classList.add(util_1.ACTION_CLASSES.HIDDEN);
        this.savedStatus.classList.add(util_1.ACTION_CLASSES.HIDDEN);
        this.savingStatus.classList.remove(util_1.ACTION_CLASSES.HIDDEN);
    };
    StepForm.prototype.handleBeforeUnload = function (e) {
        if (!this.isFormSaved) {
            e.preventDefault();
            e.returnValue = 'GSF2018';
            return '';
        }
    };
    StepForm.prototype.handleReloadCTA = function (e) {
        e.preventDefault();
        document.location.reload();
    };
    StepForm.prototype.checkAutoSave = function () {
        var _this = this;
        if (this.timeout) {
            this.isFormSaved = false;
            clearTimeout(this.timeout);
        }
        this.timeout = setTimeout(function () {
            _this.handleSubmit();
        }, AUTOSAVE_TIMEOUT);
    };
    StepForm.prototype.handleSubmit = function () {
        var _this = this;
        var _a;
        this.form.reportValidity();
        var params = (_a = {
                id: this.projectSiteId
            },
            _a[this.name] = this.mainTextArea,
            _a[this.name + "_hash"] = this.currentEditHash,
            _a);
        util_1.axiosInstance.post(FORM_URL, JSON.stringify(params))
            .then(function (response) {
            if (response.data.errors) {
                _this.checkLastEdited();
                _this.form.classList.add(util_1.ACTION_CLASSES.ERROR);
            }
            else {
                _this.form.classList.add(util_1.ACTION_CLASSES.SUBMITTED);
                _this.savingStatus.classList.add(util_1.ACTION_CLASSES.HIDDEN);
                if (_this.mainTextArea === '') {
                    _this.emptyStatus.classList.remove(util_1.ACTION_CLASSES.HIDDEN);
                }
                else {
                    _this.savedStatus.classList.remove(util_1.ACTION_CLASSES.HIDDEN);
                }
                _this.isFormSaved = true;
                _this.currentEditHash = response.data[_this.name + "_hash"];
            }
        })
            .catch(function (error) {
            _this.checkLastEdited();
            if (!error.response.data.errors.startsWith('Edit collision')) {
                _this.snackBar.snackBarTrigger(undefined, undefined, undefined, SNACKBAR_TIMEOUT);
            }
            _this.form.classList.add(util_1.ACTION_CLASSES.ERROR);
        });
    };
    __decorate([
        core_decorators_1.autobind
    ], StepForm.prototype, "init", null);
    __decorate([
        core_decorators_1.autobind
    ], StepForm.prototype, "checkLastEdited", null);
    __decorate([
        core_decorators_1.autobind
    ], StepForm.prototype, "handleCKEditChange", null);
    __decorate([
        core_decorators_1.autobind
    ], StepForm.prototype, "handleBeforeUnload", null);
    __decorate([
        core_decorators_1.autobind
    ], StepForm.prototype, "handleReloadCTA", null);
    __decorate([
        core_decorators_1.autobind
    ], StepForm.prototype, "checkAutoSave", null);
    __decorate([
        core_decorators_1.autobind
    ], StepForm.prototype, "handleSubmit", null);
    return StepForm;
}());
exports.StepForm = StepForm;


/***/ }),

/***/ "./static/js/forms/StepSummaryForm.ts":
/*!********************************************!*\
  !*** ./static/js/forms/StepSummaryForm.ts ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_decorators_1 = __webpack_require__(/*! core-decorators */ "./node_modules/core-decorators/es/core-decorators.js");
var util_1 = __webpack_require__(/*! ../util */ "./static/js/util/index.ts");
var components_1 = __webpack_require__(/*! ../components */ "./static/js/components/index.ts");
var SELECTORS = {
    FORM: '.js-form',
    PROJECT_ID_INPUT: '.js-project-id',
    PROJECT_SITE_ID_INPUT: '.js-project-site-id',
    MAIN_TEXTAREA: '.js-main-textarea',
    PROJECT_NAME: '.js-project-name',
    PROJECT_CATEGORY: '.js-main-category',
    FORM_SUB_CATEGORY: '.js-secondary-category',
    PROJECT_SUB_CATEGORIES: '.js-sub-categories',
    PROJECT_DESCRIPTION: '.js-description',
    SAVED: '.js-status-bar-saved',
    SAVING: '.js-status-bar-saving',
    EMPTY: '.js-status-bar-empty',
    INCOMPLETE: '.js-status-bar-incomplete',
    EDITED_HASH: '.js-last-edited',
    BAD_HASH: '.js-bad-hash',
    RELOAD_CTA: '.js-reload-cta',
};
var SITES_FORM_URL = '/api/sites/update';
var PROJECT_FORM_URL = '/api/projects/update';
var AUTOSAVE_TIMEOUT = 2000;
var StepSummaryForm = (function () {
    function StepSummaryForm(core) {
        this.summary = '';
        this.name = '';
        this.description = '';
        this.core = core;
        this.ckEdit = new components_1.CKEdit(core, this.handleCKEditChange);
        this.form = document.querySelector(SELECTORS.FORM);
        this.projectSiteId = document
            .querySelector(SELECTORS.PROJECT_SITE_ID_INPUT).value;
        this.projectId = document
            .querySelector(SELECTORS.PROJECT_ID_INPUT).value;
        this.category = this.form.querySelector(SELECTORS.PROJECT_CATEGORY);
        this.subCategories = util_1.nodeListToArray(this.form.querySelectorAll(SELECTORS.PROJECT_SUB_CATEGORIES));
        this.subCategoryForm = document.querySelector(SELECTORS.FORM_SUB_CATEGORY);
        this.stepNav = new components_1.StepNav(this.core);
        this.savedStatus = document.querySelector(SELECTORS.SAVED);
        this.savingStatus = document.querySelector(SELECTORS.SAVING);
        this.emptyStatus = document.querySelector(SELECTORS.EMPTY);
        this.incompleteStatus = document.querySelector(SELECTORS.INCOMPLETE);
        var editHashInput = document.querySelector(SELECTORS.EDITED_HASH);
        this.badHashWarningEl = document.querySelector(SELECTORS.BAD_HASH);
        this.reloadCTA = document.querySelector(SELECTORS.RELOAD_CTA);
        if (editHashInput && editHashInput.value === '') {
            this.currentEditHash = null;
        }
        else if (editHashInput) {
            this.currentEditHash = editHashInput.value;
        }
        this.subCategoriesChecked = 0;
        this.isSitesPostSuccess = true;
        this.isProjectPostSuccess = true;
        this.isFormSaved = this.isSitesPostSuccess && this.isProjectPostSuccess;
        this.snackBar = new components_1.SnackBar(this.core);
        this.stickyBar = new components_1.StickyBar(true);
        this.init();
    }
    StepSummaryForm.prototype.init = function () {
        var _this = this;
        this.description = CKEDITOR.instances.description && CKEDITOR.instances.description.getData();
        this.name = CKEDITOR.instances.project_name && CKEDITOR.instances.project_name.getData();
        this.summary = CKEDITOR.instances.summary && CKEDITOR.instances.summary.getData();
        if (this.category.value) {
            this.subCategoryForm.classList.add(util_1.ACTION_CLASSES.ACTIVE);
        }
        this.category.addEventListener('change', this.handleCategoryChange);
        for (var _i = 0, _a = this.subCategories; _i < _a.length; _i++) {
            var subCategory = _a[_i];
            subCategory.addEventListener('change', this.handleSecondaryCategoryChange);
        }
        this.subCategoriesChecked = this.subCategories.filter(function (c) { return c.checked; }).length;
        this.removeSubCategoryFromList();
        this.disableSubCategories();
        this.reloadCTA.addEventListener('click', this.handleReloadCTA);
        CKEDITOR.on('instanceReady', function (ev) {
            ev.editor.on('focus', _this.checkLastEdited);
        });
        window.addEventListener('beforeunload', this.handleBeforeUnload);
    };
    StepSummaryForm.prototype.checkLastEdited = function () {
        var _this = this;
        var projectUrl = "/api/sites/get?hashonly=summary";
        util_1.axiosInstance.get(projectUrl).then(function (response) {
            var sanitizedData = response.data.replace(/^\)]}',/, '');
            var jsonResponse = JSON.parse(sanitizedData);
            var hash = jsonResponse[_this.name + "_hash"];
            if (hash === null) {
                return;
            }
            if (hash !== _this.currentEditHash) {
                _this.ckEdit.editor && _this.ckEdit.editor.setReadOnly();
                _this.badHashWarningEl.classList.remove(util_1.ACTION_CLASSES.HIDDEN);
                TweenMax.to(window, 1, {
                    scrollTo: {
                        y: window.scrollY + _this.badHashWarningEl.getBoundingClientRect().top - 85,
                        autoKill: false,
                    },
                });
            }
        });
    };
    StepSummaryForm.prototype.handleCKEditChange = function (e) {
        var data = e.editor.getData();
        var name = e.editor.name;
        this.checkAutoSave();
        this.emptyStatus.classList.add(util_1.ACTION_CLASSES.HIDDEN);
        this.savedStatus.classList.add(util_1.ACTION_CLASSES.HIDDEN);
        this.savingStatus.classList.remove(util_1.ACTION_CLASSES.HIDDEN);
        this.incompleteStatus.classList.add(util_1.ACTION_CLASSES.HIDDEN);
        switch (name) {
            case 'project_name':
                this.name = data;
                break;
            case 'description':
                this.description = data;
                break;
            case 'summary':
                this.summary = data;
                break;
        }
    };
    StepSummaryForm.prototype.handleReloadCTA = function (e) {
        e.preventDefault();
        document.location.reload();
    };
    StepSummaryForm.prototype.handleBeforeUnload = function (e) {
        if (!this.isFormSaved) {
            e.preventDefault();
            e.returnValue = 'GSF2018';
            return '';
        }
    };
    StepSummaryForm.prototype.handleCategoryChange = function (event) {
        this.subCategoryForm.classList.add(util_1.ACTION_CLASSES.ACTIVE);
        this.removeSubCategoryFromList();
        this.checkAutoSave();
    };
    StepSummaryForm.prototype.handleSecondaryCategoryChange = function (event) {
        this.subCategoriesChecked = this.subCategories.filter(function (c) { return c.checked; }).length;
        var category = event.target;
        category.checked ? this.disableSubCategories() : this.enableSubCategories();
        this.checkAutoSave();
    };
    StepSummaryForm.prototype.disableSubCategories = function () {
        if (this.subCategoriesChecked === 2) {
            for (var _i = 0, _a = this.subCategories; _i < _a.length; _i++) {
                var subCategory = _a[_i];
                if (!subCategory.checked) {
                    subCategory.disabled = true;
                }
            }
        }
    };
    StepSummaryForm.prototype.enableSubCategories = function () {
        for (var _i = 0, _a = this.subCategories; _i < _a.length; _i++) {
            var subCategory = _a[_i];
            subCategory.disabled = false;
        }
        this.disableSubCategories();
    };
    StepSummaryForm.prototype.removeSubCategoryFromList = function () {
        for (var _i = 0, _a = this.subCategories; _i < _a.length; _i++) {
            var subCategory = _a[_i];
            var parentDiv = subCategory.parentNode;
            if (subCategory.value === this.category.value) {
                parentDiv.classList.add(util_1.ACTION_CLASSES.HIDDEN);
                if (subCategory.checked) {
                    subCategory.checked = false;
                }
            }
            else {
                parentDiv.classList.remove(util_1.ACTION_CLASSES.HIDDEN);
            }
        }
        this.subCategoriesChecked = this.subCategories.filter(function (c) { return c.checked; }).length;
        this.enableSubCategories();
    };
    StepSummaryForm.prototype.checkAutoSave = function () {
        var _this = this;
        if (this.timeout) {
            this.isFormSaved = false;
            clearTimeout(this.timeout);
        }
        this.timeout = setTimeout(function () {
            _this.handleSubmit();
        }, AUTOSAVE_TIMEOUT);
    };
    StepSummaryForm.prototype.checkStatus = function (projectParams, sitesParams) {
        if (this.isFormSaved) {
            this.savingStatus.classList.add(util_1.ACTION_CLASSES.HIDDEN);
            if (projectParams.project_name && projectParams.description &&
                projectParams.main_category && sitesParams.summary) {
                this.savedStatus.classList.remove(util_1.ACTION_CLASSES.HIDDEN);
            }
            else if (!projectParams.project_name || !projectParams.description ||
                !projectParams.main_category || !sitesParams.summary) {
                this.incompleteStatus.classList.remove(util_1.ACTION_CLASSES.HIDDEN);
            }
            else {
                this.emptyStatus.classList.remove(util_1.ACTION_CLASSES.HIDDEN);
            }
        }
    };
    StepSummaryForm.prototype.sendProjectData = function (projectParams) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2, util_1.axiosInstance.post(PROJECT_FORM_URL, JSON.stringify(projectParams))
                        .then(function (projectResponse) {
                        if (projectResponse.data.errors) {
                            _this.checkLastEdited();
                            _this.form.classList.add(util_1.ACTION_CLASSES.ERROR);
                            _this.isProjectPostSuccess = false;
                        }
                        else {
                            _this.form.classList.remove(util_1.ACTION_CLASSES.ERROR);
                            _this.form.classList.add(util_1.ACTION_CLASSES.SUBMITTED);
                            _this.isProjectPostSuccess = true;
                        }
                    })
                        .catch(function (error) {
                        _this.checkLastEdited();
                        if (!error.response.data.errors.startsWith('Edit collision')) {
                            _this.snackBar.snackBarTrigger();
                        }
                        _this.form.classList.add(util_1.ACTION_CLASSES.ERROR);
                        _this.isProjectPostSuccess = false;
                    })];
            });
        });
    };
    StepSummaryForm.prototype.sendSiteData = function (sitesParams) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2, util_1.axiosInstance.post(SITES_FORM_URL, JSON.stringify(sitesParams))
                        .then(function (response) {
                        if (response.data.errors) {
                            _this.checkLastEdited();
                            _this.form.classList.add(util_1.ACTION_CLASSES.ERROR);
                            _this.isSitesPostSuccess = false;
                        }
                        else {
                            _this.form.classList.remove(util_1.ACTION_CLASSES.ERROR);
                            _this.form.classList.add(util_1.ACTION_CLASSES.SUBMITTED);
                            _this.isSitesPostSuccess = true;
                        }
                    })
                        .catch(function (error) {
                        _this.checkLastEdited();
                        if (!error.response.data.errors.startsWith('Edit collision')) {
                            _this.snackBar.snackBarTrigger();
                        }
                        _this.form.classList.add(util_1.ACTION_CLASSES.ERROR);
                        _this.isSitesPostSuccess = false;
                    })];
            });
        });
    };
    StepSummaryForm.prototype.handleSubmit = function () {
        return __awaiter(this, void 0, void 0, function () {
            var sitesParams, subCatValues, projectParams;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.emptyStatus.classList.add(util_1.ACTION_CLASSES.HIDDEN);
                        this.savedStatus.classList.add(util_1.ACTION_CLASSES.HIDDEN);
                        this.incompleteStatus.classList.add(util_1.ACTION_CLASSES.HIDDEN);
                        this.savingStatus.classList.remove(util_1.ACTION_CLASSES.HIDDEN);
                        sitesParams = {
                            id: this.projectSiteId,
                            summary: this.summary,
                            summary_hash: this.currentEditHash,
                        };
                        subCatValues = this.subCategories.reduce(function (acc, cur) {
                            if (cur.checked) {
                                return acc.concat([cur.value]);
                            }
                            return acc;
                        }, []);
                        projectParams = {
                            id: this.projectId,
                            project_name: this.name.trim(),
                            description: this.description.trim(),
                            main_category: this.category.value,
                            secondary_categories: subCatValues,
                        };
                        return [4, this.sendProjectData(projectParams)];
                    case 1:
                        _a.sent();
                        return [4, this.sendSiteData(sitesParams)];
                    case 2:
                        _a.sent();
                        this.isFormSaved = this.isProjectPostSuccess && this.isSitesPostSuccess;
                        this.checkStatus(projectParams, sitesParams);
                        return [2];
                }
            });
        });
    };
    __decorate([
        core_decorators_1.autobind
    ], StepSummaryForm.prototype, "init", null);
    __decorate([
        core_decorators_1.autobind
    ], StepSummaryForm.prototype, "checkLastEdited", null);
    __decorate([
        core_decorators_1.autobind
    ], StepSummaryForm.prototype, "handleCKEditChange", null);
    __decorate([
        core_decorators_1.autobind
    ], StepSummaryForm.prototype, "handleReloadCTA", null);
    __decorate([
        core_decorators_1.autobind
    ], StepSummaryForm.prototype, "handleBeforeUnload", null);
    __decorate([
        core_decorators_1.autobind
    ], StepSummaryForm.prototype, "handleCategoryChange", null);
    __decorate([
        core_decorators_1.autobind
    ], StepSummaryForm.prototype, "handleSecondaryCategoryChange", null);
    __decorate([
        core_decorators_1.autobind
    ], StepSummaryForm.prototype, "disableSubCategories", null);
    __decorate([
        core_decorators_1.autobind
    ], StepSummaryForm.prototype, "enableSubCategories", null);
    __decorate([
        core_decorators_1.autobind
    ], StepSummaryForm.prototype, "removeSubCategoryFromList", null);
    __decorate([
        core_decorators_1.autobind
    ], StepSummaryForm.prototype, "checkAutoSave", null);
    __decorate([
        core_decorators_1.autobind
    ], StepSummaryForm.prototype, "checkStatus", null);
    __decorate([
        core_decorators_1.autobind
    ], StepSummaryForm.prototype, "sendProjectData", null);
    __decorate([
        core_decorators_1.autobind
    ], StepSummaryForm.prototype, "sendSiteData", null);
    __decorate([
        core_decorators_1.autobind
    ], StepSummaryForm.prototype, "handleSubmit", null);
    return StepSummaryForm;
}());
exports.StepSummaryForm = StepSummaryForm;


/***/ }),

/***/ "./static/js/forms/TeamForm.ts":
/*!*************************************!*\
  !*** ./static/js/forms/TeamForm.ts ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = __webpack_require__(/*! ../util */ "./static/js/util/index.ts");
var core_decorators_1 = __webpack_require__(/*! core-decorators */ "./node_modules/core-decorators/es/core-decorators.js");
var ClipboardJS = __webpack_require__(/*! clipboard */ "./node_modules/clipboard/dist/clipboard.js");
var components_1 = __webpack_require__(/*! ../components */ "./static/js/components/index.ts");
var SELECTORS = {
    CANCEL_INVITE: '.js-cancel-invite',
    CANCEL_SNACKBAR: '.js-cancel-snackbar',
    COPY_SNACKBAR: '.js-copy-snackbar',
    SAVED_SNACKBAR: '.js-saved-snackbar',
    COPY_TEAM_CODE: '.js-copy-team-code',
    TEAM_CODE_CONTAINERS: '.js-team-invite-container',
    CREATE_TEAM_CONTAINER: '.js-create-team-container',
    CREATE_TEAM: '.js-create-team',
    FORM: '.js-form',
    INVITE_CONTAINER: '.js-invite-container',
    INVITE_SENT_CONTAINER: '.js-invite-sent-container',
    TEAM_CODE_DISPLAY: '.js-team-code-display',
    JOIN_TEAM_CONTAINER: '.js-team-code-container',
    JOIN_TEAM: '.js-join-team',
    LEAVE_TEAM: '.js-leave-modal-container',
    PROJECT_ID_INPUT: '.js-project-id',
    RE_SEND_INVITE: '.js-re-send-invite',
    REMOVE_CONTAINERS: '.js-remove-modal-container',
    UPDATE_TEAM_CONTAINTER: '.js-update-team-code-container',
    UPDATE_TEAM_NAME: '.js-submit--team-form',
};
var SNACKBAR_DELAY = 5000;
var JOIN_URL = '/api/members/join_team';
var CREATE_URL = '/api/projects/update';
var INVITE_URL = '/api/projects/invite';
var CANCEL_URL = '/api/projects/remove';
var PROJECT_URL = '/api/projects/get';
var TeamForm = (function () {
    function TeamForm(core) {
        this.core = core;
        this.form = document.querySelector(SELECTORS.FORM);
        this.projectId = document.querySelector(SELECTORS.PROJECT_ID_INPUT).value;
        this.inputs = util_1.nodeListToArray(this.form.querySelectorAll('input, textarea, select'));
        this.joinTeamInput = this.form
            .querySelector(SELECTORS.JOIN_TEAM_CONTAINER + " input");
        this.joinTeamButton = this.form
            .querySelector(SELECTORS.JOIN_TEAM);
        this.createTeamInput = this.form
            .querySelector(SELECTORS.CREATE_TEAM_CONTAINER + " input");
        this.createTeamButton = this.form
            .querySelector(SELECTORS.CREATE_TEAM);
        this.updateTeamInput = this.form
            .querySelector(SELECTORS.UPDATE_TEAM_CONTAINTER + " input");
        this.updateTeamButton = this.form
            .querySelector(SELECTORS.UPDATE_TEAM_NAME);
        this.teamCodeContainers = util_1.nodeListToArray(document
            .querySelectorAll(SELECTORS.TEAM_CODE_CONTAINERS));
        this.originalTeamName = this.updateTeamInput && this.updateTeamInput.value;
        this.leaveTeam = document.querySelector(SELECTORS.LEAVE_TEAM);
        this.removeMembers = util_1.nodeListToArray(document.querySelectorAll(SELECTORS.REMOVE_CONTAINERS));
        this.inviteContainer = util_1.nodeListToArray(document.querySelectorAll(SELECTORS.INVITE_CONTAINER));
        this.inviteSentContainer = util_1.nodeListToArray(document
            .querySelectorAll(SELECTORS.INVITE_SENT_CONTAINER));
        this.cancelSnackBar = new components_1.SnackBar(this.core, document.querySelector(SELECTORS.CANCEL_SNACKBAR));
        this.snackBar = new components_1.SnackBar(this.core, document.querySelector(SELECTORS.COPY_SNACKBAR));
        this.savedSnackBar = new components_1.SnackBar(this.core, document.querySelector(SELECTORS.SAVED_SNACKBAR));
        if (document.querySelector(SELECTORS.COPY_TEAM_CODE)) {
            this.clipBoard = new ClipboardJS(SELECTORS.COPY_TEAM_CODE);
            this.clipBoard.on('success', this.snackBar.snackBarTrigger.
                bind(undefined, undefined, undefined));
        }
        this.init();
    }
    TeamForm.prototype.init = function () {
        var _this = this;
        if (this.joinTeamButton && this.joinTeamInput) {
            this.joinTeamInput.addEventListener('keydown', this.handleKeyDown);
            this.joinTeamButton.addEventListener('click', this.handleJoinTeamButton);
            if (this.joinTeamInput.value === '') {
                this.joinTeamButton.disabled = true;
            }
            this.joinTeamInput.addEventListener('input', this.handleJoinInput);
        }
        if (this.updateTeamButton && this.updateTeamInput) {
            this.updateTeamInput.addEventListener('input', this.handleUpdateTeamInput);
            this.updateTeamInput.addEventListener('keydown', this.handleKeyDown);
            this.updateTeamButton.disabled = true;
            this.updateTeamButton.addEventListener('click', this.handleUpdateTeam);
        }
        if (this.createTeamButton && this.createTeamInput) {
            this.createTeamInput.addEventListener('keydown', this.handleKeyDown);
            this.createTeamButton.addEventListener('click', this.handleCreateTeamButton);
            this.createTeamInput.addEventListener('input', this.handleCreateInput);
            if (this.createTeamInput.value === '') {
                this.createTeamButton.disabled = true;
            }
        }
        if (this.inviteContainer) {
            this.inviteContainer.forEach(function (invite) {
                var input = invite.querySelector('input');
                var button = invite.querySelector('button');
                if (input.value === '') {
                    button.disabled = true;
                }
                input.addEventListener('input', _this.handleInviteInput.bind(_this, button));
                input.addEventListener('keydown', _this.handleKeyDown);
                button.addEventListener('click', function (e) {
                    button.classList.add(util_1.ACTION_CLASSES.SAVING);
                    _this.handleInviteButton(input, invite, e);
                });
            });
        }
        if (this.inviteSentContainer) {
            this.inviteSentContainer.forEach(function (invite) {
                var input = invite.querySelector('input');
                var sendButton = invite.querySelector(SELECTORS.RE_SEND_INVITE);
                var cancelButton = invite.querySelector(SELECTORS.CANCEL_INVITE);
                sendButton.addEventListener('click', function () {
                    sendButton.classList.add(util_1.ACTION_CLASSES.SAVING);
                    _this.sendInvite(input, invite);
                });
                cancelButton.addEventListener('click', function () {
                    _this.cancelSnackBar
                        .snackBarTrigger(undefined, undefined, _this.cancelInvite.bind(_this, input, invite), SNACKBAR_DELAY);
                });
            });
        }
        if (this.removeMembers) {
            this.removeMembers.forEach(function (container) {
                var input = container.querySelector('input');
                var removeButton = container.querySelector('button');
                removeButton.addEventListener('click', _this.removeMember
                    .bind(_this, input, container));
            });
        }
        if (this.leaveTeam) {
            var input = this.leaveTeam.querySelector('input');
            var removeButton = this.leaveTeam.querySelector('button');
            removeButton.addEventListener('click', this.removeMember
                .bind(this, input, this.leaveTeam));
        }
        if (this.teamCodeContainers) {
            this.teamCodeContainers.forEach(function (container) {
                var button = container.querySelector(SELECTORS.COPY_TEAM_CODE);
                var span = container.querySelector(SELECTORS.TEAM_CODE_DISPLAY);
                if (button.dataset.clipboardText === 'None' || span.innerText === 'None') {
                    _this.pollCode(button, span);
                }
            });
        }
    };
    TeamForm.prototype.pollCode = function (button, span) {
        var _this = this;
        clearTimeout();
        util_1.axiosInstance.get(PROJECT_URL)
            .then(function (response) {
            if (!response.data.errors) {
                var sanitizedData = response.data.replace(/^\)]}',/, '');
                var jsonResponse = JSON.parse(sanitizedData);
                var text = jsonResponse[button.dataset.slotname];
                if (text === null) {
                    setTimeout(_this.pollCode.bind(_this, button, span), 2000);
                    return;
                }
                span.innerText = text;
                button.dataset.clipboardText = text;
                button.disabled = false;
                if (_this.clipBoard) {
                    _this.clipBoard.destroy();
                }
                _this.clipBoard = new ClipboardJS(SELECTORS.COPY_TEAM_CODE);
                _this.clipBoard.on('success', _this.snackBar.snackBarTrigger
                    .bind(undefined, undefined, undefined));
            }
        })
            .catch(function (_error) {
            console.log('error');
        });
    };
    TeamForm.prototype.handleKeyDown = function (e) {
        var keyName = e.key;
        if (keyName === 'Enter') {
            var target = e.currentTarget;
            switch (target.id) {
                case 'team-code':
                    this.joinTeam();
                    break;
                case 'team-name':
                    this.handleUpdateTeam();
                    break;
                case 'create-name':
                    this.handleCreateTeamButton();
                    break;
                case 'team-member2':
                case 'team-member3':
                    this.handleInviteButton(target, target.closest('.js-invite-container'), e);
                    break;
            }
        }
    };
    TeamForm.prototype.handleInviteInput = function (button, e) {
        if (e.currentTarget.checkValidity()) {
            button.disabled = false;
        }
        else {
            button.disabled = true;
        }
    };
    TeamForm.prototype.handleInviteButton = function (input, container, e) {
        e.preventDefault();
        this.sendInvite(input, container);
    };
    TeamForm.prototype.handleJoinInput = function () {
        if (!this.joinTeamButton || !this.joinTeamInput) {
            return;
        }
        if (this.joinTeamInput.value !== '') {
            this.joinTeamButton.disabled = false;
        }
        else {
            this.joinTeamButton.disabled = true;
        }
    };
    TeamForm.prototype.handleCreateInput = function () {
        if (!this.createTeamButton || !this.createTeamInput) {
            return;
        }
        if (this.createTeamInput.value !== '') {
            this.createTeamButton.disabled = false;
        }
        else {
            this.createTeamButton.disabled = true;
        }
    };
    TeamForm.prototype.handleUpdateTeamInput = function () {
        if (!this.updateTeamInput || !this.updateTeamButton) {
            return;
        }
        if (this.updateTeamInput.value === this.originalTeamName || this.updateTeamInput.value === '') {
            this.updateTeamButton.disabled = true;
        }
        else {
            this.updateTeamButton.disabled = false;
        }
    };
    TeamForm.prototype.handleUpdateTeam = function () {
        if (this.updateTeamInput && this.updateTeamButton) {
            this.updateTeamButton.classList.add(util_1.ACTION_CLASSES.SAVING);
            this.createTeam(this.updateTeamInput.value, true);
        }
    };
    TeamForm.prototype.handleJoinTeamButton = function (e) {
        e.preventDefault();
        this.joinTeam();
    };
    TeamForm.prototype.handleCreateTeamButton = function (e) {
        e && e.preventDefault();
        if (this.createTeamInput) {
            this.createTeam(this.createTeamInput.value);
        }
    };
    TeamForm.prototype.joinTeam = function () {
        var _this = this;
        this.joinTeamButton && this.joinTeamButton.classList.add(util_1.ACTION_CLASSES.SAVING);
        var params = {
            invite_code: this.joinTeamInput && this.joinTeamInput.value,
        };
        util_1.axiosInstance.post(JOIN_URL, JSON.stringify(params))
            .then(function (response) {
            if (response.data.errors) {
                _this.form.querySelector(SELECTORS.JOIN_TEAM_CONTAINER)
                    .classList.add(util_1.ACTION_CLASSES.ERROR);
            }
            else {
                _this.form.classList.add(util_1.ACTION_CLASSES.SUBMITTED);
                window.location.reload();
            }
        })
            .catch(function (_error) {
            _this.form.querySelector(SELECTORS.JOIN_TEAM_CONTAINER)
                .classList.add(util_1.ACTION_CLASSES.ERROR);
            _this.resetActiveButtons();
        });
    };
    TeamForm.prototype.createTeam = function (teamName, isExistingTeam) {
        var _this = this;
        this.createTeamButton && this.createTeamButton.classList.add(util_1.ACTION_CLASSES.SAVING);
        var params = {
            id: parseInt(this.projectId, 10),
            team_name: teamName,
        };
        util_1.axiosInstance.post(CREATE_URL, JSON.stringify(params))
            .then(function (response) {
            if (response.data.errors) {
                _this.form.querySelector(SELECTORS.CREATE_TEAM_CONTAINER)
                    .classList.add(util_1.ACTION_CLASSES.ERROR);
            }
            else {
                _this.form.classList.add(util_1.ACTION_CLASSES.SUBMITTED);
                if (isExistingTeam) {
                    _this.savedSnackBar.snackBarTrigger();
                    _this.resetActiveButtons();
                    return;
                }
                window.location.reload();
            }
            _this.resetActiveButtons();
        })
            .catch(function (_error) {
            _this.form.querySelector(SELECTORS.CREATE_TEAM_CONTAINER)
                .classList.add(util_1.ACTION_CLASSES.ERROR);
            _this.resetActiveButtons();
        });
    };
    TeamForm.prototype.sendInvite = function (input, container) {
        var _this = this;
        var _a;
        var params = (_a = {
                locale: document.documentElement.lang
            },
            _a[input.name] = input.value,
            _a);
        util_1.axiosInstance.post(INVITE_URL, JSON.stringify(params))
            .then(function (response) {
            if (response.data.errors) {
                container.classList.add(util_1.ACTION_CLASSES.ERROR);
            }
            else {
                _this.form.classList.add(util_1.ACTION_CLASSES.SUBMITTED);
                window.location.reload();
            }
            _this.resetActiveButtons();
        })
            .catch(function (_error) {
            container.classList.add(util_1.ACTION_CLASSES.ERROR);
            _this.resetActiveButtons();
        });
    };
    TeamForm.prototype.cancelInvite = function (input, container) {
        var _this = this;
        var _a;
        var params = (_a = {},
            _a[input.name] = input.value,
            _a);
        util_1.axiosInstance.post(CANCEL_URL, JSON.stringify(params))
            .then(function (response) {
            if (response.data.errors) {
                container.classList.add(util_1.ACTION_CLASSES.ERROR);
            }
            else {
                _this.form.classList.add(util_1.ACTION_CLASSES.SUBMITTED);
                window.location.reload();
            }
            _this.resetActiveButtons();
        })
            .catch(function (_error) {
            container.classList.add(util_1.ACTION_CLASSES.ERROR);
            _this.resetActiveButtons();
        });
    };
    TeamForm.prototype.removeMember = function (input, container) {
        var _this = this;
        var _a;
        var params = (_a = {},
            _a[input.name] = input.value,
            _a);
        util_1.axiosInstance.post(CANCEL_URL, JSON.stringify(params))
            .then(function (response) {
            if (response.data.errors) {
                container.classList.add(util_1.ACTION_CLASSES.ERROR);
            }
            else {
                _this.form.classList.add(util_1.ACTION_CLASSES.SUBMITTED);
                window.location.reload();
            }
            _this.resetActiveButtons();
        })
            .catch(function (_error) {
            container.classList.add(util_1.ACTION_CLASSES.ERROR);
            _this.resetActiveButtons();
        });
    };
    TeamForm.prototype.resetActiveButtons = function () {
        util_1.nodeListToArray(document.querySelectorAll('button')).forEach(function (button) {
            button.classList.remove(util_1.ACTION_CLASSES.SAVING);
        });
    };
    __decorate([
        core_decorators_1.autobind
    ], TeamForm.prototype, "init", null);
    __decorate([
        core_decorators_1.autobind
    ], TeamForm.prototype, "pollCode", null);
    __decorate([
        core_decorators_1.autobind
    ], TeamForm.prototype, "handleKeyDown", null);
    __decorate([
        core_decorators_1.autobind
    ], TeamForm.prototype, "handleInviteInput", null);
    __decorate([
        core_decorators_1.autobind
    ], TeamForm.prototype, "handleInviteButton", null);
    __decorate([
        core_decorators_1.autobind
    ], TeamForm.prototype, "handleJoinInput", null);
    __decorate([
        core_decorators_1.autobind
    ], TeamForm.prototype, "handleCreateInput", null);
    __decorate([
        core_decorators_1.autobind
    ], TeamForm.prototype, "handleUpdateTeamInput", null);
    __decorate([
        core_decorators_1.autobind
    ], TeamForm.prototype, "handleUpdateTeam", null);
    __decorate([
        core_decorators_1.autobind
    ], TeamForm.prototype, "handleJoinTeamButton", null);
    __decorate([
        core_decorators_1.autobind
    ], TeamForm.prototype, "handleCreateTeamButton", null);
    __decorate([
        core_decorators_1.autobind
    ], TeamForm.prototype, "joinTeam", null);
    __decorate([
        core_decorators_1.autobind
    ], TeamForm.prototype, "createTeam", null);
    __decorate([
        core_decorators_1.autobind
    ], TeamForm.prototype, "sendInvite", null);
    __decorate([
        core_decorators_1.autobind
    ], TeamForm.prototype, "cancelInvite", null);
    __decorate([
        core_decorators_1.autobind
    ], TeamForm.prototype, "removeMember", null);
    __decorate([
        core_decorators_1.autobind
    ], TeamForm.prototype, "resetActiveButtons", null);
    return TeamForm;
}());
exports.TeamForm = TeamForm;


/***/ }),

/***/ "./static/js/forms/TeaserForm.ts":
/*!***************************************!*\
  !*** ./static/js/forms/TeaserForm.ts ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_decorators_1 = __webpack_require__(/*! core-decorators */ "./node_modules/core-decorators/es/core-decorators.js");
var axios_1 = __webpack_require__(/*! axios */ "./node_modules/axios/index.js");
var util_1 = __webpack_require__(/*! ../util */ "./static/js/util/index.ts");
var SELECTORS = {
    TEASER_FORM: '.js-teaser-form',
    TEASER_FORM_SUBMIT: '.js-teaser-form-submit',
    TEASER_FORM_TEXT_INPUT: '.form--text-input',
    TEASER_FORM_EMAIL: '.js-email-container',
    TEASER_FORM_RADIO: '.js-radio-container',
    TEASER_FORM_LEGAL: '.js-terms-container',
    TEASER_FORM_SUCCESS: '.js-teaser-form-success',
    TEASER_FORM_CONTAINER: '.js-teaser-form-container',
    TEASER_FORM_COUNTRY: '.js-country-input',
    TEASER_FORM_LANGUAGE: '.js-language-input',
};
var TEASER_FORM_URL = 'https://web.archive.org/web/20181015183524/https://services.google.com/fb/submissions/googlesciencefair-teaser/';
var TeaserForm = (function () {
    function TeaserForm(core) {
        this.core = core;
        this.teaserFormContainer = document
            .querySelector(SELECTORS.TEASER_FORM_CONTAINER);
        this.teaserForm = this.teaserFormContainer
            .querySelector(SELECTORS.TEASER_FORM);
        this.teaserFormSubmit = this.teaserFormContainer
            .querySelector(SELECTORS.TEASER_FORM_SUBMIT);
        this.teaserFormSuccess = document
            .querySelector(SELECTORS.TEASER_FORM_SUCCESS);
        this.init();
    }
    TeaserForm.prototype.init = function () {
        var _this = this;
        this.teaserForm.addEventListener('change', this.handleFormChange);
        this.teaserFormSubmit.addEventListener('click', this.handleSubmit);
        this.teaserForm.querySelector(SELECTORS.TEASER_FORM_EMAIL + " input")
            .addEventListener('blur', this.handleEmailBlur);
        this.teaserForm.querySelector(SELECTORS.TEASER_FORM_LEGAL + " input")
            .addEventListener('change', this.handleLegalBlur);
        util_1.nodeListToArray(this.teaserForm
            .querySelectorAll('.js-modal-link'))
            .forEach(function (link) { return link.addEventListener('click', _this.resetModal); });
    };
    TeaserForm.prototype.resetModal = function (e) {
        this.teaserForm.querySelector('.glue-app-ready .glue-c-modal__overlay')
            .style.display = 'block';
    };
    TeaserForm.prototype.handleSubmit = function (e) {
        var _this = this;
        e.preventDefault();
        if (this.isFormValid()) {
            var params_1 = {
                'gsf-country': this.teaserForm.querySelector(SELECTORS.TEASER_FORM_COUNTRY).value,
                'gsf-email': this.teaserForm.querySelector(SELECTORS.TEASER_FORM_TEXT_INPUT).value,
                'gsf-i-am-a': this.teaserForm.querySelector(SELECTORS.TEASER_FORM_RADIO + " input:checked").value,
                'gsf-is-legal-checked': this.teaserForm.querySelector(SELECTORS.TEASER_FORM_LEGAL + " input").value,
                'gsf-language': this.teaserForm.querySelector(SELECTORS.TEASER_FORM_LANGUAGE).value,
            };
            axios_1.default.defaults.headers.post['Content-Type'] =
                'application/x-www-form-urlencoded';
            axios_1.default.post(TEASER_FORM_URL, Object.keys(params_1)
                .map(function (key) { return key + "=" + encodeURIComponent((params_1[key])); }).join('&'))
                .then(function (response) {
                if (response.data.errors) {
                    if (response.data.errors['gsf-email']) {
                        _this.teaserForm.querySelector(SELECTORS.TEASER_FORM_EMAIL)
                            .classList.add('-error');
                    }
                    if (response.data.errors['gsf-i-am-a']) {
                        _this.teaserForm.querySelector(SELECTORS.TEASER_FORM_RADIO)
                            .classList.add('-error');
                    }
                    if (response.data.errors['gsf-is-legal-checked']) {
                        _this.teaserForm.querySelector(SELECTORS.TEASER_FORM_LEGAL)
                            .classList.add('-error');
                    }
                }
                else {
                    _this.teaserFormContainer.classList.add('-submitted');
                    _this.teaserFormSuccess.style.display = 'flex';
                    setTimeout(function () {
                        TweenMax.to(window, .15, {
                            scrollTo: {
                                y: 0,
                                autoKill: false,
                            },
                        });
                        _this.teaserFormSuccess.classList.add('-active');
                        _this.teaserFormContainer.style.overflow = 'hidden';
                        _this.teaserFormContainer.style.display = 'none';
                    }, 500);
                }
            })
                .catch(function (error) {
                _this.teaserForm.classList.add('-error');
            });
            return;
        }
        this.setFormStates();
    };
    TeaserForm.prototype.isEmailValid = function () {
        var emailField = this.teaserForm
            .querySelector(SELECTORS.TEASER_FORM_TEXT_INPUT);
        return emailField.validity.valid;
    };
    TeaserForm.prototype.isCategoryValid = function () {
        var categoryFields = util_1.nodeListToArray(this.teaserForm
            .querySelectorAll('.form--radio-group input'));
        return categoryFields.find(function (field) { return field.checked === true; }) !== undefined;
    };
    TeaserForm.prototype.isLegalChecked = function () {
        var legalCheck = this.teaserForm.querySelector('#isLegalChecked');
        return legalCheck.checked === true;
    };
    TeaserForm.prototype.isFormValid = function () {
        return this.isEmailValid() && this.isCategoryValid() && this.isLegalChecked();
    };
    TeaserForm.prototype.setFormStates = function () {
        if (!this.isEmailValid()) {
            this.teaserForm.querySelector(SELECTORS.TEASER_FORM_EMAIL)
                .classList.add('-error');
        }
        if (!this.isCategoryValid()) {
            this.teaserForm.querySelector(SELECTORS.TEASER_FORM_RADIO)
                .classList.add('-error');
        }
        if (!this.isLegalChecked()) {
            this.teaserForm.querySelector(SELECTORS.TEASER_FORM_LEGAL)
                .classList.add('-error');
        }
    };
    TeaserForm.prototype.handleFormChange = function () {
        this.teaserFormSubmit.disabled = !this.isFormValid();
    };
    TeaserForm.prototype.handleEmailBlur = function () {
        if (!this.isEmailValid()) {
            this.teaserForm.querySelector(SELECTORS.TEASER_FORM_EMAIL)
                .classList.add('-error');
        }
        else {
            this.teaserForm.querySelector(SELECTORS.TEASER_FORM_EMAIL)
                .classList.remove('-error');
        }
    };
    TeaserForm.prototype.handleLegalBlur = function () {
        if (!this.isLegalChecked()) {
            this.teaserForm.querySelector(SELECTORS.TEASER_FORM_LEGAL)
                .classList.add('-error');
        }
        else {
            this.teaserForm.querySelector(SELECTORS.TEASER_FORM_LEGAL)
                .classList.remove('-error');
        }
    };
    __decorate([
        core_decorators_1.autobind
    ], TeaserForm.prototype, "init", null);
    __decorate([
        core_decorators_1.autobind
    ], TeaserForm.prototype, "resetModal", null);
    __decorate([
        core_decorators_1.autobind
    ], TeaserForm.prototype, "handleSubmit", null);
    __decorate([
        core_decorators_1.autobind
    ], TeaserForm.prototype, "isEmailValid", null);
    __decorate([
        core_decorators_1.autobind
    ], TeaserForm.prototype, "isCategoryValid", null);
    __decorate([
        core_decorators_1.autobind
    ], TeaserForm.prototype, "isLegalChecked", null);
    __decorate([
        core_decorators_1.autobind
    ], TeaserForm.prototype, "isFormValid", null);
    __decorate([
        core_decorators_1.autobind
    ], TeaserForm.prototype, "setFormStates", null);
    __decorate([
        core_decorators_1.autobind
    ], TeaserForm.prototype, "handleFormChange", null);
    __decorate([
        core_decorators_1.autobind
    ], TeaserForm.prototype, "handleEmailBlur", null);
    __decorate([
        core_decorators_1.autobind
    ], TeaserForm.prototype, "handleLegalBlur", null);
    return TeaserForm;
}());
exports.default = TeaserForm;


/***/ }),

/***/ "./static/js/forms/index.ts":
/*!**********************************!*\
  !*** ./static/js/forms/index.ts ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Forms_1 = __webpack_require__(/*! ./Forms */ "./static/js/forms/Forms.ts");
exports.Forms = Forms_1.Forms;
var StepForm_1 = __webpack_require__(/*! ./StepForm */ "./static/js/forms/StepForm.ts");
exports.StepForm = StepForm_1.StepForm;
var StepSummaryForm_1 = __webpack_require__(/*! ./StepSummaryForm */ "./static/js/forms/StepSummaryForm.ts");
exports.StepSummaryForm = StepSummaryForm_1.StepSummaryForm;
var TeamForm_1 = __webpack_require__(/*! ./TeamForm */ "./static/js/forms/TeamForm.ts");
exports.TeamForm = TeamForm_1.TeamForm;
var ConsentForm_1 = __webpack_require__(/*! ./ConsentForm */ "./static/js/forms/ConsentForm.ts");
exports.ConsentForm = ConsentForm_1.ConsentForm;
var CheckList_1 = __webpack_require__(/*! ./CheckList */ "./static/js/forms/CheckList.ts");
exports.CheckList = CheckList_1.CheckList;
var ParentalConsent_1 = __webpack_require__(/*! ./ParentalConsent */ "./static/js/forms/ParentalConsent.ts");
exports.ParentalConsent = ParentalConsent_1.ParentalConsent;
var Profile_1 = __webpack_require__(/*! ./Profile */ "./static/js/forms/Profile.ts");
exports.Profile = Profile_1.Profile;
var InspiringEducator_1 = __webpack_require__(/*! ./InspiringEducator */ "./static/js/forms/InspiringEducator.ts");
exports.InspiringEducator = InspiringEducator_1.InspiringEducator;
var TeaserForm_1 = __webpack_require__(/*! ./TeaserForm */ "./static/js/forms/TeaserForm.ts");
exports.TeaserForm = TeaserForm_1.default;


/***/ }),

/***/ "./static/js/pages/Dashboard.ts":
/*!**************************************!*\
  !*** ./static/js/pages/Dashboard.ts ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var SELECTORS = {
    MODAL_LINK: '.js-modal-link',
};
var Dashboard = (function () {
    function Dashboard(core) {
        this.core = core;
        this.modalLink = document.querySelector(SELECTORS.MODAL_LINK);
        this.init();
    }
    Dashboard.prototype.init = function () {
        if (window.location.hash === '#top-tips') {
            this.modalLink && this.modalLink.click();
        }
    };
    return Dashboard;
}());
exports.default = Dashboard;


/***/ }),

/***/ "./static/js/pages/Home.ts":
/*!*********************************!*\
  !*** ./static/js/pages/Home.ts ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_decorators_1 = __webpack_require__(/*! core-decorators */ "./node_modules/core-decorators/es/core-decorators.js");
var components_1 = __webpack_require__(/*! ../components */ "./static/js/components/index.ts");
var util_1 = __webpack_require__(/*! ../util */ "./static/js/util/index.ts");
var SELECTORS = {
    PARENT_LOGO_CONTAINER: '.js-parent-logo-container',
    LOGO_CONTAINER: '.js-logo-container',
    INTERACTIVE_LOGO_CONTAINER: '.js-interactive-logo-container',
    COMPASS_CONTAINER: '.js-animate-compass',
    LOGO_WHEN_SCROLLED: '.js-logo-when-scrolled',
    MODAL_LINK: '.js-error-modal-link',
};
var HEADER_HEIGHT = 80;
var SCROLL_HEADER_INTERACTION_CLASS = '-will-transition-on-scroll';
var SCROLL_HEADER_VISIBLE_CLASS = '-should-show';
var SCROLL_HEADER_INVISIBLE_CLASS = '-should-hide';
var Home = (function () {
    function Home(core) {
        this.headerIsScrolled = false;
        this.compassHasPlayed = false;
        this.core = core;
        this.medScreen = window.matchMedia('(min-width: 600px)').matches;
        this.logoAnimationContainer = document.querySelector(SELECTORS.LOGO_CONTAINER);
        if (this.logoAnimationContainer) {
            this.logoAnimationContainer.classList.add(util_1.ACTION_CLASSES.ACTIVE);
        }
        this.interactiveLogoAnimationContainer =
            document.querySelector(SELECTORS.INTERACTIVE_LOGO_CONTAINER);
        this.logoAnimationData = {
            container: this.logoAnimationContainer,
            renderer: 'svg',
            loop: false,
            autoplay: true,
            path: this.medScreen ?
                '/static/data/GSF_logo7.json' : '/static/data/GSF_logo_mobile.json',
        };
        this.interactiveLogoAnimationData = {
            container: this.interactiveLogoAnimationContainer,
            renderer: 'svg',
            loop: false,
            autoplay: false,
            path: '/static/data/GSF_interactive_logo.json',
        };
        this.parentLogoContainer =
            document.querySelector(SELECTORS.PARENT_LOGO_CONTAINER);
        this.headerLogo = document.querySelector(SELECTORS.LOGO_WHEN_SCROLLED);
        this.compassAnimationContainer =
            document.querySelector(SELECTORS.COMPASS_CONTAINER);
        this.compassAnimationData = {
            container: this.compassAnimationContainer,
            renderer: 'svg',
            loop: false,
            autoplay: false,
            path: '/static/data/compass.json',
        };
        this.errorModalLink = document.querySelector(SELECTORS.MODAL_LINK);
        this.init();
    }
    Home.prototype.init = function () {
        this.interactiveLogoAnimationObject =
            bodymovin.loadAnimation(this.interactiveLogoAnimationData);
        this.interactiveLogo = new components_1.InteractiveLogo(this.interactiveLogoAnimationContainer, this.interactiveLogoAnimationObject);
        if (this.core.prefersReducedMotion) {
            this.logoAnimationContainer.classList.remove(util_1.ACTION_CLASSES.ACTIVE);
            if (this.interactiveLogo) {
                this.interactiveLogo.init();
            }
        }
        else {
            this.logoAnimationObject = bodymovin.loadAnimation(this.logoAnimationData);
            this.animateLogo();
        }
        if (this.headerLogo && this.parentLogoContainer) {
            this.parentLogoContainer.classList.add(SCROLL_HEADER_INTERACTION_CLASS);
            this.headerLogo.classList.add(SCROLL_HEADER_INTERACTION_CLASS);
            window.addEventListener('scroll', this.onScroll);
            this.onScroll();
            window.addEventListener('resize', this.onResize);
            this.onResize();
        }
        if (this.compassAnimationContainer) {
            this.compassAnimationObject = bodymovin.loadAnimation(this.compassAnimationData);
        }
        if (window.location.hash === '#sign-in') {
            this.errorModalLink && this.errorModalLink.click();
            window.location.hash = '';
        }
    };
    Home.prototype.animateLogo = function () {
        var _this = this;
        this.logoAnimationObject.play();
        this.logoAnimationObject.addEventListener('complete', function () {
            _this.logoAnimationContainer.classList.remove(util_1.ACTION_CLASSES.ACTIVE);
            if (_this.interactiveLogo) {
                _this.interactiveLogo.init();
            }
        });
    };
    Home.prototype.onScroll = function () {
        requestAnimationFrame(this.handleScroll);
    };
    Home.prototype.handleScroll = function () {
        if (this.core.prefersReducedMotion && !this.compassHasPlayed) {
            this.compassAnimationObject.goToAndStop(this.compassAnimationObject.totalFrames, true);
            this.compassHasPlayed = true;
        }
        else {
            if (this.compassAnimationContainer && !this.compassHasPlayed) {
                var compassTop = this.compassAnimationContainer.getBoundingClientRect().top;
                if (compassTop < window.innerHeight) {
                    this.compassAnimationObject.play();
                    this.compassHasPlayed = true;
                }
            }
        }
        if (!this.medScreen) {
            return;
        }
        var top = this.interactiveLogoAnimationContainer
            .getBoundingClientRect().top + window.innerHeight;
        if (top < HEADER_HEIGHT && !this.headerIsScrolled) {
            this.headerLogo.classList.add(SCROLL_HEADER_VISIBLE_CLASS);
            this.headerIsScrolled = true;
        }
        else if (top >= HEADER_HEIGHT && this.headerIsScrolled) {
            this.parentLogoContainer.classList.remove(SCROLL_HEADER_INVISIBLE_CLASS);
            this.headerLogo.classList.remove(SCROLL_HEADER_VISIBLE_CLASS);
            this.headerIsScrolled = false;
        }
    };
    Home.prototype.onResize = function () {
        requestAnimationFrame(this.handleResize);
    };
    Home.prototype.handleResize = function () {
        this.medScreen = window.matchMedia('(min-width: 600px)').matches;
    };
    __decorate([
        core_decorators_1.autobind
    ], Home.prototype, "init", null);
    __decorate([
        core_decorators_1.autobind
    ], Home.prototype, "animateLogo", null);
    __decorate([
        core_decorators_1.autobind
    ], Home.prototype, "onScroll", null);
    __decorate([
        core_decorators_1.autobind
    ], Home.prototype, "handleScroll", null);
    __decorate([
        core_decorators_1.autobind
    ], Home.prototype, "onResize", null);
    __decorate([
        core_decorators_1.autobind
    ], Home.prototype, "handleResize", null);
    return Home;
}());
exports.default = Home;


/***/ }),

/***/ "./static/js/pages/ProjectPreview.ts":
/*!*******************************************!*\
  !*** ./static/js/pages/ProjectPreview.ts ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ClipboardJS = __webpack_require__(/*! clipboard */ "./node_modules/clipboard/dist/clipboard.js");
var components_1 = __webpack_require__(/*! ../components */ "./static/js/components/index.ts");
var SELECTORS = {
    COPY_SNACKBAR: '.js-copy-snackbar',
    COPY_URL: '.js-copy-url',
};
var ProjectPreview = (function () {
    function ProjectPreview(core) {
        this.core = core;
        var snackBarContainer = document.querySelector(SELECTORS.COPY_SNACKBAR);
        if (!snackBarContainer) {
            return;
        }
        this.snackBar = new components_1.SnackBar(this.core, snackBarContainer);
        this.clipBoard = new ClipboardJS(SELECTORS.COPY_URL);
        this.clipBoard.on('success', this.snackBar.snackBarTrigger
            .bind(undefined, undefined, undefined));
    }
    return ProjectPreview;
}());
exports.default = ProjectPreview;


/***/ }),

/***/ "./static/js/pages/Register.ts":
/*!*************************************!*\
  !*** ./static/js/pages/Register.ts ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_decorators_1 = __webpack_require__(/*! core-decorators */ "./node_modules/core-decorators/es/core-decorators.js");
var util_1 = __webpack_require__(/*! ../util */ "./static/js/util/index.ts");
var components_1 = __webpack_require__(/*! ../components */ "./static/js/components/index.ts");
var AgeRangeRestriction_1 = __webpack_require__(/*! ../components/AgeRangeRestriction */ "./static/js/components/AgeRangeRestriction.ts");
var SELECTORS = {
    FORM: '.js-register-form',
    FORM_SUBMIT: '.js-form-submit',
    FORM_TEXT_INPUT: '.form--text-input',
    FORM_RADIO: '.js-radio-group',
    FORM_LEGAL: '.js-terms-container',
    FORM_FIRST_NAME: '.js-first-name-container',
    FORM_LAST_NAME: '.js-last-name-container',
    FORM_SUCCESS: '.js-form-success',
    FORM_CONTAINER: '.js-form-container',
    FORM_COUNTRY: '.js-country-input',
    FORM_STATE: '.js-state-input',
    FORM_LANGUAGE: '.js-language-input',
    FORM_TEAM_CODE: '.js-team-input',
    FORM_PICTURE_URL: '#pictureUrl',
    DATA_TIP_SELECTOR: '.js-tooltip-trigger',
    REGISTER_TERMS: '.js-register-terms',
    RECEIVED_TEAM_CODE: '.js-received-team-code',
    STEP_1: '.js-step-1',
    STEP_2: '.js-step-2',
    CONTINUE_BUTTON: '.js-continue',
};
var FORM_URL = '/api/members/create';
var Register = (function () {
    function Register(core) {
        this.core = core;
        this.form = document.querySelector(SELECTORS.FORM);
        this.formSubmit = this.form
            .querySelector(SELECTORS.FORM_SUBMIT);
        this.formSuccess = document.querySelector(SELECTORS.FORM_SUCCESS);
        this.formContainer = document
            .querySelector(SELECTORS.FORM_CONTAINER);
        this.country = this.form.querySelector(SELECTORS.FORM_COUNTRY + " select");
        this.stateContainer = this.form.querySelector(SELECTORS.FORM_STATE);
        this.state = this.stateContainer
            .querySelector(SELECTORS.FORM_STATE + " select");
        this.firstName = this.form
            .querySelector(SELECTORS.FORM_FIRST_NAME + " input");
        this.surname = this.form.querySelector(SELECTORS.FORM_LAST_NAME + " input");
        this.teamCodeContainer = this.form.querySelector(SELECTORS.FORM_TEAM_CODE);
        this.teamCode = this.teamCodeContainer
            .querySelector('input');
        this.acceptPrivacy = this.form
            .querySelector(SELECTORS.FORM_LEGAL + " input");
        this.pictureUrl = this.form
            .querySelector("input" + SELECTORS.FORM_PICTURE_URL);
        this.registerTerms = this.form.querySelector(SELECTORS.REGISTER_TERMS);
        this.receivedTeamCode = this.form
            .querySelector(SELECTORS.RECEIVED_TEAM_CODE + " input");
        this.stepOneContainer = this.form.querySelector(SELECTORS.STEP_1);
        this.stepTwoContainer = this.form.querySelector(SELECTORS.STEP_2);
        this.continueButton = this.form.querySelector(SELECTORS.CONTINUE_BUTTON);
        this.ageRangeContainer = this.form.querySelector(SELECTORS.FORM_RADIO);
        this.ageRangeRestrictions = new AgeRangeRestriction_1.default(this.country, this.ageRangeContainer, this.registerTerms);
        this.init();
    }
    Register.prototype.init = function () {
        var _this = this;
        document.addEventListener('keydown', this.handleKeyDown);
        this.formSubmit.disabled = true;
        this.continueButton.disabled = true;
        this.stepTwoContainer.classList.add(util_1.ACTION_CLASSES.HIDDEN);
        this.formSubmit.classList.add(util_1.ACTION_CLASSES.HIDDEN);
        this.form.addEventListener('change', this.handleFormChange);
        this.formSubmit.addEventListener('click', this.handleSubmit);
        this.continueButton.addEventListener('click', this.handleContinue);
        var toolTipElements = util_1.nodeListToArray(document.querySelectorAll(SELECTORS.DATA_TIP_SELECTOR));
        toolTipElements.forEach(function (el) {
            var tooltip = new components_1.ToolTip(_this.core, el);
            el.addEventListener('mouseover', tooltip.domShow);
            el.addEventListener('mouseleave', tooltip.domHide);
            el.addEventListener('click', tooltip.domShow);
            el.addEventListener('keydown', function (e) {
                if (e.code === 'Enter' || e.code === 'Space') {
                    if (tooltip.isOpen) {
                        tooltip.domHide();
                    }
                    else {
                        tooltip.domShow();
                    }
                }
                if (e.code === 'Escape') {
                    tooltip.domHide();
                }
            });
        });
        this.country.addEventListener('change', this.handleCountryChange);
        this.state.addEventListener('change', this.handleFormChange);
        this.receivedTeamCode.addEventListener('change', this.setTeamCodeVisibility);
        this.firstName.addEventListener('input', this.handleFormChange);
        this.surname.addEventListener('input', this.handleFormChange);
        this.teamCode.addEventListener('input', this.handleFormChange);
        this.setStateVisibility();
        this.setTeamCodeVisibility();
    };
    Register.prototype.handleKeyDown = function (e) {
        var keyName = e.key;
        if (keyName === 'Enter') {
            if (this.isStepOneValid() && !this.isStepTwoValid()) {
                this.handleContinue();
            }
            else if (this.isStepOneValid() && this.isStepTwoValid()) {
                this.handleSubmit();
            }
        }
    };
    Register.prototype.setStateVisibility = function () {
        if (this.country.value === 'US') {
            this.stateContainer.classList.remove(util_1.ACTION_CLASSES.HIDDEN);
            this.state.required = true;
        }
        else {
            this.stateContainer.classList.add(util_1.ACTION_CLASSES.HIDDEN);
            this.state.required = false;
        }
    };
    Register.prototype.setTeamCodeVisibility = function () {
        if (this.receivedTeamCode.checked) {
            this.teamCodeContainer.classList.remove(util_1.ACTION_CLASSES.HIDDEN);
            this.teamCode.required = true;
        }
        else {
            this.teamCodeContainer.classList.add(util_1.ACTION_CLASSES.HIDDEN);
            this.teamCode.required = false;
        }
        this.handleFormChange();
    };
    Register.prototype.handleCountryChange = function () {
        this.setStateVisibility();
        this.handleFormChange();
    };
    Register.prototype.handleFormChange = function () {
        this.continueButton.disabled = !this.isStepOneValid();
        this.formSubmit.disabled = !this.isStepTwoValid();
    };
    Register.prototype.handleContinue = function () {
        this.stepOneContainer.classList.add(util_1.ACTION_CLASSES.HIDDEN);
        this.stepTwoContainer.classList.remove(util_1.ACTION_CLASSES.HIDDEN);
        this.continueButton.classList.add(util_1.ACTION_CLASSES.HIDDEN);
        this.formSubmit.classList.remove(util_1.ACTION_CLASSES.HIDDEN);
        this.firstName.focus();
    };
    Register.prototype.isStepOneValid = function () {
        var countryIsValid = this.country.checkValidity();
        var stateIsValid = this.state.required ? this.state.checkValidity() : true;
        var ageIsValid = this.ageRangeRestrictions.ageRange !== '';
        return countryIsValid && stateIsValid && ageIsValid;
    };
    Register.prototype.isStepTwoValid = function () {
        var firstNameIsValid = this.firstName.checkValidity();
        var surNameIsValid = this.surname.checkValidity();
        var isTeamCodeValid = this.receivedTeamCode.checked ? this.teamCode.checkValidity() : true;
        var isTermsValid = this.acceptPrivacy.checked;
        return firstNameIsValid && surNameIsValid && isTeamCodeValid && isTermsValid;
    };
    Register.prototype.isFormValid = function () {
        return this.isStepOneValid() && this.isStepTwoValid();
    };
    Register.prototype.handleSubmit = function () {
        var _this = this;
        this.form.reportValidity();
        if (this.form.checkValidity()) {
            var params = {
                country: this.country.value,
                home_state: this.state.value,
                firstname: this.firstName.value,
                surname: this.surname.value,
                invite_code: this.receivedTeamCode.checked ? this.teamCode.value : null,
                locale: document.documentElement.lang,
                accept_privacy: this.acceptPrivacy.checked,
                age_range: this.ageRangeRestrictions.ageRange,
                picture_url: this.pictureUrl.value,
            };
            util_1.axiosInstance.post(FORM_URL, JSON.stringify(params))
                .then(function (response) {
                if (response.data.errors) {
                    _this.form.classList.add('-error');
                }
                else {
                    _this.formContainer.classList.add('-submitted');
                    window.location.href = '/your-project#top-tips';
                }
            })
                .catch(function (error) {
                _this.form.classList.add('-error');
                if (error.response.data.errors === 'Code not found') {
                    _this.teamCodeContainer.querySelector('.form--input-container')
                        .classList.add(util_1.ACTION_CLASSES.ERROR);
                }
            });
            return;
        }
    };
    __decorate([
        core_decorators_1.autobind
    ], Register.prototype, "handleKeyDown", null);
    __decorate([
        core_decorators_1.autobind
    ], Register.prototype, "setStateVisibility", null);
    __decorate([
        core_decorators_1.autobind
    ], Register.prototype, "setTeamCodeVisibility", null);
    __decorate([
        core_decorators_1.autobind
    ], Register.prototype, "handleCountryChange", null);
    __decorate([
        core_decorators_1.autobind
    ], Register.prototype, "handleFormChange", null);
    __decorate([
        core_decorators_1.autobind
    ], Register.prototype, "handleContinue", null);
    __decorate([
        core_decorators_1.autobind
    ], Register.prototype, "isStepOneValid", null);
    __decorate([
        core_decorators_1.autobind
    ], Register.prototype, "isStepTwoValid", null);
    __decorate([
        core_decorators_1.autobind
    ], Register.prototype, "isFormValid", null);
    __decorate([
        core_decorators_1.autobind
    ], Register.prototype, "handleSubmit", null);
    return Register;
}());
exports.default = Register;


/***/ }),

/***/ "./static/js/pages/Styleguide.ts":
/*!***************************************!*\
  !*** ./static/js/pages/Styleguide.ts ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = __webpack_require__(/*! ../util */ "./static/js/util/index.ts");
var components_1 = __webpack_require__(/*! ../components */ "./static/js/components/index.ts");
var core_decorators_1 = __webpack_require__(/*! core-decorators */ "./node_modules/core-decorators/es/core-decorators.js");
var SELECTORS = {
    SNACKBAR: '.js-launch-snackbar',
};
var Styleguide = (function () {
    function Styleguide(core) {
        this.core = core;
        this.textareas = util_1.nodeListToArray(document.querySelectorAll(util_1.GLOBAL_SELECTORS.RICH_TEXTAREA));
        this.snackBarTrigger = document.querySelector(SELECTORS.SNACKBAR);
        this.snackBar = new components_1.SnackBar(this.core);
        this.init();
    }
    Styleguide.prototype.init = function () {
        this.snackBarTrigger.addEventListener('click', this.handleSnackBarTrigger);
    };
    Styleguide.prototype.handleSnackBarTrigger = function () {
        this.snackBar.snackBarTrigger();
    };
    __decorate([
        core_decorators_1.autobind
    ], Styleguide.prototype, "handleSnackBarTrigger", null);
    return Styleguide;
}());
exports.default = Styleguide;


/***/ }),

/***/ "./static/js/pages/Teaser.ts":
/*!***********************************!*\
  !*** ./static/js/pages/Teaser.ts ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_decorators_1 = __webpack_require__(/*! core-decorators */ "./node_modules/core-decorators/es/core-decorators.js");
var axios_1 = __webpack_require__(/*! axios */ "./node_modules/axios/index.js");
var components_1 = __webpack_require__(/*! ../components */ "./static/js/components/index.ts");
var util_1 = __webpack_require__(/*! ../util */ "./static/js/util/index.ts");
var SELECTORS = {
    ILLUSTRATION: '.js-scroll-illustration',
    SCROLL_CONTAINER: '.js-scroll-container',
    SCROLL_END: '.js-scroll-end',
    SCROLL_START: '.js-first-scroll',
    LOGO_CONTAINER: '.js-logo-container',
    SUBMISSIONS_OPEN: '.js-submissions-open',
    RESOURCE_CARD_CONTAINER: '.js-resource-card-container',
    RESOURCE_CARD: '.js-resource-card-alt',
    TEASER_FORM: '.js-teaser-form',
    TEASER_FORM_SUBMIT: '.js-teaser-form-submit',
    TEASER_FORM_TEXT_INPUT: '.form--text-input',
    TEASER_FORM_EMAIL: '.js-email-container',
    TEASER_FORM_RADIO: '.js-radio-container',
    TEASER_FORM_LEGAL: '.js-terms-container',
    TEASER_FORM_SUCCESS: '.js-teaser-form-success',
    TEASER_FORM_CONTAINER: '.js-teaser-form-container',
    TEASER_FORM_COUNTRY: '.js-country-input',
    TEASER_FORM_LANGUAGE: '.js-language-input',
    HEADER: '.js-header',
    ELS_WITH_VH: '.js-vh',
};
var TEASER_FORM_URL = 'https://web.archive.org/web/20181015183524/https://services.google.com/fb/submissions/googlesciencefair-teaser/';
var Teaser = (function () {
    function Teaser(core) {
        this.core = core;
        this.windowHeight = window.innerHeight;
        this.medScreen = window.matchMedia('(min-width: 600px)').matches;
        this.largeScreen = window.matchMedia('(min-width: 1024px)').matches;
        this.smallScreen = !this.medScreen;
        this.windowWidth = window.innerWidth;
        this.headerHasShadow = false;
        this.isIOS = false;
        this.illustrationContainer = document.querySelector(SELECTORS.ILLUSTRATION);
        this.logoAnimationContainer = document.querySelector(SELECTORS.LOGO_CONTAINER);
        this.scrollContainer = document.querySelector(SELECTORS.SCROLL_CONTAINER);
        this.teaserForm = document.querySelector(SELECTORS.TEASER_FORM);
        this.teaserFormSubmit = this.teaserForm
            .querySelector(SELECTORS.TEASER_FORM_SUBMIT);
        this.submissionsOpenElement = document.querySelector(SELECTORS.SUBMISSIONS_OPEN);
        this.teaserFormSuccess = document.querySelector(SELECTORS.TEASER_FORM_SUCCESS);
        this.teaserFormContainer = document
            .querySelector(SELECTORS.TEASER_FORM_CONTAINER);
        this.elsWithVh = util_1.nodeListToArray(document.querySelectorAll(SELECTORS.ELS_WITH_VH));
        this.resourceCard = document.querySelector(SELECTORS.RESOURCE_CARD);
        this.resourceCardContainer = document
            .querySelector(SELECTORS.RESOURCE_CARD_CONTAINER);
        this.navInPage = new components_1.NavInPage(core);
        this.scrollContainerTop = this.scrollContainer.getBoundingClientRect().top;
        this.scrollEnd = document.querySelector(SELECTORS.SCROLL_END + " > p");
        this.scrollContainerHeight = document.querySelector(SELECTORS.SCROLL_END)
            .getBoundingClientRect().top;
        this.header = document.querySelector(SELECTORS.HEADER);
        this.headerHeight = document.querySelector('.teaserpage--header')
            .getBoundingClientRect().height;
        this.animationDuration = this.scrollContainerHeight + (this.headerHeight / 4);
        this.animationData = {
            container: this.illustrationContainer,
            renderer: 'svg',
            loop: false,
            autoplay: false,
            path: '/static/images/GSF_test13.json',
        };
        this.animationObject = bodymovin.loadAnimation(this.animationData);
        this.logoAnimationData = {
            container: this.logoAnimationContainer,
            renderer: 'svg',
            loop: false,
            autoplay: true,
            path: this.medScreen ?
                '/static/images/GSF_logo6.json' : '/static/images/GSF_logo_mobile.json',
        };
        this.logoAnimationObject = bodymovin.loadAnimation(this.logoAnimationData);
        this.isLockedTop = false;
        this.isLockedBottom = false;
        this.isResourceCardSet = false;
        this.svgHeight = 0;
        this.init();
    }
    Teaser.prototype.init = function () {
        var _this = this;
        this.isIOS = /(iPad|iPhone|iPod)/.test(navigator.userAgent);
        this.animateLogo();
        this.illustrationContainer.style.width = "" + window.innerWidth;
        this.illustrationContainer.style.height = "" + window.innerHeight;
        window.addEventListener('scroll', this.animate);
        window.onbeforeunload = function () {
            _this.illustrationContainer.style.display = 'none';
            window.scrollTo(0, 0);
        };
        this.teaserForm.addEventListener('change', this.handleFormChange);
        this.teaserFormSubmit.addEventListener('click', this.handleSubmit);
        this.teaserForm.querySelector(SELECTORS.TEASER_FORM_EMAIL + " input")
            .addEventListener('blur', this.handleEmailBlur);
        this.teaserForm.querySelector(SELECTORS.TEASER_FORM_LEGAL + " input")
            .addEventListener('change', this.handleLegalBlur);
        this.animationObject.addEventListener('DOMLoaded', this.setIllustrationReady);
        util_1.nodeListToArray(document.querySelectorAll('.js-modal-link'))
            .forEach(function (link) { return link.addEventListener('click', _this.resetModal); });
        window.addEventListener('orientationchange', this.handleOrientationChange);
        window.addEventListener('resize', this.handleResize);
        if (this.medScreen) {
            this.setResourceCard();
        }
        this.setHeightsForVh();
        if (/(educator-resources)/.test(window.location.hash)) {
            TweenMax.to(window, 1, {
                scrollTo: {
                    y: document.querySelector('#educator-resources')
                        .getBoundingClientRect().top,
                    autoKill: false,
                },
            });
        }
    };
    Teaser.prototype.setResourceCard = function () {
        if (this.isResourceCardSet) {
            return;
        }
        var innerHtml = this.resourceCard.innerHTML;
        var newLi = document.createElement('li');
        newLi.classList.add('h-c-carousel__item', 'resource-card', 'resource-card-alt');
        newLi.innerHTML = innerHtml;
        this.resourceCardContainer.appendChild(newLi);
        this.resourceCard.remove();
        this.isResourceCardSet = true;
    };
    Teaser.prototype.handleResize = function () {
        this.windowHeight = window.innerHeight;
        this.medScreen = window.matchMedia('(min-width: 600px)').matches;
        this.largeScreen = window.matchMedia('(min-width: 1024px)').matches;
        if (this.smallScreen) {
            if (this.medScreen) {
                this.smallScreen = false;
                this.logoAnimationObject.destroy();
                this.logoAnimationData.path = '/static/images/GSF_logo6.json';
                this.logoAnimationObject = bodymovin.loadAnimation(this.logoAnimationData);
                this.logoAnimationObject.play();
                this.setResourceCard();
            }
        }
        else {
            if (!this.medScreen) {
                this.smallScreen = true;
                this.logoAnimationObject.destroy();
                this.logoAnimationData.path = '/static/images/GSF_logo_mobile.json';
                this.logoAnimationObject = bodymovin.loadAnimation(this.logoAnimationData);
                this.logoAnimationObject.play();
            }
        }
        if (this.windowWidth !== window.innerWidth) {
            this.windowWidth = window.innerWidth;
            window.requestAnimationFrame(this.onResize);
        }
    };
    Teaser.prototype.resetModal = function (e) {
        document.querySelector('.glue-app-ready .glue-c-modal__overlay')
            .style.display = 'block';
    };
    Teaser.prototype.handleOrientationChange = function () {
        window.requestAnimationFrame(this.onResize);
    };
    Teaser.prototype.setIllustrationReady = function () {
        var svg = this.illustrationContainer.querySelector('svg');
        this.svgHeight = this.windowHeight;
        svg.style.height = "" + this.windowHeight;
    };
    Teaser.prototype.onResize = function () {
        this.medScreen = window.matchMedia('(min-width: 600px)').matches;
        this.largeScreen = window.matchMedia('(min-width: 1024px)').matches;
        this.windowHeight = window.innerHeight;
        this.setIllustrationReady();
        this.setHeightsForVh();
        this.scrollContainerTop = this.scrollContainer.getBoundingClientRect().top + window.pageYOffset;
        this.headerHeight = document.querySelector('.teaserpage--header')
            .getBoundingClientRect().height;
        this.scrollContainerHeight = document.querySelector(SELECTORS.SCROLL_END)
            .getBoundingClientRect().top + window.pageYOffset;
        this.animate();
    };
    Teaser.prototype.animate = function () {
        if (window.scrollY > 200 && !this.headerHasShadow) {
            this.header.classList.add(util_1.ACTION_CLASSES.HAS_SHADOW);
            this.headerHasShadow = true;
        }
        else if (window.scrollY < 200 && this.headerHasShadow) {
            this.header.classList.remove(util_1.ACTION_CLASSES.HAS_SHADOW);
            this.headerHasShadow = false;
        }
        var scrollPosition = window.scrollY - (this.headerHeight / 2);
        var scrolledInContainer = this.scrollContainerHeight - (this.headerHeight / 2)
            - (this.windowHeight / 4);
        var maxFrames = this.animationObject.totalFrames;
        var frame = (maxFrames / 100) *
            (scrollPosition / (scrolledInContainer / 100));
        this.animationObject.goToAndStop(frame, true);
        var navHeight = this.medScreen ? 80 : 64;
        var illustrationTop = this.scrollContainer.getBoundingClientRect().top
            - (window.innerHeight * .5) - navHeight;
        if (this.scrollEnd.getBoundingClientRect().top <
            (this.windowHeight * (this.largeScreen ? .8 : .7)) + navHeight) {
            if (this.isLockedBottom) {
                return;
            }
            this.illustrationContainer.classList.add('-locked');
            this.illustrationContainer.classList.remove('-fixed');
            var bottom = document.querySelector(SELECTORS.SCROLL_END)
                .getBoundingClientRect().height - (this.windowHeight / 2);
            this.illustrationContainer.style.top = 'auto';
            this.illustrationContainer.style.bottom = bottom + navHeight + "px";
            this.isLockedBottom = true;
        }
        else {
            if (!this.isLockedBottom) {
                if (illustrationTop < 1) {
                    if (this.isLockedTop) {
                        return;
                    }
                    this.illustrationContainer.classList.add('-fixed');
                    this.illustrationContainer.style.bottom = '0';
                    this.isLockedTop = true;
                }
                else {
                    if (!this.isLockedTop) {
                        return;
                    }
                    this.illustrationContainer.classList.remove('-fixed');
                    this.illustrationContainer.style.removeProperty('bottom');
                    this.isLockedTop = false;
                }
                return;
            }
            this.illustrationContainer.classList.remove('-locked');
            this.illustrationContainer.classList.add('-fixed');
            this.illustrationContainer.style.removeProperty('top');
            this.illustrationContainer.style.bottom = '0';
            this.isLockedBottom = false;
        }
    };
    Teaser.prototype.animateLogo = function () {
        this.logoAnimationObject.play();
        this.logoAnimationObject.addEventListener('complete', this.onLogoAnimationComplete);
    };
    Teaser.prototype.onLogoAnimationComplete = function () {
        this.submissionsOpenElement.classList.add('-active');
    };
    Teaser.prototype.handleSubmit = function (e) {
        var _this = this;
        e.preventDefault();
        if (this.isFormValid()) {
            var params_1 = {
                'gsf-country': this.teaserForm.querySelector(SELECTORS.TEASER_FORM_COUNTRY).value,
                'gsf-email': this.teaserForm.querySelector(SELECTORS.TEASER_FORM_TEXT_INPUT).value,
                'gsf-i-am-a': this.teaserForm.querySelector(SELECTORS.TEASER_FORM_RADIO + " input:checked").value,
                'gsf-is-legal-checked': this.teaserForm.querySelector(SELECTORS.TEASER_FORM_LEGAL + " input").value,
                'gsf-language': this.teaserForm.querySelector(SELECTORS.TEASER_FORM_LANGUAGE).value,
            };
            axios_1.default.defaults.headers.post['Content-Type'] =
                'application/x-www-form-urlencoded';
            axios_1.default.post(TEASER_FORM_URL, Object.keys(params_1)
                .map(function (key) { return key + "=" + encodeURIComponent((params_1[key])); }).join('&'))
                .then(function (response) {
                if (response.data.errors) {
                    if (response.data.errors['gsf-email']) {
                        _this.teaserForm.querySelector(SELECTORS.TEASER_FORM_EMAIL)
                            .classList.add('-error');
                    }
                    if (response.data.errors['gsf-i-am-a']) {
                        _this.teaserForm.querySelector(SELECTORS.TEASER_FORM_RADIO)
                            .classList.add('-error');
                    }
                    if (response.data.errors['gsf-is-legal-checked']) {
                        _this.teaserForm.querySelector(SELECTORS.TEASER_FORM_LEGAL)
                            .classList.add('-error');
                    }
                }
                else {
                    _this.teaserFormContainer.classList.add('-submitted');
                    _this.teaserFormSuccess.style.display = 'flex';
                    setTimeout(function () {
                        TweenMax.to(window, .15, {
                            scrollTo: {
                                y: 0,
                                autoKill: false,
                            },
                        });
                        _this.teaserFormSuccess.classList.add('-active');
                        _this.teaserFormContainer.style.overflow = 'hidden';
                        _this.teaserFormContainer.style.display = 'none';
                    }, 500);
                }
            })
                .catch(function (error) {
                _this.teaserForm.classList.add('-error');
            });
            return;
        }
        this.setFormStates();
    };
    Teaser.prototype.isEmailValid = function () {
        var emailField = this.teaserForm
            .querySelector(SELECTORS.TEASER_FORM_TEXT_INPUT);
        return emailField.validity.valid;
    };
    Teaser.prototype.isCategoryValid = function () {
        var categoryFields = util_1.nodeListToArray(this.teaserForm
            .querySelectorAll('.form--radio-group input'));
        return categoryFields.find(function (field) { return field.checked === true; }) !== undefined;
    };
    Teaser.prototype.isLegalChecked = function () {
        var legalCheck = this.teaserForm.querySelector('#isLegalChecked');
        return legalCheck.checked === true;
    };
    Teaser.prototype.isFormValid = function () {
        return this.isEmailValid() && this.isCategoryValid() && this.isLegalChecked();
    };
    Teaser.prototype.setFormStates = function () {
        if (!this.isEmailValid()) {
            this.teaserForm.querySelector(SELECTORS.TEASER_FORM_EMAIL)
                .classList.add('-error');
        }
        if (!this.isCategoryValid()) {
            this.teaserForm.querySelector(SELECTORS.TEASER_FORM_RADIO)
                .classList.add('-error');
        }
        if (!this.isLegalChecked()) {
            this.teaserForm.querySelector(SELECTORS.TEASER_FORM_LEGAL)
                .classList.add('-error');
        }
    };
    Teaser.prototype.handleFormChange = function () {
        this.teaserFormSubmit.disabled = !this.isFormValid();
    };
    Teaser.prototype.handleEmailBlur = function () {
        if (!this.isEmailValid()) {
            this.teaserForm.querySelector(SELECTORS.TEASER_FORM_EMAIL)
                .classList.add('-error');
        }
        else {
            this.teaserForm.querySelector(SELECTORS.TEASER_FORM_EMAIL)
                .classList.remove('-error');
        }
    };
    Teaser.prototype.handleLegalBlur = function () {
        if (!this.isLegalChecked()) {
            this.teaserForm.querySelector(SELECTORS.TEASER_FORM_LEGAL)
                .classList.add('-error');
        }
        else {
            this.teaserForm.querySelector(SELECTORS.TEASER_FORM_LEGAL)
                .classList.remove('-error');
        }
    };
    Teaser.prototype.setHeightsForVh = function () {
        var _this = this;
        this.elsWithVh.forEach(function (el) {
            el.style.removeProperty('height');
            if (_this.largeScreen) {
                return;
            }
            if (el.classList.contains('teaserpage--scroll--content')) {
                el.style.padding = _this.windowHeight * (_this.largeScreen ? .3 : .2) + "px 0";
            }
            if (el.classList.contains('js-scroll-illustration')) {
                el.style.height = _this.windowHeight + "px";
            }
            if (el.classList.contains('js-first-scroll')) {
                el.style.paddingTop = _this.windowHeight * (_this.largeScreen ? .5 : .3) + "px";
            }
            el.style.height = window.getComputedStyle(el).height;
        });
    };
    __decorate([
        core_decorators_1.autobind
    ], Teaser.prototype, "init", null);
    __decorate([
        core_decorators_1.autobind
    ], Teaser.prototype, "setResourceCard", null);
    __decorate([
        core_decorators_1.autobind
    ], Teaser.prototype, "handleResize", null);
    __decorate([
        core_decorators_1.autobind
    ], Teaser.prototype, "resetModal", null);
    __decorate([
        core_decorators_1.autobind
    ], Teaser.prototype, "handleOrientationChange", null);
    __decorate([
        core_decorators_1.autobind
    ], Teaser.prototype, "setIllustrationReady", null);
    __decorate([
        core_decorators_1.autobind
    ], Teaser.prototype, "onResize", null);
    __decorate([
        core_decorators_1.autobind
    ], Teaser.prototype, "animate", null);
    __decorate([
        core_decorators_1.autobind
    ], Teaser.prototype, "animateLogo", null);
    __decorate([
        core_decorators_1.autobind
    ], Teaser.prototype, "onLogoAnimationComplete", null);
    __decorate([
        core_decorators_1.autobind
    ], Teaser.prototype, "handleSubmit", null);
    __decorate([
        core_decorators_1.autobind
    ], Teaser.prototype, "isEmailValid", null);
    __decorate([
        core_decorators_1.autobind
    ], Teaser.prototype, "isCategoryValid", null);
    __decorate([
        core_decorators_1.autobind
    ], Teaser.prototype, "isLegalChecked", null);
    __decorate([
        core_decorators_1.autobind
    ], Teaser.prototype, "isFormValid", null);
    __decorate([
        core_decorators_1.autobind
    ], Teaser.prototype, "setFormStates", null);
    __decorate([
        core_decorators_1.autobind
    ], Teaser.prototype, "handleFormChange", null);
    __decorate([
        core_decorators_1.autobind
    ], Teaser.prototype, "handleEmailBlur", null);
    __decorate([
        core_decorators_1.autobind
    ], Teaser.prototype, "handleLegalBlur", null);
    __decorate([
        core_decorators_1.autobind
    ], Teaser.prototype, "setHeightsForVh", null);
    return Teaser;
}());
exports.default = Teaser;


/***/ }),

/***/ "./static/js/pages/index.ts":
/*!**********************************!*\
  !*** ./static/js/pages/index.ts ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Home_1 = __webpack_require__(/*! ./Home */ "./static/js/pages/Home.ts");
exports.Home = Home_1.default;
var ProjectPreview_1 = __webpack_require__(/*! ./ProjectPreview */ "./static/js/pages/ProjectPreview.ts");
exports.ProjectPreview = ProjectPreview_1.default;
var Register_1 = __webpack_require__(/*! ./Register */ "./static/js/pages/Register.ts");
exports.Register = Register_1.default;
var Styleguide_1 = __webpack_require__(/*! ./Styleguide */ "./static/js/pages/Styleguide.ts");
exports.Styleguide = Styleguide_1.default;
var Teaser_1 = __webpack_require__(/*! ./Teaser */ "./static/js/pages/Teaser.ts");
exports.Teaser = Teaser_1.default;
var Dashboard_1 = __webpack_require__(/*! ./Dashboard */ "./static/js/pages/Dashboard.ts");
exports.Dashboard = Dashboard_1.default;


/***/ }),

/***/ "./static/js/util/AxiosInstance.ts":
/*!*****************************************!*\
  !*** ./static/js/util/AxiosInstance.ts ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var axios_1 = __webpack_require__(/*! axios */ "./node_modules/axios/index.js");
var axiosInstance = axios_1.default.create({
    headers: {
        'Content-Type': 'application/json;charset=UTF-8',
    },
});
exports.default = axiosInstance;


/***/ }),

/***/ "./static/js/util/Point.ts":
/*!*********************************!*\
  !*** ./static/js/util/Point.ts ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var sqrt = Math.sqrt;
var Point = (function () {
    function Point(x, y) {
        this.x = x;
        this.y = y;
    }
    Point.prototype.distance = function (p) {
        return Point.distance(this.x, this.y, p.x, p.y);
    };
    Point.prototype.distanceToCoords = function (x, y) {
        return Point.distance(this.x, this.y, x, y);
    };
    Point.prototype.normalize = function (length) {
        if (length === void 0) { length = 1.0; }
        var x = this.x;
        var y = this.y;
        var d = sqrt(x * x + y * y);
        this.x = length * x / d;
        this.y = length * y / d;
    };
    Point.prototype.scale = function (scale) {
        this.x *= scale;
        this.y *= scale;
    };
    Point.prototype.clone = function () {
        return new Point(this.x, this.y);
    };
    Point.distance = function (x1, y1, x2, y2) {
        var dx = x1 - x2;
        var dy = y1 - y2;
        return sqrt(dx * dx + dy * dy);
    };
    Point.lerp = function (pt1, pt2, coef) {
        var ip = 1 - coef;
        return new Point(pt1.x * ip + pt2.x * coef, pt1.y * ip + pt2.y * coef);
    };
    return Point;
}());
exports.default = Point;


/***/ }),

/***/ "./static/js/util/constants.ts":
/*!*************************************!*\
  !*** ./static/js/util/constants.ts ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var CKEDITOR_SETTINGS = {
    language: document.documentElement.lang,
    uploadUrl: '/api/upload',
    removeButtons: 'Cut,Copy,Paste,Strike,About,Anchor',
};
exports.CKEDITOR_SETTINGS = CKEDITOR_SETTINGS;
var GLOBAL_SELECTORS = {
    RICH_TEXTAREA: '.js-rich-textarea',
};
exports.GLOBAL_SELECTORS = GLOBAL_SELECTORS;
var MEDIA_QUERIES = {
    SMALL: '(min-width: 600px)',
    MEDIUM: '(min-width: 900px)',
    LARGE: '(min-width: 1024px)',
    XL: '(min-width: 1440px)',
};
exports.MEDIA_QUERIES = MEDIA_QUERIES;
var ACTION_CLASSES = {
    ACTIVE: '-active',
    ENABLED: '-enabled',
    DISABLED: '-disabled',
    ERROR: '-error',
    FOCUSED: '-focused',
    NEEDS_FOCUS_RING: '-needs-focus',
    SUBMITTED: '-submitted',
    INACTIVE: '-inactive',
    HIDDEN: '-hidden',
    HAS_SHADOW: '-has-shadow',
    SAVING: '-saving',
    HOVERED: '-hovered',
    REDUCE_MOTION: '-reduced-motion',
};
exports.ACTION_CLASSES = ACTION_CLASSES;
exports.DEFAULT_AUDIO_LEVEL = 0.5;


/***/ }),

/***/ "./static/js/util/cookies.ts":
/*!***********************************!*\
  !*** ./static/js/util/cookies.ts ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
function readCookie(name) {
    var result = new RegExp("(?:^|; )" + encodeURIComponent(name) + "=([^;]*)").exec(document.cookie);
    return result ? result[1] : null;
}
exports.readCookie = readCookie;
function writeCookie(name, value, days) {
    if (days === void 0) { days = 365; }
    var date = new Date();
    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
    document.cookie = name + "=\"" + value + "\"; expires=" + date.toUTCString() + "; path=/";
}
exports.writeCookie = writeCookie;


/***/ }),

/***/ "./static/js/util/index.ts":
/*!*********************************!*\
  !*** ./static/js/util/index.ts ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ripple_1 = __webpack_require__(/*! @material/ripple */ "./node_modules/@material/ripple/index.js");
var nodeListToArray_1 = __webpack_require__(/*! ./nodeListToArray */ "./static/js/util/nodeListToArray.ts");
exports.nodeListToArray = nodeListToArray_1.default;
var cookies_1 = __webpack_require__(/*! ./cookies */ "./static/js/util/cookies.ts");
exports.readCookie = cookies_1.readCookie;
exports.writeCookie = cookies_1.writeCookie;
var constants_1 = __webpack_require__(/*! ./constants */ "./static/js/util/constants.ts");
exports.CKEDITOR_SETTINGS = constants_1.CKEDITOR_SETTINGS;
exports.GLOBAL_SELECTORS = constants_1.GLOBAL_SELECTORS;
exports.ACTION_CLASSES = constants_1.ACTION_CLASSES;
exports.MEDIA_QUERIES = constants_1.MEDIA_QUERIES;
exports.DEFAULT_AUDIO_LEVEL = constants_1.DEFAULT_AUDIO_LEVEL;
var AxiosInstance_1 = __webpack_require__(/*! ./AxiosInstance */ "./static/js/util/AxiosInstance.ts");
exports.axiosInstance = AxiosInstance_1.default;
var Point_1 = __webpack_require__(/*! ./Point */ "./static/js/util/Point.ts");
exports.Point = Point_1.default;
var isInViewport_1 = __webpack_require__(/*! ./isInViewport */ "./static/js/util/isInViewport.ts");
exports.isInViewport = isInViewport_1.isInViewport;
var isIOS = navigator.userAgent.match(/iPhone|iPod|iPad/);
var shouldLoadMDC = true;
if (isIOS) {
    var version = (navigator.userAgent.match(/\b[0-9]+_[0-9]+(?:_[0-9]+)?\b/) || [''])[0].replace(/_/g, '.');
    shouldLoadMDC = parseInt(version, 10) > 10;
}
var Ripple = shouldLoadMDC ? ripple_1.MDCRipple : null;
exports.Ripple = Ripple;


/***/ }),

/***/ "./static/js/util/isInViewport.ts":
/*!****************************************!*\
  !*** ./static/js/util/isInViewport.ts ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
function isInViewport(element) {
    var bounding = element.getBoundingClientRect();
    return (bounding.top <= (window.innerHeight || document.documentElement.clientHeight) &&
        bounding.left >= 0 &&
        bounding.bottom >= 0 &&
        bounding.right <= (window.innerWidth || document.documentElement.clientWidth));
}
exports.isInViewport = isInViewport;


/***/ }),

/***/ "./static/js/util/nodeListToArray.ts":
/*!*******************************************!*\
  !*** ./static/js/util/nodeListToArray.ts ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
function nodeListToArray(nodeList) {
    var arrayFromNodeList = [];
    for (var i = 0; i < nodeList.length; i++) {
        arrayFromNodeList.push(nodeList[i]);
    }
    return arrayFromNodeList;
}
exports.default = nodeListToArray;


/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
/*
     FILE ARCHIVED ON 18:35:24 Oct 15, 2018 AND RETRIEVED FROM THE
     INTERNET ARCHIVE ON 21:35:45 Apr 30, 2020.
     JAVASCRIPT APPENDED BY WAYBACK MACHINE, COPYRIGHT INTERNET ARCHIVE.

     ALL OTHER CONTENT MAY ALSO BE PROTECTED BY COPYRIGHT (17 U.S.C.
     SECTION 108(a)(3)).
*/
/*
playback timings (ms):
  esindex: 0.012
  RedisCDXSource: 684.625
  xauthn.identify: 88.103
  CDXLines.iter: 10.055 (3)
  LoadShardBlock: 91.635 (3)
  exclusion.robots.policy: 88.422
  PetaboxLoader3.resolve: 60.748
  PetaboxLoader3.datanode: 96.495 (4)
  xauthn.chkprivs: 0.056
  captures_list: 877.089
  exclusion.robots: 88.438
  load_resource: 221.851
*/